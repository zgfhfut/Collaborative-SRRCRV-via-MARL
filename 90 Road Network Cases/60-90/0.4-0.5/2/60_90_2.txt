node_num : 60
demand_node_num : 24
edge_num : 90
damaged_edge_num : 45
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 8, 11, 13, 15, 21, 22, 24, 26, 29, 30, 31, 34, 37, 38, 39, 42, 43, 45, 46, 51, 54, 55, 57, 59,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 2), Line(0, 16), Line(0, 46), Line(0, 55), Line(1, 39), Line(1, 40), Line(2, 10), Line(2, 13), Line(3, 20), Line(3, 32), Line(3, 53), Line(4, 21), Line(4, 24), Line(5, 47), Line(5, 55), Line(5, 58), Line(5, 59), Line(6, 15), Line(6, 43), Line(7, 12), Line(7, 48), Line(7, 53), Line(7, 59), Line(8, 52), Line(8, 58), Line(9, 12), Line(9, 37), Line(10, 11), Line(10, 20), Line(10, 24), Line(10, 25), Line(10, 54), Line(11, 34), Line(11, 40), Line(13, 16), Line(13, 35), Line(13, 58), Line(14, 19), Line(14, 44), Line(14, 52), Line(15, 36), Line(16, 42), Line(17, 19), Line(17, 26), Line(17, 28), Line(17, 45), Line(17, 50), Line(18, 35), Line(18, 42), Line(18, 48), Line(20, 23), Line(20, 53), Line(20, 56), Line(21, 22), Line(22, 34), Line(23, 27), Line(23, 29), Line(23, 35), Line(24, 25), Line(25, 37), Line(25, 53), Line(26, 34), Line(26, 46), Line(27, 38), Line(27, 44), Line(27, 46), Line(28, 35), Line(28, 39), Line(29, 43), Line(30, 49), Line(30, 55), Line(31, 42), Line(31, 51), Line(32, 47), Line(33, 54), Line(33, 56), Line(34, 36), Line(34, 42), Line(36, 49), Line(36, 54), Line(37, 57), Line(38, 41), Line(39, 50), Line(41, 51), Line(42, 56), Line(44, 52), Line(45, 48), Line(45, 59), Line(50, 57), Line(51, 58),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 2), Line(0, 16), Line(0, 55), Line(1, 39), Line(1, 40), Line(2, 13), Line(3, 20), Line(3, 32), Line(4, 24), Line(5, 55), Line(5, 58), Line(6, 43), Line(7, 12), Line(7, 48), Line(7, 59), Line(9, 12), Line(9, 37), Line(10, 11), Line(10, 20), Line(10, 24), Line(11, 34), Line(11, 40), Line(13, 35), Line(13, 58), Line(14, 44), Line(16, 42), Line(17, 50), Line(18, 42), Line(18, 48), Line(20, 53), Line(22, 34), Line(23, 29), Line(26, 34), Line(26, 46), Line(27, 38), Line(28, 35), Line(29, 43), Line(31, 42), Line(31, 51), Line(32, 47), Line(34, 36), Line(36, 54), Line(37, 57), Line(45, 59), Line(50, 57),  };
const double demand_num_pro = 0.4;
const double damaged_edge_pro = 0.5;
/*********************add_edge*************************/
g.add_edge(0, 2, 7.21);
g.add_edge(0, 16, 10.29);
g.add_edge(0, 46, 5);
g.add_edge(0, 55, 2.23);
g.add_edge(1, 39, 5);
g.add_edge(1, 40, 4.47);
g.add_edge(2, 10, 5.83);
g.add_edge(2, 13, 1);
g.add_edge(3, 20, 5.38);
g.add_edge(3, 32, 3.6);
g.add_edge(3, 53, 4.24);
g.add_edge(4, 21, 2.23);
g.add_edge(4, 24, 8.54);
g.add_edge(5, 47, 2);
g.add_edge(5, 55, 5.65);
g.add_edge(5, 58, 6.32);
g.add_edge(5, 59, 3.6);
g.add_edge(6, 15, 2.23);
g.add_edge(6, 43, 2);
g.add_edge(7, 12, 3.16);
g.add_edge(7, 48, 4.24);
g.add_edge(7, 53, 1.41);
g.add_edge(7, 59, 5.65);
g.add_edge(8, 52, 2);
g.add_edge(8, 58, 5.09);
g.add_edge(9, 12, 6.32);
g.add_edge(9, 37, 2);
g.add_edge(10, 11, 3.6);
g.add_edge(10, 20, 12.04);
g.add_edge(10, 24, 9.43);
g.add_edge(10, 25, 6.7);
g.add_edge(10, 54, 8);
g.add_edge(11, 34, 1.41);
g.add_edge(11, 40, 5.83);
g.add_edge(13, 16, 2.23);
g.add_edge(13, 35, 2.23);
g.add_edge(13, 58, 7.07);
g.add_edge(14, 19, 8.54);
g.add_edge(14, 44, 9.05);
g.add_edge(14, 52, 7.61);
g.add_edge(15, 36, 6.4);
g.add_edge(16, 42, 4.12);
g.add_edge(17, 19, 8.06);
g.add_edge(17, 26, 2);
g.add_edge(17, 28, 8.06);
g.add_edge(17, 45, 6);
g.add_edge(17, 50, 7.21);
g.add_edge(18, 35, 3);
g.add_edge(18, 42, 5.09);
g.add_edge(18, 48, 9.43);
g.add_edge(20, 23, 9.89);
g.add_edge(20, 53, 5.38);
g.add_edge(20, 56, 2.23);
g.add_edge(21, 22, 1);
g.add_edge(22, 34, 3.6);
g.add_edge(23, 27, 8.48);
g.add_edge(23, 29, 8.06);
g.add_edge(23, 35, 6.08);
g.add_edge(24, 25, 5.09);
g.add_edge(25, 37, 6.7);
g.add_edge(25, 53, 1);
g.add_edge(26, 34, 1.41);
g.add_edge(26, 46, 4.47);
g.add_edge(27, 38, 1.41);
g.add_edge(27, 44, 2.82);
g.add_edge(27, 46, 2.82);
g.add_edge(28, 35, 4.47);
g.add_edge(28, 39, 6.32);
g.add_edge(29, 43, 5);
g.add_edge(30, 49, 7.81);
g.add_edge(30, 55, 5.38);
g.add_edge(31, 42, 7.07);
g.add_edge(31, 51, 3.6);
g.add_edge(32, 47, 5.65);
g.add_edge(33, 54, 9);
g.add_edge(33, 56, 3);
g.add_edge(34, 36, 6);
g.add_edge(34, 42, 2);
g.add_edge(36, 49, 4);
g.add_edge(36, 54, 9.43);
g.add_edge(37, 57, 3);
g.add_edge(38, 41, 8.48);
g.add_edge(39, 50, 5.38);
g.add_edge(41, 51, 5);
g.add_edge(42, 56, 8.06);
g.add_edge(44, 52, 4.47);
g.add_edge(45, 48, 8.06);
g.add_edge(45, 59, 1);
g.add_edge(50, 57, 5.83);
g.add_edge(51, 58, 5.38);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 0);
g.set_importance(6, 0);
g.set_importance(7, 0);
g.set_importance(8, 4.89);
g.set_importance(9, 0);
g.set_importance(10, 0);
g.set_importance(11, 7.53);
g.set_importance(12, 0);
g.set_importance(13, 2.91);
g.set_importance(14, 0);
g.set_importance(15, 7.64);
g.set_importance(16, 0);
g.set_importance(17, 0);
g.set_importance(18, 0);
g.set_importance(19, 0);
g.set_importance(20, 0);
g.set_importance(21, 6.48);
g.set_importance(22, 3.24);
g.set_importance(23, 0);
g.set_importance(24, 8.63);
g.set_importance(25, 0);
g.set_importance(26, 3.32);
g.set_importance(27, 0);
g.set_importance(28, 0);
g.set_importance(29, 2.34);
g.set_importance(30, 8.2);
g.set_importance(31, 2.52);
g.set_importance(32, 0);
g.set_importance(33, 0);
g.set_importance(34, 2.35);
g.set_importance(35, 0);
g.set_importance(36, 0);
g.set_importance(37, 3.99);
g.set_importance(38, 6.57);
g.set_importance(39, 4.84);
g.set_importance(40, 0);
g.set_importance(41, 0);
g.set_importance(42, 3.19);
g.set_importance(43, 6.24);
g.set_importance(44, 0);
g.set_importance(45, 6.32);
g.set_importance(46, 6.73);
g.set_importance(47, 0);
g.set_importance(48, 0);
g.set_importance(49, 0);
g.set_importance(50, 0);
g.set_importance(51, 9.41);
g.set_importance(52, 0);
g.set_importance(53, 0);
g.set_importance(54, 3.2);
g.set_importance(55, 1.9);
g.set_importance(56, 0);
g.set_importance(57, 6.93);
g.set_importance(58, 0);
g.set_importance(59, 1.35);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 2), 4.94);
g.set_repair_time(Line(0, 16), 3.12);
g.set_repair_time(Line(0, 55), 3.76);
g.set_repair_time(Line(1, 39), 3.32);
g.set_repair_time(Line(1, 40), 1.68);
g.set_repair_time(Line(2, 13), 2.17);
g.set_repair_time(Line(3, 20), 2.13);
g.set_repair_time(Line(3, 32), 1.93);
g.set_repair_time(Line(4, 24), 3.59);
g.set_repair_time(Line(5, 55), 3.57);
g.set_repair_time(Line(5, 58), 3.25);
g.set_repair_time(Line(6, 43), 1.56);
g.set_repair_time(Line(7, 12), 3.44);
g.set_repair_time(Line(7, 48), 4.19);
g.set_repair_time(Line(7, 59), 1.48);
g.set_repair_time(Line(9, 12), 2.7);
g.set_repair_time(Line(9, 37), 3.51);
g.set_repair_time(Line(10, 11), 3.19);
g.set_repair_time(Line(10, 20), 1.69);
g.set_repair_time(Line(10, 24), 3.49);
g.set_repair_time(Line(11, 34), 1.02);
g.set_repair_time(Line(11, 40), 1.26);
g.set_repair_time(Line(13, 35), 4.52);
g.set_repair_time(Line(13, 58), 4.57);
g.set_repair_time(Line(14, 44), 2.72);
g.set_repair_time(Line(16, 42), 1.52);
g.set_repair_time(Line(17, 50), 1.64);
g.set_repair_time(Line(18, 42), 2.05);
g.set_repair_time(Line(18, 48), 3.85);
g.set_repair_time(Line(20, 53), 1.83);
g.set_repair_time(Line(22, 34), 2.68);
g.set_repair_time(Line(23, 29), 2.61);
g.set_repair_time(Line(26, 34), 4.22);
g.set_repair_time(Line(26, 46), 3.69);
g.set_repair_time(Line(27, 38), 4.63);
g.set_repair_time(Line(28, 35), 1.67);
g.set_repair_time(Line(29, 43), 3.72);
g.set_repair_time(Line(31, 42), 1.58);
g.set_repair_time(Line(31, 51), 3.68);
g.set_repair_time(Line(32, 47), 1.28);
g.set_repair_time(Line(34, 36), 2.7);
g.set_repair_time(Line(36, 54), 4.49);
g.set_repair_time(Line(37, 57), 1.83);
g.set_repair_time(Line(45, 59), 2.07);
g.set_repair_time(Line(50, 57), 3.32);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 28.2375}, {2, 9.0125}, {3, 23.9125}, {4, 22.1375}, {5, 9.85}, {6, 31.8875}, {7, 21.4125}, {8, 21.3875}, {9, 33.2625}, {10, 16.3}, {11, 15.3625}, {12, 25.3625}, {13, 10.2625}, {14, 24.6125}, {15, 29.1}, {16, 12.8625}, {17, 14.3375}, {18, 16.8}, {19, 24.4125}, {20, 28.9625}, {21, 19.35}, {22, 18.1}, {23, 20.375}, {24, 28.0875}, {25, 24.425}, {26, 11.8375}, {27, 9.775}, {28, 18.6375}, {29, 30.45}, {30, 9.5125}, {31, 24.9375}, {32, 19.4125}, {33, 29.925}, {34, 13.6}, {35, 13.05}, {36, 21.1}, {37, 32.8}, {38, 11.5375}, {39, 26.5375}, {40, 22.65}, {41, 22.1375}, {42, 16.1}, {43, 34.3875}, {44, 13.3}, {45, 15.6}, {46, 6.25}, {47, 12.35}, {48, 25.675}, {49, 19.275}, {50, 23.35}, {51, 24.475}, {52, 18.8875}, {53, 23.175}, {54, 26.3}, {55, 2.7875}, {56, 26.175}, {57, 30.6375}, {58, 17.75}, {59, 14.35}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 28.2375}, {1, 0}, {2, 23.775}, {3, 32.3}, {4, 23.175}, {5, 32.15}, {6, 32.925}, {7, 28.7625}, {8, 37.125}, {9, 26.5125}, {10, 17.375}, {11, 12.875}, {12, 32.7125}, {13, 22.525}, {14, 39.65}, {15, 30.1375}, {16, 22.2875}, {17, 18.9}, {18, 23.4875}, {19, 28.975}, {20, 30}, {21, 20.3875}, {22, 19.1375}, {23, 27.3375}, {24, 29.1625}, {25, 25.75}, {26, 16.4}, {27, 25.5125}, {28, 14.15}, {29, 37.4125}, {30, 36.9}, {31, 25.975}, {32, 36.8}, {33, 30.9625}, {34, 14.6375}, {35, 19.7375}, {36, 22.1375}, {37, 24.0125}, {38, 27.275}, {39, 6.25}, {40, 5.5875}, {41, 36.725}, {42, 17.1375}, {43, 35.425}, {44, 29.0375}, {45, 26.4}, {46, 21.9875}, {47, 34.65}, {48, 34.0625}, {49, 27.1375}, {50, 12.975}, {51, 30.475}, {52, 34.625}, {53, 27}, {54, 27.375}, {55, 31.025}, {56, 27.2125}, {57, 20.2625}, {58, 31.3625}, {59, 27.65}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 9.0125}, {1, 23.775}, {2, 0}, {3, 22.2125}, {4, 20.225}, {5, 17.9875}, {6, 29.975}, {7, 18.675}, {8, 16.45}, {9, 26.5375}, {10, 7.2875}, {11, 11.7875}, {12, 22.625}, {13, 1.25}, {14, 28.4625}, {15, 27.1875}, {16, 4.0375}, {17, 15.95}, {18, 7.7875}, {19, 26.025}, {20, 22.05}, {21, 17.4375}, {22, 16.1875}, {23, 11.6375}, {24, 19.075}, {25, 15.6625}, {26, 13.45}, {27, 18.7875}, {28, 9.625}, {29, 21.7125}, {30, 18.525}, {31, 18.025}, {32, 26.7125}, {33, 23.0125}, {34, 11.6875}, {35, 4.0375}, {36, 19.1875}, {37, 24.0375}, {38, 20.55}, {39, 17.525}, {40, 19.075}, {41, 23.0625}, {42, 9.1875}, {43, 27.9625}, {44, 22.3125}, {45, 23.45}, {46, 15.2625}, {47, 20.4875}, {48, 19.575}, {49, 24.1875}, {50, 24.25}, {51, 16.8125}, {52, 18.95}, {53, 16.9125}, {54, 17.2875}, {55, 11.8}, {56, 19.2625}, {57, 27.7875}, {58, 10.0875}, {59, 22.4875}, 