node_num : 60
demand_node_num : 24
edge_num : 90
damaged_edge_num : 45
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 6, 10, 12, 13, 14, 19, 20, 23, 26, 27, 28, 31, 32, 34, 36, 39, 41, 45, 46, 47, 55, 57, 58, 59,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 1), Line(0, 27), Line(0, 52), Line(0, 53), Line(1, 16), Line(1, 25), Line(1, 33), Line(2, 10), Line(2, 14), Line(2, 40), Line(3, 14), Line(3, 51), Line(4, 15), Line(4, 17), Line(4, 28), Line(5, 12), Line(5, 13), Line(5, 19), Line(6, 17), Line(6, 34), Line(7, 22), Line(7, 33), Line(7, 59), Line(8, 18), Line(8, 29), Line(8, 35), Line(9, 24), Line(9, 37), Line(9, 49), Line(10, 43), Line(10, 45), Line(10, 46), Line(10, 59), Line(11, 20), Line(11, 43), Line(12, 33), Line(12, 52), Line(12, 57), Line(13, 34), Line(13, 56), Line(14, 39), Line(14, 43), Line(15, 44), Line(15, 50), Line(15, 53), Line(16, 18), Line(16, 36), Line(16, 52), Line(18, 44), Line(18, 59), Line(19, 46), Line(19, 57), Line(20, 26), Line(21, 29), Line(21, 33), Line(21, 42), Line(22, 48), Line(23, 47), Line(23, 58), Line(24, 28), Line(24, 58), Line(25, 32), Line(25, 38), Line(26, 39), Line(26, 56), Line(27, 33), Line(27, 37), Line(29, 51), Line(30, 38), Line(30, 54), Line(31, 32), Line(31, 35), Line(32, 34), Line(32, 46), Line(36, 48), Line(36, 49), Line(36, 55), Line(37, 41), Line(40, 47), Line(41, 52), Line(42, 50), Line(45, 48), Line(46, 47), Line(46, 54), Line(46, 55), Line(50, 55), Line(51, 55), Line(51, 59), Line(55, 58), Line(56, 57),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 1), Line(0, 27), Line(0, 52), Line(1, 25), Line(3, 14), Line(4, 28), Line(5, 13), Line(5, 19), Line(6, 34), Line(7, 22), Line(7, 33), Line(8, 35), Line(10, 43), Line(10, 46), Line(12, 33), Line(12, 57), Line(13, 56), Line(14, 43), Line(15, 50), Line(16, 36), Line(16, 52), Line(18, 44), Line(21, 33), Line(22, 48), Line(23, 58), Line(24, 28), Line(24, 58), Line(25, 38), Line(26, 39), Line(26, 56), Line(27, 37), Line(30, 54), Line(31, 32), Line(31, 35), Line(32, 34), Line(32, 46), Line(36, 49), Line(37, 41), Line(40, 47), Line(42, 50), Line(45, 48), Line(46, 54), Line(50, 55), Line(51, 55), Line(55, 58),  };
const double demand_num_pro = 0.4;
const double damaged_edge_pro = 0.5;
/*********************add_edge*************************/
g.add_edge(0, 1, 4.47);
g.add_edge(0, 27, 1.41);
g.add_edge(0, 52, 8.6);
g.add_edge(0, 53, 5.09);
g.add_edge(1, 16, 7.28);
g.add_edge(1, 25, 9.48);
g.add_edge(1, 33, 3);
g.add_edge(2, 10, 6);
g.add_edge(2, 14, 1.41);
g.add_edge(2, 40, 3.16);
g.add_edge(3, 14, 7.61);
g.add_edge(3, 51, 4.12);
g.add_edge(4, 15, 6.32);
g.add_edge(4, 17, 2.23);
g.add_edge(4, 28, 1.41);
g.add_edge(5, 12, 11.4);
g.add_edge(5, 13, 8.06);
g.add_edge(5, 19, 6.32);
g.add_edge(6, 17, 6.7);
g.add_edge(6, 34, 4.24);
g.add_edge(7, 22, 5);
g.add_edge(7, 33, 4.47);
g.add_edge(7, 59, 3);
g.add_edge(8, 18, 6.08);
g.add_edge(8, 29, 2.23);
g.add_edge(8, 35, 8.6);
g.add_edge(9, 24, 8.48);
g.add_edge(9, 37, 5.83);
g.add_edge(9, 49, 7.81);
g.add_edge(10, 43, 4.24);
g.add_edge(10, 45, 6.4);
g.add_edge(10, 46, 8.48);
g.add_edge(10, 59, 6.08);
g.add_edge(11, 20, 5.65);
g.add_edge(11, 43, 5.09);
g.add_edge(12, 33, 2);
g.add_edge(12, 52, 9.84);
g.add_edge(12, 57, 8.54);
g.add_edge(13, 34, 7.81);
g.add_edge(13, 56, 6.4);
g.add_edge(14, 39, 1.41);
g.add_edge(14, 43, 5.65);
g.add_edge(15, 44, 6.4);
g.add_edge(15, 50, 1);
g.add_edge(15, 53, 3.6);
g.add_edge(16, 18, 7.81);
g.add_edge(16, 36, 3.6);
g.add_edge(16, 52, 2.23);
g.add_edge(18, 44, 8.24);
g.add_edge(18, 59, 10);
g.add_edge(19, 46, 4.47);
g.add_edge(19, 57, 5.38);
g.add_edge(20, 26, 6.7);
g.add_edge(21, 29, 9.84);
g.add_edge(21, 33, 2);
g.add_edge(21, 42, 6.32);
g.add_edge(22, 48, 4.47);
g.add_edge(23, 47, 8.06);
g.add_edge(23, 58, 3.6);
g.add_edge(24, 28, 5.38);
g.add_edge(24, 58, 6.7);
g.add_edge(25, 32, 5.09);
g.add_edge(25, 38, 5.83);
g.add_edge(26, 39, 8.06);
g.add_edge(26, 56, 8.06);
g.add_edge(27, 33, 6.7);
g.add_edge(27, 37, 2);
g.add_edge(29, 51, 7.61);
g.add_edge(30, 38, 5.38);
g.add_edge(30, 54, 2.82);
g.add_edge(31, 32, 9.21);
g.add_edge(31, 35, 2);
g.add_edge(32, 34, 8.06);
g.add_edge(32, 46, 1);
g.add_edge(36, 48, 2);
g.add_edge(36, 49, 8.06);
g.add_edge(36, 55, 3);
g.add_edge(37, 41, 2.82);
g.add_edge(40, 47, 5.09);
g.add_edge(41, 52, 2.82);
g.add_edge(42, 50, 3);
g.add_edge(45, 48, 4);
g.add_edge(46, 47, 2.82);
g.add_edge(46, 54, 7.07);
g.add_edge(46, 55, 6);
g.add_edge(50, 55, 4.12);
g.add_edge(51, 55, 6.4);
g.add_edge(51, 59, 7.07);
g.add_edge(55, 58, 2.82);
g.add_edge(56, 57, 2.23);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 0);
g.set_importance(6, 7.31);
g.set_importance(7, 0);
g.set_importance(8, 0);
g.set_importance(9, 0);
g.set_importance(10, 1.26);
g.set_importance(11, 0);
g.set_importance(12, 9.46);
g.set_importance(13, 1.9);
g.set_importance(14, 8.94);
g.set_importance(15, 0);
g.set_importance(16, 0);
g.set_importance(17, 0);
g.set_importance(18, 0);
g.set_importance(19, 5);
g.set_importance(20, 4.84);
g.set_importance(21, 0);
g.set_importance(22, 0);
g.set_importance(23, 4.9);
g.set_importance(24, 0);
g.set_importance(25, 0);
g.set_importance(26, 7.62);
g.set_importance(27, 1.42);
g.set_importance(28, 6.29);
g.set_importance(29, 0);
g.set_importance(30, 0);
g.set_importance(31, 9.9);
g.set_importance(32, 7.54);
g.set_importance(33, 0);
g.set_importance(34, 9.89);
g.set_importance(35, 0);
g.set_importance(36, 9.47);
g.set_importance(37, 0);
g.set_importance(38, 0);
g.set_importance(39, 6.33);
g.set_importance(40, 0);
g.set_importance(41, 1.62);
g.set_importance(42, 0);
g.set_importance(43, 0);
g.set_importance(44, 0);
g.set_importance(45, 9.02);
g.set_importance(46, 3.86);
g.set_importance(47, 2.49);
g.set_importance(48, 0);
g.set_importance(49, 0);
g.set_importance(50, 0);
g.set_importance(51, 0);
g.set_importance(52, 0);
g.set_importance(53, 0);
g.set_importance(54, 0);
g.set_importance(55, 2.37);
g.set_importance(56, 0);
g.set_importance(57, 6.72);
g.set_importance(58, 6.41);
g.set_importance(59, 7.65);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 1), 1.15);
g.set_repair_time(Line(0, 27), 4.82);
g.set_repair_time(Line(0, 52), 2.27);
g.set_repair_time(Line(1, 25), 1.67);
g.set_repair_time(Line(3, 14), 2.48);
g.set_repair_time(Line(4, 28), 3.76);
g.set_repair_time(Line(5, 13), 3.54);
g.set_repair_time(Line(5, 19), 1.87);
g.set_repair_time(Line(6, 34), 1.76);
g.set_repair_time(Line(7, 22), 4.08);
g.set_repair_time(Line(7, 33), 2.65);
g.set_repair_time(Line(8, 35), 4.63);
g.set_repair_time(Line(10, 43), 4.51);
g.set_repair_time(Line(10, 46), 3.73);
g.set_repair_time(Line(12, 33), 2.73);
g.set_repair_time(Line(12, 57), 4.42);
g.set_repair_time(Line(13, 56), 1.96);
g.set_repair_time(Line(14, 43), 4.41);
g.set_repair_time(Line(15, 50), 1.35);
g.set_repair_time(Line(16, 36), 4.7);
g.set_repair_time(Line(16, 52), 1.63);
g.set_repair_time(Line(18, 44), 4.64);
g.set_repair_time(Line(21, 33), 4.96);
g.set_repair_time(Line(22, 48), 1.49);
g.set_repair_time(Line(23, 58), 4.29);
g.set_repair_time(Line(24, 28), 1.91);
g.set_repair_time(Line(24, 58), 3.43);
g.set_repair_time(Line(25, 38), 1.57);
g.set_repair_time(Line(26, 39), 4.34);
g.set_repair_time(Line(26, 56), 2.54);
g.set_repair_time(Line(27, 37), 2.53);
g.set_repair_time(Line(30, 54), 3.8);
g.set_repair_time(Line(31, 32), 2.25);
g.set_repair_time(Line(31, 35), 2.54);
g.set_repair_time(Line(32, 34), 4.94);
g.set_repair_time(Line(32, 46), 3.63);
g.set_repair_time(Line(36, 49), 3.88);
g.set_repair_time(Line(37, 41), 4.67);
g.set_repair_time(Line(40, 47), 2.46);
g.set_repair_time(Line(42, 50), 2.55);
g.set_repair_time(Line(45, 48), 3.89);
g.set_repair_time(Line(46, 54), 2.89);
g.set_repair_time(Line(50, 55), 3.85);
g.set_repair_time(Line(51, 55), 4.35);
g.set_repair_time(Line(55, 58), 3.2);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 5.5875}, {2, 33.775}, {3, 30.4125}, {4, 18.7625}, {5, 26.0875}, {6, 29.925}, {7, 14.925}, {8, 26.925}, {9, 11.55}, {10, 26.275}, {11, 37.9375}, {12, 11.8375}, {13, 33.3}, {14, 35.5375}, {15, 10.8625}, {16, 13.5375}, {17, 21.55}, {18, 23.3}, {19, 29.2375}, {20, 43.75}, {21, 11.8375}, {22, 21.175}, {23, 25.2875}, {24, 22.15}, {25, 17.4375}, {26, 35.375}, {27, 1.7625}, {28, 20.525}, {29, 24.1375}, {30, 31.45}, {31, 35.3125}, {32, 23.8}, {33, 9.3375}, {34, 33.875}, {35, 37.675}, {36, 18.0375}, {37, 4.2625}, {38, 24.725}, {39, 37.3}, {40, 34.65}, {41, 7.7875}, {42, 15.8625}, {43, 31.575}, {44, 18.8625}, {45, 25.5375}, {46, 24.7625}, {47, 28.2875}, {48, 20.5375}, {49, 21.3125}, {50, 12.1125}, {51, 25.2625}, {52, 10.75}, {53, 6.3625}, {54, 33.6}, {55, 17.2625}, {56, 25.3}, {57, 22.5125}, {58, 20.7875}, {59, 18.675}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 5.5875}, {1, 0}, {2, 28.1875}, {3, 27.075}, {4, 24.35}, {5, 20.5}, {6, 33.5875}, {7, 9.3375}, {8, 21.3375}, {9, 17.1375}, {10, 20.6875}, {11, 32.35}, {12, 6.25}, {13, 27.7125}, {14, 29.95}, {15, 16.45}, {16, 9.1}, {17, 27.1375}, {18, 18.8625}, {19, 23.65}, {20, 38.1625}, {21, 6.25}, {22, 15.5875}, {23, 25.375}, {24, 27.7375}, {25, 11.85}, {26, 29.7875}, {27, 7.35}, {28, 26.1125}, {29, 18.55}, {30, 25.8625}, {31, 29.725}, {32, 18.2125}, {33, 3.75}, {34, 28.2875}, {35, 32.0875}, {36, 13.6}, {37, 9.85}, {38, 19.1375}, {39, 31.7125}, {40, 29.35}, {41, 13.375}, {42, 14.15}, {43, 25.9875}, {44, 24.45}, {45, 21.1}, {46, 19.4625}, {47, 22.9875}, {48, 16.1}, {49, 23.675}, {50, 17.7}, {51, 21.925}, {52, 11.8875}, {53, 11.95}, {54, 28.3}, {55, 17.35}, {56, 19.7125}, {57, 16.925}, {58, 20.875}, {59, 13.0875}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 33.775}, {1, 28.1875}, {2, 0}, {3, 11.275}, {4, 35.6375}, {5, 27.325}, {6, 30.4625}, {7, 18.85}, {8, 28.725}, {9, 42.6}, {10, 7.5}, {11, 15.1875}, {12, 26.9375}, {13, 31.675}, {14, 1.7625}, {15, 27.7375}, {16, 27.5}, {17, 38.425}, {18, 27.6}, {19, 19.425}, {20, 21.975}, {21, 26.9375}, {22, 25.1}, {23, 20.3875}, {24, 33.2375}, {25, 21.45}, {26, 13.6}, {27, 32.8125}, {28, 37.4}, {29, 25.9375}, {30, 26.2}, {31, 26.6}, {32, 15.0875}, {33, 24.4375}, {34, 25.1625}, {35, 29.1}, {36, 23}, {37, 35.3125}, {38, 28.7375}, {39, 3.525}, {40, 3.95}, {41, 33.8125}, {42, 30.2375}, {43, 8.825}, {44, 35.7375}, {45, 15.5}, {46, 13.8375}, {47, 10.3125}, {48, 20.5}, {49, 33.075}, {50, 26.4875}, {51, 16.425}, {52, 30.2875}, {53, 32.2375}, {54, 22.675}, {55, 21.3375}, {56, 23.675}, {57, 26.15}, {58, 24.8625}, {59, 15.1}, 