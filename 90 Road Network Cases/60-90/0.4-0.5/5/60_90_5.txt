node_num : 60
demand_node_num : 24
edge_num : 90
damaged_edge_num : 45
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 5, 6, 7, 9, 11, 18, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 40, 41, 42, 43, 44, 45, 58,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 17), Line(0, 24), Line(0, 29), Line(0, 58), Line(1, 11), Line(1, 19), Line(1, 26), Line(2, 26), Line(2, 30), Line(3, 29), Line(3, 32), Line(3, 34), Line(3, 46), Line(4, 6), Line(4, 31), Line(4, 56), Line(5, 45), Line(5, 52), Line(6, 36), Line(6, 43), Line(7, 13), Line(7, 39), Line(8, 22), Line(8, 29), Line(8, 51), Line(9, 27), Line(9, 55), Line(10, 28), Line(10, 30), Line(10, 51), Line(11, 18), Line(11, 31), Line(11, 39), Line(11, 58), Line(12, 32), Line(12, 44), Line(12, 46), Line(12, 54), Line(13, 18), Line(14, 30), Line(14, 36), Line(14, 52), Line(15, 38), Line(15, 53), Line(16, 33), Line(16, 37), Line(17, 18), Line(17, 26), Line(17, 46), Line(17, 47), Line(18, 33), Line(18, 41), Line(18, 44), Line(19, 57), Line(20, 42), Line(20, 48), Line(21, 38), Line(21, 43), Line(22, 33), Line(22, 41), Line(22, 55), Line(23, 37), Line(23, 48), Line(23, 55), Line(24, 34), Line(24, 41), Line(25, 40), Line(25, 49), Line(27, 54), Line(28, 34), Line(28, 44), Line(28, 59), Line(29, 59), Line(31, 35), Line(31, 42), Line(32, 33), Line(32, 42), Line(34, 46), Line(35, 42), Line(35, 46), Line(39, 40), Line(39, 52), Line(40, 53), Line(41, 49), Line(44, 47), Line(45, 58), Line(46, 57), Line(47, 50), Line(48, 50), Line(51, 58),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 24), Line(0, 29), Line(1, 11), Line(1, 19), Line(1, 26), Line(2, 30), Line(3, 32), Line(3, 46), Line(4, 56), Line(5, 45), Line(6, 43), Line(7, 13), Line(8, 22), Line(8, 29), Line(8, 51), Line(9, 27), Line(10, 28), Line(10, 51), Line(11, 18), Line(11, 39), Line(12, 44), Line(12, 54), Line(14, 30), Line(14, 36), Line(15, 38), Line(15, 53), Line(17, 18), Line(17, 46), Line(17, 47), Line(18, 33), Line(19, 57), Line(20, 42), Line(21, 43), Line(22, 33), Line(22, 55), Line(23, 37), Line(23, 48), Line(24, 41), Line(25, 40), Line(28, 34), Line(28, 59), Line(31, 35), Line(46, 57), Line(48, 50), Line(51, 58),  };
const double demand_num_pro = 0.4;
const double damaged_edge_pro = 0.5;
/*********************add_edge*************************/
g.add_edge(0, 17, 1.41);
g.add_edge(0, 24, 7.07);
g.add_edge(0, 29, 4);
g.add_edge(0, 58, 6.7);
g.add_edge(1, 11, 1.41);
g.add_edge(1, 19, 6);
g.add_edge(1, 26, 5.38);
g.add_edge(2, 26, 2.82);
g.add_edge(2, 30, 4.12);
g.add_edge(3, 29, 6.08);
g.add_edge(3, 32, 1);
g.add_edge(3, 34, 5.09);
g.add_edge(3, 46, 6.4);
g.add_edge(4, 6, 4.47);
g.add_edge(4, 31, 5);
g.add_edge(4, 56, 5.83);
g.add_edge(5, 45, 7.61);
g.add_edge(5, 52, 3.16);
g.add_edge(6, 36, 1.41);
g.add_edge(6, 43, 2);
g.add_edge(7, 13, 5.83);
g.add_edge(7, 39, 4.12);
g.add_edge(8, 22, 4.24);
g.add_edge(8, 29, 7.21);
g.add_edge(8, 51, 3);
g.add_edge(9, 27, 2);
g.add_edge(9, 55, 3);
g.add_edge(10, 28, 5.09);
g.add_edge(10, 30, 6.7);
g.add_edge(10, 51, 1.41);
g.add_edge(11, 18, 3.16);
g.add_edge(11, 31, 1.41);
g.add_edge(11, 39, 5);
g.add_edge(11, 58, 5);
g.add_edge(12, 32, 9.89);
g.add_edge(12, 44, 8.24);
g.add_edge(12, 46, 3.16);
g.add_edge(12, 54, 5.83);
g.add_edge(13, 18, 9.89);
g.add_edge(14, 30, 3.16);
g.add_edge(14, 36, 8.06);
g.add_edge(14, 52, 8.54);
g.add_edge(15, 38, 3.16);
g.add_edge(15, 53, 3.16);
g.add_edge(16, 33, 5.83);
g.add_edge(16, 37, 2.82);
g.add_edge(17, 18, 6.32);
g.add_edge(17, 26, 6.7);
g.add_edge(17, 46, 4.24);
g.add_edge(17, 47, 7.28);
g.add_edge(18, 33, 3.16);
g.add_edge(18, 41, 8.24);
g.add_edge(18, 44, 8.94);
g.add_edge(19, 57, 5.38);
g.add_edge(20, 42, 5);
g.add_edge(20, 48, 8.6);
g.add_edge(21, 38, 10.63);
g.add_edge(21, 43, 5.83);
g.add_edge(22, 33, 5.09);
g.add_edge(22, 41, 4);
g.add_edge(22, 55, 4.47);
g.add_edge(23, 37, 9.84);
g.add_edge(23, 48, 8.06);
g.add_edge(23, 55, 6.08);
g.add_edge(24, 34, 7.28);
g.add_edge(24, 41, 2);
g.add_edge(25, 40, 9);
g.add_edge(25, 49, 8.06);
g.add_edge(27, 54, 6.4);
g.add_edge(28, 34, 5.83);
g.add_edge(28, 44, 9.21);
g.add_edge(28, 59, 5);
g.add_edge(29, 59, 2.82);
g.add_edge(31, 35, 2.23);
g.add_edge(31, 42, 2.23);
g.add_edge(32, 33, 4);
g.add_edge(32, 42, 6.4);
g.add_edge(34, 46, 4.12);
g.add_edge(35, 42, 1.41);
g.add_edge(35, 46, 2.23);
g.add_edge(39, 40, 5.09);
g.add_edge(39, 52, 5.09);
g.add_edge(40, 53, 2.23);
g.add_edge(41, 49, 8.06);
g.add_edge(44, 47, 9.84);
g.add_edge(45, 58, 5.83);
g.add_edge(46, 57, 3);
g.add_edge(47, 50, 5.09);
g.add_edge(48, 50, 7.28);
g.add_edge(51, 58, 6);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 2.68);
g.set_importance(6, 4.14);
g.set_importance(7, 2.57);
g.set_importance(8, 0);
g.set_importance(9, 8.68);
g.set_importance(10, 0);
g.set_importance(11, 8.69);
g.set_importance(12, 0);
g.set_importance(13, 0);
g.set_importance(14, 0);
g.set_importance(15, 0);
g.set_importance(16, 0);
g.set_importance(17, 0);
g.set_importance(18, 9.22);
g.set_importance(19, 0);
g.set_importance(20, 0);
g.set_importance(21, 0);
g.set_importance(22, 0);
g.set_importance(23, 8.82);
g.set_importance(24, 6.49);
g.set_importance(25, 2.73);
g.set_importance(26, 9.25);
g.set_importance(27, 5.18);
g.set_importance(28, 0);
g.set_importance(29, 0);
g.set_importance(30, 7.68);
g.set_importance(31, 9.85);
g.set_importance(32, 5.53);
g.set_importance(33, 0);
g.set_importance(34, 0);
g.set_importance(35, 0);
g.set_importance(36, 7.45);
g.set_importance(37, 3.12);
g.set_importance(38, 7.61);
g.set_importance(39, 0);
g.set_importance(40, 6.79);
g.set_importance(41, 4.04);
g.set_importance(42, 1.28);
g.set_importance(43, 8.52);
g.set_importance(44, 7.73);
g.set_importance(45, 4.51);
g.set_importance(46, 0);
g.set_importance(47, 0);
g.set_importance(48, 0);
g.set_importance(49, 0);
g.set_importance(50, 0);
g.set_importance(51, 0);
g.set_importance(52, 0);
g.set_importance(53, 0);
g.set_importance(54, 0);
g.set_importance(55, 0);
g.set_importance(56, 0);
g.set_importance(57, 0);
g.set_importance(58, 5.43);
g.set_importance(59, 0);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 24), 1.65);
g.set_repair_time(Line(0, 29), 1.9);
g.set_repair_time(Line(1, 11), 3.97);
g.set_repair_time(Line(1, 19), 1.47);
g.set_repair_time(Line(1, 26), 4.02);
g.set_repair_time(Line(2, 30), 3.59);
g.set_repair_time(Line(3, 32), 1.73);
g.set_repair_time(Line(3, 46), 2.56);
g.set_repair_time(Line(4, 56), 2.17);
g.set_repair_time(Line(5, 45), 4.3);
g.set_repair_time(Line(6, 43), 2.19);
g.set_repair_time(Line(7, 13), 3.82);
g.set_repair_time(Line(8, 22), 3.64);
g.set_repair_time(Line(8, 29), 2.29);
g.set_repair_time(Line(8, 51), 2.91);
g.set_repair_time(Line(9, 27), 2.13);
g.set_repair_time(Line(10, 28), 2.68);
g.set_repair_time(Line(10, 51), 4.99);
g.set_repair_time(Line(11, 18), 4.58);
g.set_repair_time(Line(11, 39), 2.63);
g.set_repair_time(Line(12, 44), 1.37);
g.set_repair_time(Line(12, 54), 4.36);
g.set_repair_time(Line(14, 30), 2.48);
g.set_repair_time(Line(14, 36), 3.87);
g.set_repair_time(Line(15, 38), 1.79);
g.set_repair_time(Line(15, 53), 5);
g.set_repair_time(Line(17, 18), 4.48);
g.set_repair_time(Line(17, 46), 3.66);
g.set_repair_time(Line(17, 47), 4.37);
g.set_repair_time(Line(18, 33), 4.75);
g.set_repair_time(Line(19, 57), 4.51);
g.set_repair_time(Line(20, 42), 4.8);
g.set_repair_time(Line(21, 43), 4.31);
g.set_repair_time(Line(22, 33), 3.19);
g.set_repair_time(Line(22, 55), 2.6);
g.set_repair_time(Line(23, 37), 1.91);
g.set_repair_time(Line(23, 48), 2.2);
g.set_repair_time(Line(24, 41), 4.9);
g.set_repair_time(Line(25, 40), 4.2);
g.set_repair_time(Line(28, 34), 3.52);
g.set_repair_time(Line(28, 59), 1.68);
g.set_repair_time(Line(31, 35), 4.82);
g.set_repair_time(Line(46, 57), 1);
g.set_repair_time(Line(48, 50), 4.37);
g.set_repair_time(Line(51, 58), 3.1);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 15.375}, {2, 13.6625}, {3, 12.6}, {4, 18.8875}, {5, 25.175}, {6, 24.475}, {7, 25.0125}, {8, 14.0125}, {9, 25.675}, {10, 17.6375}, {11, 13.6125}, {12, 11.0125}, {13, 22.025}, {14, 22.7625}, {15, 32.9625}, {16, 20.9}, {17, 1.7625}, {18, 9.6625}, {19, 17.5375}, {20, 17.8625}, {21, 34.2625}, {22, 16.3375}, {23, 29.525}, {24, 8.8375}, {25, 31.4875}, {26, 10.1375}, {27, 26.3}, {28, 14.775}, {29, 5}, {30, 18.8125}, {31, 12.6375}, {32, 13.85}, {33, 13.6125}, {34, 12.2125}, {35, 9.85}, {36, 26.2375}, {37, 24.425}, {38, 36.9125}, {39, 19.8625}, {40, 26.225}, {41, 11.3375}, {42, 11.6125}, {43, 26.975}, {44, 20.8375}, {45, 15.6625}, {46, 7.0625}, {47, 10.8625}, {48, 26.325}, {49, 21.4125}, {50, 17.225}, {51, 15.875}, {52, 26.225}, {53, 29.0125}, {54, 18.3}, {55, 21.925}, {56, 26.175}, {57, 10.8125}, {58, 8.375}, {59, 8.525}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 15.375}, {1, 0}, {2, 10.25}, {3, 15.5625}, {4, 9.775}, {5, 18.325}, {6, 15.3625}, {7, 13.1625}, {8, 19.2625}, {9, 25.3625}, {10, 17.275}, {11, 1.7625}, {12, 13.05}, {13, 18.075}, {14, 19.35}, {15, 21.1125}, {16, 16.95}, {17, 13.6125}, {18, 5.7125}, {19, 7.5}, {20, 12.5625}, {21, 25.15}, {22, 16.025}, {23, 29.2125}, {24, 18.5125}, {25, 25.625}, {26, 6.725}, {27, 27.8625}, {28, 21.5375}, {29, 20.375}, {30, 15.4}, {31, 3.525}, {32, 14.3125}, {33, 9.6625}, {34, 14.25}, {35, 6.3125}, {36, 17.125}, {37, 20.475}, {38, 25.0625}, {39, 8.0125}, {40, 14.375}, {41, 16.0125}, {42, 6.3125}, {43, 17.8625}, {44, 16.8875}, {45, 15.3}, {46, 9.1}, {47, 22.7125}, {48, 23.3125}, {49, 26.0875}, {50, 29.075}, {51, 15.5125}, {52, 14.375}, {53, 17.1625}, {54, 20.3375}, {55, 21.6125}, {56, 17.0625}, {57, 12.85}, {58, 8.0125}, {59, 23.9}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 13.6625}, {1, 10.25}, {2, 0}, {3, 25.2}, {4, 20.025}, {5, 23.725}, {6, 20.9375}, {7, 23.4125}, {8, 19.0375}, {9, 33.675}, {10, 13.525}, {11, 12.0125}, {12, 21.15}, {13, 28.325}, {14, 9.1}, {15, 31.3625}, {16, 27.2}, {17, 11.9}, {18, 15.9625}, {19, 17.75}, {20, 22.8125}, {21, 30.725}, {22, 24.3375}, {23, 37.525}, {24, 22.5}, {25, 35.875}, {26, 3.525}, {27, 36.175}, {28, 19.8875}, {29, 18.6625}, {30, 5.15}, {31, 13.775}, {32, 24.5625}, {33, 19.9125}, {34, 22.35}, {35, 16.5625}, {36, 19.175}, {37, 30.725}, {38, 35.3125}, {39, 18.2625}, {40, 24.625}, {41, 25}, {42, 16.5625}, {43, 23.4375}, {44, 27.1375}, {45, 25.55}, {46, 17.2}, {47, 21}, {48, 33.5625}, {49, 35.075}, {50, 27.3625}, {51, 15.2875}, {52, 19.775}, {53, 27.4125}, {54, 28.4375}, {55, 29.925}, {56, 27.3125}, {57, 20.95}, {58, 18.2625}, {59, 22.1875}, 