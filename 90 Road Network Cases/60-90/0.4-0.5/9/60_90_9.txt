node_num : 60
demand_node_num : 24
edge_num : 90
damaged_edge_num : 45
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 5, 9, 11, 12, 13, 17, 20, 24, 27, 30, 31, 32, 34, 35, 37, 39, 44, 49, 52, 53, 55, 56, 58, 59,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 4), Line(0, 10), Line(0, 31), Line(0, 39), Line(1, 21), Line(1, 46), Line(2, 11), Line(2, 21), Line(2, 56), Line(2, 59), Line(3, 34), Line(3, 45), Line(4, 29), Line(4, 48), Line(5, 18), Line(5, 34), Line(5, 48), Line(5, 49), Line(6, 22), Line(6, 34), Line(6, 53), Line(7, 22), Line(7, 33), Line(8, 17), Line(8, 46), Line(9, 11), Line(9, 26), Line(10, 15), Line(10, 22), Line(11, 32), Line(11, 45), Line(11, 48), Line(12, 30), Line(12, 33), Line(13, 39), Line(13, 41), Line(14, 19), Line(14, 37), Line(14, 52), Line(15, 21), Line(15, 43), Line(16, 26), Line(16, 37), Line(16, 40), Line(17, 28), Line(18, 27), Line(18, 42), Line(18, 47), Line(19, 31), Line(19, 32), Line(19, 37), Line(20, 35), Line(20, 38), Line(20, 44), Line(20, 45), Line(21, 37), Line(21, 42), Line(22, 59), Line(23, 29), Line(23, 59), Line(24, 55), Line(24, 56), Line(24, 58), Line(25, 41), Line(25, 44), Line(26, 53), Line(26, 54), Line(27, 28), Line(27, 40), Line(29, 43), Line(30, 45), Line(31, 47), Line(32, 39), Line(33, 50), Line(33, 51), Line(35, 36), Line(35, 37), Line(36, 50), Line(36, 52), Line(37, 57), Line(38, 54), Line(39, 45), Line(40, 45), Line(43, 57), Line(49, 54), Line(50, 58), Line(51, 53), Line(52, 57), Line(53, 55), Line(55, 56),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 10), Line(0, 31), Line(0, 39), Line(2, 11), Line(2, 21), Line(2, 56), Line(2, 59), Line(3, 34), Line(4, 29), Line(5, 18), Line(5, 34), Line(5, 48), Line(6, 34), Line(7, 22), Line(7, 33), Line(8, 17), Line(8, 46), Line(9, 11), Line(10, 22), Line(11, 32), Line(13, 41), Line(14, 37), Line(15, 21), Line(16, 40), Line(17, 28), Line(18, 27), Line(18, 42), Line(18, 47), Line(19, 32), Line(19, 37), Line(20, 35), Line(20, 38), Line(21, 37), Line(22, 59), Line(24, 55), Line(24, 58), Line(26, 53), Line(26, 54), Line(30, 45), Line(35, 36), Line(43, 57), Line(49, 54), Line(51, 53), Line(52, 57), Line(53, 55),  };
const double demand_num_pro = 0.4;
const double damaged_edge_pro = 0.5;
/*********************add_edge*************************/
g.add_edge(0, 4, 1.41);
g.add_edge(0, 10, 1);
g.add_edge(0, 31, 3.6);
g.add_edge(0, 39, 2.23);
g.add_edge(1, 21, 2.82);
g.add_edge(1, 46, 5.83);
g.add_edge(2, 11, 2.82);
g.add_edge(2, 21, 5.09);
g.add_edge(2, 56, 8.06);
g.add_edge(2, 59, 7.07);
g.add_edge(3, 34, 2.23);
g.add_edge(3, 45, 1.41);
g.add_edge(4, 29, 9.21);
g.add_edge(4, 48, 3.16);
g.add_edge(5, 18, 5);
g.add_edge(5, 34, 6.7);
g.add_edge(5, 48, 4.12);
g.add_edge(5, 49, 2.23);
g.add_edge(6, 22, 5.65);
g.add_edge(6, 34, 5);
g.add_edge(6, 53, 3.6);
g.add_edge(7, 22, 7);
g.add_edge(7, 33, 6.7);
g.add_edge(8, 17, 5.83);
g.add_edge(8, 46, 3);
g.add_edge(9, 11, 4.47);
g.add_edge(9, 26, 1);
g.add_edge(10, 15, 3.16);
g.add_edge(10, 22, 4.47);
g.add_edge(11, 32, 2);
g.add_edge(11, 45, 1);
g.add_edge(11, 48, 5.09);
g.add_edge(12, 30, 8.6);
g.add_edge(12, 33, 4.24);
g.add_edge(13, 39, 4.12);
g.add_edge(13, 41, 7.28);
g.add_edge(14, 19, 5.83);
g.add_edge(14, 37, 6.4);
g.add_edge(14, 52, 5.09);
g.add_edge(15, 21, 6.08);
g.add_edge(15, 43, 6.08);
g.add_edge(16, 26, 8.24);
g.add_edge(16, 37, 9.05);
g.add_edge(16, 40, 1);
g.add_edge(17, 28, 2.82);
g.add_edge(18, 27, 6.4);
g.add_edge(18, 42, 5);
g.add_edge(18, 47, 5.38);
g.add_edge(19, 31, 4.12);
g.add_edge(19, 32, 4.47);
g.add_edge(19, 37, 9.21);
g.add_edge(20, 35, 3.6);
g.add_edge(20, 38, 5);
g.add_edge(20, 44, 6.32);
g.add_edge(20, 45, 1.41);
g.add_edge(21, 37, 2.23);
g.add_edge(21, 42, 6.08);
g.add_edge(22, 59, 9.21);
g.add_edge(23, 29, 3.16);
g.add_edge(23, 59, 4.12);
g.add_edge(24, 55, 2.23);
g.add_edge(24, 56, 4.47);
g.add_edge(24, 58, 2.82);
g.add_edge(25, 41, 8.48);
g.add_edge(25, 44, 7.07);
g.add_edge(26, 53, 6.4);
g.add_edge(26, 54, 5.65);
g.add_edge(27, 28, 5.65);
g.add_edge(27, 40, 9.84);
g.add_edge(29, 43, 7.28);
g.add_edge(30, 45, 8.94);
g.add_edge(31, 47, 1.41);
g.add_edge(32, 39, 2.23);
g.add_edge(33, 50, 3.16);
g.add_edge(33, 51, 2.23);
g.add_edge(35, 36, 1.41);
g.add_edge(35, 37, 3.6);
g.add_edge(36, 50, 5);
g.add_edge(36, 52, 7.21);
g.add_edge(37, 57, 4.47);
g.add_edge(38, 54, 2.23);
g.add_edge(39, 45, 3.16);
g.add_edge(40, 45, 7.81);
g.add_edge(43, 57, 5);
g.add_edge(49, 54, 3.6);
g.add_edge(50, 58, 5.83);
g.add_edge(51, 53, 7.21);
g.add_edge(52, 57, 7.28);
g.add_edge(53, 55, 5.09);
g.add_edge(55, 56, 5);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 1.37);
g.set_importance(6, 0);
g.set_importance(7, 0);
g.set_importance(8, 0);
g.set_importance(9, 4.06);
g.set_importance(10, 0);
g.set_importance(11, 9.91);
g.set_importance(12, 9.18);
g.set_importance(13, 3.62);
g.set_importance(14, 0);
g.set_importance(15, 0);
g.set_importance(16, 0);
g.set_importance(17, 2.44);
g.set_importance(18, 0);
g.set_importance(19, 0);
g.set_importance(20, 1.35);
g.set_importance(21, 0);
g.set_importance(22, 0);
g.set_importance(23, 0);
g.set_importance(24, 9.89);
g.set_importance(25, 0);
g.set_importance(26, 0);
g.set_importance(27, 8.41);
g.set_importance(28, 0);
g.set_importance(29, 0);
g.set_importance(30, 5.64);
g.set_importance(31, 1.69);
g.set_importance(32, 3.26);
g.set_importance(33, 0);
g.set_importance(34, 9.81);
g.set_importance(35, 3.14);
g.set_importance(36, 0);
g.set_importance(37, 6.52);
g.set_importance(38, 0);
g.set_importance(39, 2.95);
g.set_importance(40, 0);
g.set_importance(41, 0);
g.set_importance(42, 0);
g.set_importance(43, 0);
g.set_importance(44, 5.57);
g.set_importance(45, 0);
g.set_importance(46, 0);
g.set_importance(47, 0);
g.set_importance(48, 0);
g.set_importance(49, 7.36);
g.set_importance(50, 0);
g.set_importance(51, 0);
g.set_importance(52, 8.97);
g.set_importance(53, 3.55);
g.set_importance(54, 0);
g.set_importance(55, 6.81);
g.set_importance(56, 7.5);
g.set_importance(57, 0);
g.set_importance(58, 5.53);
g.set_importance(59, 9.9);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 10), 1.6);
g.set_repair_time(Line(0, 31), 3.37);
g.set_repair_time(Line(0, 39), 4.19);
g.set_repair_time(Line(2, 11), 1.58);
g.set_repair_time(Line(2, 21), 4.57);
g.set_repair_time(Line(2, 56), 3.97);
g.set_repair_time(Line(2, 59), 1.4);
g.set_repair_time(Line(3, 34), 1.86);
g.set_repair_time(Line(4, 29), 3.92);
g.set_repair_time(Line(5, 18), 3.1);
g.set_repair_time(Line(5, 34), 4.14);
g.set_repair_time(Line(5, 48), 4.66);
g.set_repair_time(Line(6, 34), 2.81);
g.set_repair_time(Line(7, 22), 1.3);
g.set_repair_time(Line(7, 33), 1.21);
g.set_repair_time(Line(8, 17), 1.02);
g.set_repair_time(Line(8, 46), 4.48);
g.set_repair_time(Line(9, 11), 2.26);
g.set_repair_time(Line(10, 22), 2.25);
g.set_repair_time(Line(11, 32), 4.81);
g.set_repair_time(Line(13, 41), 4.15);
g.set_repair_time(Line(14, 37), 2.22);
g.set_repair_time(Line(15, 21), 4.73);
g.set_repair_time(Line(16, 40), 2.31);
g.set_repair_time(Line(17, 28), 1.41);
g.set_repair_time(Line(18, 27), 3.55);
g.set_repair_time(Line(18, 42), 3.52);
g.set_repair_time(Line(18, 47), 3.38);
g.set_repair_time(Line(19, 32), 2.79);
g.set_repair_time(Line(19, 37), 4.94);
g.set_repair_time(Line(20, 35), 2.41);
g.set_repair_time(Line(20, 38), 2.9);
g.set_repair_time(Line(21, 37), 4.22);
g.set_repair_time(Line(22, 59), 1.7);
g.set_repair_time(Line(24, 55), 2.57);
g.set_repair_time(Line(24, 58), 3.03);
g.set_repair_time(Line(26, 53), 3.14);
g.set_repair_time(Line(26, 54), 3.98);
g.set_repair_time(Line(30, 45), 4.55);
g.set_repair_time(Line(35, 36), 2.73);
g.set_repair_time(Line(43, 57), 4.72);
g.set_repair_time(Line(49, 54), 3.74);
g.set_repair_time(Line(51, 53), 3.69);
g.set_repair_time(Line(52, 57), 4.55);
g.set_repair_time(Line(53, 55), 3.37);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 16.325}, {2, 11.5125}, {3, 8.5}, {4, 1.7625}, {5, 10.8625}, {6, 13.9}, {7, 15.5875}, {8, 27.3625}, {9, 13.575}, {10, 1.25}, {11, 7.9875}, {12, 28.6625}, {13, 7.9375}, {14, 16.9375}, {15, 5.2}, {16, 17.75}, {17, 31.575}, {18, 12.9875}, {19, 9.65}, {20, 8.5}, {21, 12.8}, {22, 6.8375}, {23, 17.225}, {24, 27.175}, {25, 25.2375}, {26, 14.825}, {27, 20.9875}, {28, 28.05}, {29, 13.275}, {30, 17.9125}, {31, 4.5}, {32, 5.575}, {33, 23.9625}, {34, 11.2875}, {35, 13}, {36, 14.7625}, {37, 15.5875}, {38, 14.75}, {39, 2.7875}, {40, 16.5}, {41, 17.0375}, {42, 19.2375}, {43, 12.8}, {44, 16.4}, {45, 6.7375}, {46, 23.6125}, {47, 6.2625}, {48, 5.7125}, {49, 13.65}, {50, 21.0125}, {51, 26.75}, {52, 23.3}, {53, 18.4}, {54, 17.5375}, {55, 24.7625}, {56, 21.5875}, {57, 19.05}, {58, 28.3}, {59, 18.35}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 16.325}, {1, 0}, {2, 9.8875}, {3, 16.425}, {4, 18.0875}, {5, 23.625}, {6, 25.4625}, {7, 29.4125}, {8, 11.0375}, {9, 19}, {10, 15.075}, {11, 13.4125}, {12, 28.075}, {13, 23.7625}, {14, 14.3125}, {15, 11.125}, {16, 17.625}, {17, 18.325}, {18, 17.375}, {19, 17.825}, {20, 15.3125}, {21, 3.525}, {22, 20.6625}, {23, 23.875}, {24, 25.55}, {25, 32.05}, {26, 20.25}, {27, 25.375}, {28, 21.85}, {29, 27.25}, {30, 25.8375}, {31, 20.825}, {32, 15.9125}, {33, 22.775}, {34, 19.2125}, {35, 10.8125}, {36, 12.575}, {37, 6.3125}, {38, 21.5625}, {39, 18.6125}, {40, 18.875}, {41, 32.8625}, {42, 11.125}, {43, 18.15}, {44, 23.2125}, {45, 14.6625}, {46, 7.2875}, {47, 22.5875}, {48, 19.775}, {49, 26.4125}, {50, 18.825}, {51, 25.5625}, {52, 20.675}, {53, 28.25}, {54, 24.35}, {55, 26.2125}, {56, 19.9625}, {57, 11.9}, {58, 26.1125}, {59, 18.725}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 11.5125}, {1, 9.8875}, {2, 0}, {3, 6.5375}, {4, 13.275}, {5, 15.0375}, {6, 15.575}, {7, 27.1}, {8, 20.925}, {9, 9.1125}, {10, 12.7625}, {11, 3.525}, {12, 26.7}, {13, 13.875}, {14, 17.15}, {15, 13.9625}, {16, 15.7875}, {17, 28.2125}, {18, 20.2125}, {19, 11.6125}, {20, 6.5375}, {21, 6.3625}, {22, 18.35}, {23, 13.9875}, {24, 15.6625}, {25, 23.275}, {26, 10.3625}, {27, 26.8375}, {28, 31.7375}, {29, 17.9375}, {30, 15.95}, {31, 16.0125}, {32, 6.025}, {33, 23}, {34, 9.325}, {35, 11.0375}, {36, 12.8}, {37, 9.15}, {38, 12.7875}, {39, 8.725}, {40, 14.5375}, {41, 22.975}, {42, 13.9625}, {43, 20.9875}, {44, 14.4375}, {45, 4.775}, {46, 17.175}, {47, 17.775}, {48, 9.8875}, {49, 17.825}, {50, 19.05}, {51, 25.7875}, {52, 21.8125}, {53, 18.3625}, {54, 15.575}, {55, 16.325}, {56, 10.075}, {57, 14.7375}, {58, 19.1875}, {59, 8.8375}, 