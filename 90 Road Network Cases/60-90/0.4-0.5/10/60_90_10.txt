node_num : 60
demand_node_num : 24
edge_num : 90
damaged_edge_num : 45
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 5, 7, 9, 19, 21, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 44, 49, 51, 54, 56, 57, 59,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 15), Line(0, 18), Line(0, 44), Line(1, 31), Line(1, 51), Line(2, 3), Line(2, 10), Line(2, 22), Line(3, 43), Line(3, 46), Line(3, 47), Line(4, 7), Line(4, 32), Line(5, 45), Line(5, 56), Line(6, 28), Line(6, 30), Line(6, 32), Line(7, 50), Line(8, 11), Line(8, 12), Line(8, 14), Line(8, 31), Line(9, 27), Line(9, 29), Line(9, 42), Line(9, 55), Line(10, 25), Line(10, 34), Line(11, 54), Line(11, 55), Line(12, 27), Line(12, 43), Line(13, 21), Line(13, 33), Line(13, 38), Line(14, 24), Line(14, 28), Line(15, 43), Line(15, 58), Line(16, 30), Line(16, 45), Line(17, 49), Line(17, 55), Line(18, 50), Line(18, 53), Line(19, 24), Line(19, 49), Line(19, 56), Line(20, 22), Line(20, 38), Line(20, 57), Line(21, 41), Line(22, 41), Line(22, 57), Line(23, 28), Line(23, 46), Line(23, 52), Line(24, 40), Line(24, 53), Line(25, 37), Line(25, 46), Line(25, 50), Line(26, 44), Line(26, 57), Line(27, 28), Line(27, 51), Line(28, 53), Line(29, 34), Line(31, 46), Line(31, 54), Line(33, 35), Line(33, 36), Line(33, 49), Line(35, 51), Line(35, 52), Line(36, 47), Line(36, 50), Line(37, 53), Line(37, 58), Line(39, 58), Line(39, 59), Line(40, 43), Line(40, 48), Line(41, 59), Line(42, 51), Line(42, 52), Line(45, 46), Line(48, 49), Line(55, 58),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(4, 7), Line(5, 45), Line(6, 30), Line(6, 32), Line(7, 50), Line(8, 11), Line(8, 14), Line(9, 27), Line(9, 55), Line(10, 25), Line(11, 55), Line(12, 27), Line(12, 43), Line(13, 33), Line(14, 24), Line(15, 43), Line(16, 30), Line(17, 55), Line(18, 50), Line(18, 53), Line(19, 24), Line(19, 49), Line(19, 56), Line(20, 22), Line(20, 38), Line(20, 57), Line(21, 41), Line(22, 41), Line(22, 57), Line(23, 28), Line(23, 46), Line(23, 52), Line(24, 53), Line(25, 37), Line(25, 46), Line(25, 50), Line(33, 36), Line(35, 51), Line(36, 50), Line(37, 53), Line(39, 58), Line(39, 59), Line(40, 48), Line(42, 51), Line(45, 46),  };
const double demand_num_pro = 0.4;
const double damaged_edge_pro = 0.5;
/*********************add_edge*************************/
g.add_edge(0, 15, 4.12);
g.add_edge(0, 18, 2.23);
g.add_edge(0, 44, 3.6);
g.add_edge(1, 31, 3.6);
g.add_edge(1, 51, 5.83);
g.add_edge(2, 3, 7.07);
g.add_edge(2, 10, 7.07);
g.add_edge(2, 22, 4);
g.add_edge(3, 43, 9.89);
g.add_edge(3, 46, 2);
g.add_edge(3, 47, 6.08);
g.add_edge(4, 7, 2.23);
g.add_edge(4, 32, 5.38);
g.add_edge(5, 45, 4.12);
g.add_edge(5, 56, 4.12);
g.add_edge(6, 28, 3.16);
g.add_edge(6, 30, 2.23);
g.add_edge(6, 32, 4.24);
g.add_edge(7, 50, 2.82);
g.add_edge(8, 11, 5.09);
g.add_edge(8, 12, 5);
g.add_edge(8, 14, 4.47);
g.add_edge(8, 31, 4.12);
g.add_edge(9, 27, 8.6);
g.add_edge(9, 29, 5.09);
g.add_edge(9, 42, 7.07);
g.add_edge(9, 55, 6.08);
g.add_edge(10, 25, 9.05);
g.add_edge(10, 34, 1);
g.add_edge(11, 54, 4.12);
g.add_edge(11, 55, 7.07);
g.add_edge(12, 27, 4.47);
g.add_edge(12, 43, 5.09);
g.add_edge(13, 21, 4.12);
g.add_edge(13, 33, 5);
g.add_edge(13, 38, 1.41);
g.add_edge(14, 24, 4);
g.add_edge(14, 28, 3.16);
g.add_edge(15, 43, 5);
g.add_edge(15, 58, 7.28);
g.add_edge(16, 30, 3.16);
g.add_edge(16, 45, 7.21);
g.add_edge(17, 49, 2.23);
g.add_edge(17, 55, 4.47);
g.add_edge(18, 50, 1.41);
g.add_edge(18, 53, 2.23);
g.add_edge(19, 24, 3.6);
g.add_edge(19, 49, 2.82);
g.add_edge(19, 56, 1.41);
g.add_edge(20, 22, 5);
g.add_edge(20, 38, 4.47);
g.add_edge(20, 57, 7);
g.add_edge(21, 41, 7);
g.add_edge(22, 41, 5);
g.add_edge(22, 57, 4.24);
g.add_edge(23, 28, 7.07);
g.add_edge(23, 46, 6.7);
g.add_edge(23, 52, 7.81);
g.add_edge(24, 40, 2);
g.add_edge(24, 53, 6.08);
g.add_edge(25, 37, 2.23);
g.add_edge(25, 46, 7.07);
g.add_edge(25, 50, 3.6);
g.add_edge(26, 44, 4.47);
g.add_edge(26, 57, 7.81);
g.add_edge(27, 28, 5.38);
g.add_edge(27, 51, 1);
g.add_edge(28, 53, 5);
g.add_edge(29, 34, 6.08);
g.add_edge(31, 46, 4.47);
g.add_edge(31, 54, 5.83);
g.add_edge(33, 35, 4.12);
g.add_edge(33, 36, 3.16);
g.add_edge(33, 49, 7.07);
g.add_edge(35, 51, 7.07);
g.add_edge(35, 52, 5);
g.add_edge(36, 47, 9.21);
g.add_edge(36, 50, 5);
g.add_edge(37, 53, 7.28);
g.add_edge(37, 58, 6.4);
g.add_edge(39, 58, 2);
g.add_edge(39, 59, 9.89);
g.add_edge(40, 43, 7.81);
g.add_edge(40, 48, 5.09);
g.add_edge(41, 59, 8.06);
g.add_edge(42, 51, 6.08);
g.add_edge(42, 52, 5.09);
g.add_edge(45, 46, 1.41);
g.add_edge(48, 49, 6.4);
g.add_edge(55, 58, 1);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 5.91);
g.set_importance(6, 0);
g.set_importance(7, 1.15);
g.set_importance(8, 0);
g.set_importance(9, 3.5);
g.set_importance(10, 0);
g.set_importance(11, 0);
g.set_importance(12, 0);
g.set_importance(13, 0);
g.set_importance(14, 0);
g.set_importance(15, 0);
g.set_importance(16, 0);
g.set_importance(17, 0);
g.set_importance(18, 0);
g.set_importance(19, 1.77);
g.set_importance(20, 0);
g.set_importance(21, 8.82);
g.set_importance(22, 0);
g.set_importance(23, 0);
g.set_importance(24, 0);
g.set_importance(25, 0);
g.set_importance(26, 0);
g.set_importance(27, 9);
g.set_importance(28, 1.89);
g.set_importance(29, 8.9);
g.set_importance(30, 0);
g.set_importance(31, 8.88);
g.set_importance(32, 1.06);
g.set_importance(33, 3.73);
g.set_importance(34, 5.23);
g.set_importance(35, 0);
g.set_importance(36, 3.5);
g.set_importance(37, 7.25);
g.set_importance(38, 8.21);
g.set_importance(39, 3.54);
g.set_importance(40, 7.79);
g.set_importance(41, 0);
g.set_importance(42, 0);
g.set_importance(43, 0);
g.set_importance(44, 2.52);
g.set_importance(45, 0);
g.set_importance(46, 0);
g.set_importance(47, 0);
g.set_importance(48, 0);
g.set_importance(49, 9.92);
g.set_importance(50, 0);
g.set_importance(51, 5.84);
g.set_importance(52, 0);
g.set_importance(53, 0);
g.set_importance(54, 1.06);
g.set_importance(55, 0);
g.set_importance(56, 4);
g.set_importance(57, 1.79);
g.set_importance(58, 0);
g.set_importance(59, 4.19);
/*********************set_repair*************************/
g.set_repair_time(Line(4, 7), 2.91);
g.set_repair_time(Line(5, 45), 4.47);
g.set_repair_time(Line(6, 30), 3.94);
g.set_repair_time(Line(6, 32), 3.79);
g.set_repair_time(Line(7, 50), 3.72);
g.set_repair_time(Line(8, 11), 2.31);
g.set_repair_time(Line(8, 14), 1.54);
g.set_repair_time(Line(9, 27), 1.77);
g.set_repair_time(Line(9, 55), 2.13);
g.set_repair_time(Line(10, 25), 4.96);
g.set_repair_time(Line(11, 55), 4.5);
g.set_repair_time(Line(12, 27), 2.07);
g.set_repair_time(Line(12, 43), 2.82);
g.set_repair_time(Line(13, 33), 2.4);
g.set_repair_time(Line(14, 24), 4.5);
g.set_repair_time(Line(15, 43), 4.21);
g.set_repair_time(Line(16, 30), 1.3);
g.set_repair_time(Line(17, 55), 4.01);
g.set_repair_time(Line(18, 50), 3.6);
g.set_repair_time(Line(18, 53), 4.6);
g.set_repair_time(Line(19, 24), 1.8);
g.set_repair_time(Line(19, 49), 2.47);
g.set_repair_time(Line(19, 56), 3.67);
g.set_repair_time(Line(20, 22), 1.92);
g.set_repair_time(Line(20, 38), 1.45);
g.set_repair_time(Line(20, 57), 4.21);
g.set_repair_time(Line(21, 41), 2.27);
g.set_repair_time(Line(22, 41), 4.47);
g.set_repair_time(Line(22, 57), 3);
g.set_repair_time(Line(23, 28), 4.71);
g.set_repair_time(Line(23, 46), 4.66);
g.set_repair_time(Line(23, 52), 4.99);
g.set_repair_time(Line(24, 53), 2.69);
g.set_repair_time(Line(25, 37), 2.38);
g.set_repair_time(Line(25, 46), 3.26);
g.set_repair_time(Line(25, 50), 1.81);
g.set_repair_time(Line(33, 36), 3.59);
g.set_repair_time(Line(35, 51), 2.86);
g.set_repair_time(Line(36, 50), 1.92);
g.set_repair_time(Line(37, 53), 1.49);
g.set_repair_time(Line(39, 58), 2.49);
g.set_repair_time(Line(39, 59), 2.61);
g.set_repair_time(Line(40, 48), 2.21);
g.set_repair_time(Line(42, 51), 2.3);
g.set_repair_time(Line(45, 46), 4.01);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 27.0875}, {2, 29.2}, {3, 20.3875}, {4, 10.8625}, {5, 24.5875}, {6, 15.775}, {7, 8.075}, {8, 21.3625}, {9, 23.1}, {10, 20.3625}, {11, 24.3375}, {12, 17.7625}, {13, 21}, {14, 15.775}, {15, 5.15}, {16, 22.5125}, {17, 21.0875}, {18, 2.7875}, {19, 17.675}, {20, 28.35}, {21, 26.15}, {22, 25.15}, {23, 20.6625}, {24, 13.175}, {25, 9.05}, {26, 10.0875}, {27, 18.55}, {28, 11.825}, {29, 29.2125}, {30, 18.5625}, {31, 23.475}, {32, 17.5875}, {33, 14.75}, {34, 21.6125}, {35, 19.9}, {36, 10.8}, {37, 11.8375}, {38, 22.7625}, {39, 16.75}, {40, 15.675}, {41, 31.4}, {42, 27.4}, {43, 11.4}, {44, 4.5}, {45, 19.65}, {46, 17.8875}, {47, 22.3125}, {48, 22.0375}, {49, 21.2}, {50, 4.55}, {51, 19.8}, {52, 26.15}, {53, 5.575}, {54, 29.4875}, {55, 15.5}, {56, 19.4375}, {57, 19.85}, {58, 14.25}, {59, 29.1125}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 27.0875}, {1, 0}, {2, 21.425}, {3, 12.5875}, {4, 29.7375}, {5, 17}, {6, 19.2125}, {7, 26.95}, {8, 9.65}, {9, 19.2875}, {10, 30.2375}, {11, 16.0125}, {12, 14.125}, {13, 27.525}, {14, 15.2375}, {15, 26.7375}, {16, 20.8625}, {17, 30.225}, {18, 24.3}, {19, 23.9125}, {20, 32.675}, {21, 32.675}, {22, 26.425}, {23, 18.4625}, {24, 20.2375}, {25, 18.925}, {26, 37.175}, {27, 8.5375}, {28, 15.2625}, {29, 25.65}, {30, 22}, {31, 4.5}, {32, 24.5125}, {33, 21.275}, {34, 31.4875}, {35, 16.125}, {36, 25.225}, {37, 21.7125}, {38, 29.2875}, {39, 28.6}, {40, 22.7375}, {41, 32.675}, {42, 14.8875}, {43, 20.4875}, {44, 31.5875}, {45, 11.85}, {46, 10.0875}, {47, 20.1875}, {48, 29.1}, {49, 27.4375}, {50, 23.425}, {51, 7.2875}, {52, 21.25}, {53, 21.5125}, {54, 11.7875}, {55, 24.85}, {56, 22.15}, {57, 31.725}, {58, 26.1}, {59, 40.9625}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 29.2}, {1, 21.425}, {2, 0}, {3, 8.8375}, {4, 30.9625}, {5, 18.25}, {6, 28.85}, {7, 28.175}, {8, 22.075}, {9, 24.05}, {10, 8.8375}, {11, 28.4375}, {12, 27.5625}, {13, 18.6}, {14, 27.6625}, {15, 27.45}, {16, 22.1125}, {17, 31.475}, {18, 26.4125}, {19, 25.1625}, {20, 11.25}, {21, 20}, {22, 5}, {23, 19.7125}, {24, 29.6625}, {25, 20.15}, {26, 20.0625}, {27, 29.9625}, {28, 28.55}, {29, 17.6875}, {30, 26.0625}, {31, 16.925}, {32, 34.15}, {33, 24.85}, {34, 10.0875}, {35, 30}, {36, 27.95}, {37, 22.9375}, {38, 16.8375}, {39, 33.4375}, {40, 30.9625}, {41, 11.25}, {42, 32.8875}, {43, 21.2}, {44, 25.65}, {45, 13.1}, {46, 11.3375}, {47, 16.4375}, {48, 36.6875}, {49, 28.6875}, {50, 24.65}, {51, 28.7125}, {52, 29.475}, {53, 29.2}, {54, 24.2125}, {55, 31.65}, {56, 23.4}, {57, 10.3}, {58, 30.9375}, {59, 21.325}, 