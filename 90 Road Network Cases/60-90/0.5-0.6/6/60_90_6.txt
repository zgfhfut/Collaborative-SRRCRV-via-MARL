node_num : 60
demand_node_num : 30
edge_num : 90
damaged_edge_num : 54
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 6, 11, 15, 16, 17, 21, 23, 26, 28, 31, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 9), Line(0, 17), Line(0, 42), Line(1, 2), Line(1, 17), Line(1, 31), Line(1, 52), Line(1, 57), Line(2, 52), Line(2, 55), Line(3, 26), Line(3, 49), Line(4, 9), Line(4, 12), Line(4, 23), Line(4, 26), Line(4, 34), Line(4, 50), Line(5, 15), Line(5, 32), Line(6, 10), Line(6, 59), Line(7, 24), Line(7, 39), Line(7, 49), Line(8, 19), Line(8, 47), Line(9, 29), Line(9, 36), Line(9, 52), Line(9, 59), Line(10, 37), Line(11, 38), Line(11, 40), Line(11, 43), Line(12, 57), Line(13, 48), Line(13, 51), Line(14, 25), Line(14, 34), Line(14, 38), Line(14, 45), Line(15, 45), Line(16, 47), Line(16, 51), Line(16, 57), Line(16, 58), Line(17, 32), Line(17, 34), Line(17, 41), Line(18, 27), Line(18, 39), Line(18, 59), Line(19, 32), Line(20, 23), Line(20, 28), Line(20, 38), Line(20, 54), Line(21, 22), Line(21, 43), Line(21, 55), Line(22, 24), Line(22, 37), Line(22, 48), Line(23, 25), Line(24, 29), Line(24, 43), Line(25, 40), Line(26, 41), Line(27, 31), Line(28, 50), Line(28, 53), Line(28, 57), Line(29, 30), Line(30, 59), Line(33, 36), Line(33, 58), Line(34, 56), Line(35, 47), Line(35, 54), Line(36, 46), Line(39, 56), Line(41, 58), Line(42, 44), Line(43, 47), Line(44, 45), Line(46, 50), Line(46, 54), Line(50, 51), Line(50, 53),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 42), Line(1, 2), Line(1, 17), Line(1, 31), Line(1, 52), Line(1, 57), Line(2, 52), Line(2, 55), Line(3, 49), Line(4, 9), Line(4, 12), Line(4, 23), Line(4, 34), Line(4, 50), Line(5, 15), Line(5, 32), Line(6, 10), Line(6, 59), Line(7, 39), Line(8, 19), Line(9, 29), Line(9, 36), Line(11, 38), Line(12, 57), Line(13, 48), Line(14, 25), Line(14, 34), Line(14, 38), Line(15, 45), Line(16, 47), Line(16, 51), Line(16, 57), Line(18, 39), Line(18, 59), Line(19, 32), Line(20, 23), Line(22, 24), Line(22, 37), Line(22, 48), Line(23, 25), Line(24, 43), Line(25, 40), Line(26, 41), Line(27, 31), Line(28, 57), Line(29, 30), Line(34, 56), Line(35, 47), Line(35, 54), Line(41, 58), Line(42, 44), Line(46, 50), Line(46, 54), Line(50, 51),  };
const double demand_num_pro = 0.5;
const double damaged_edge_pro = 0.6;
/*********************add_edge*************************/
g.add_edge(0, 9, 2.23);
g.add_edge(0, 17, 4.24);
g.add_edge(0, 42, 4.47);
g.add_edge(1, 2, 9.89);
g.add_edge(1, 17, 5.83);
g.add_edge(1, 31, 1.41);
g.add_edge(1, 52, 6.7);
g.add_edge(1, 57, 2.23);
g.add_edge(2, 52, 4.12);
g.add_edge(2, 55, 3.6);
g.add_edge(3, 26, 7.21);
g.add_edge(3, 49, 1);
g.add_edge(4, 9, 8.06);
g.add_edge(4, 12, 2.23);
g.add_edge(4, 23, 7.28);
g.add_edge(4, 26, 3.16);
g.add_edge(4, 34, 7.28);
g.add_edge(4, 50, 8.06);
g.add_edge(5, 15, 3.6);
g.add_edge(5, 32, 3.16);
g.add_edge(6, 10, 2.23);
g.add_edge(6, 59, 3.6);
g.add_edge(7, 24, 1.41);
g.add_edge(7, 39, 5);
g.add_edge(7, 49, 5.83);
g.add_edge(8, 19, 9.21);
g.add_edge(8, 47, 8.24);
g.add_edge(9, 29, 7.28);
g.add_edge(9, 36, 3.16);
g.add_edge(9, 52, 4);
g.add_edge(9, 59, 6.7);
g.add_edge(10, 37, 9.89);
g.add_edge(11, 38, 3.6);
g.add_edge(11, 40, 2);
g.add_edge(11, 43, 3);
g.add_edge(12, 57, 2.82);
g.add_edge(13, 48, 8.48);
g.add_edge(13, 51, 6.4);
g.add_edge(14, 25, 6.08);
g.add_edge(14, 34, 2.23);
g.add_edge(14, 38, 8.94);
g.add_edge(14, 45, 4);
g.add_edge(15, 45, 5);
g.add_edge(16, 47, 5);
g.add_edge(16, 51, 5);
g.add_edge(16, 57, 2.23);
g.add_edge(16, 58, 6.4);
g.add_edge(17, 32, 4.24);
g.add_edge(17, 34, 6.4);
g.add_edge(17, 41, 5);
g.add_edge(18, 27, 7.61);
g.add_edge(18, 39, 3);
g.add_edge(18, 59, 8.54);
g.add_edge(19, 32, 8.6);
g.add_edge(20, 23, 7.81);
g.add_edge(20, 28, 3.6);
g.add_edge(20, 38, 7.61);
g.add_edge(20, 54, 5.83);
g.add_edge(21, 22, 7.21);
g.add_edge(21, 43, 2);
g.add_edge(21, 55, 3);
g.add_edge(22, 24, 9.21);
g.add_edge(22, 37, 7.07);
g.add_edge(22, 48, 1.41);
g.add_edge(23, 25, 8);
g.add_edge(24, 29, 2.23);
g.add_edge(24, 43, 2.23);
g.add_edge(25, 40, 1.41);
g.add_edge(26, 41, 6.4);
g.add_edge(27, 31, 5);
g.add_edge(28, 50, 3.16);
g.add_edge(28, 53, 5.38);
g.add_edge(28, 57, 5.65);
g.add_edge(29, 30, 6.32);
g.add_edge(30, 59, 6.32);
g.add_edge(33, 36, 7.07);
g.add_edge(33, 58, 4.47);
g.add_edge(34, 56, 7.07);
g.add_edge(35, 47, 8.48);
g.add_edge(35, 54, 4.12);
g.add_edge(36, 46, 9.05);
g.add_edge(39, 56, 4.12);
g.add_edge(41, 58, 8.94);
g.add_edge(42, 44, 5);
g.add_edge(43, 47, 3);
g.add_edge(44, 45, 4.12);
g.add_edge(46, 50, 9.05);
g.add_edge(46, 54, 3);
g.add_edge(50, 51, 2.82);
g.add_edge(50, 53, 8.06);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 0);
g.set_importance(6, 1.26);
g.set_importance(7, 0);
g.set_importance(8, 0);
g.set_importance(9, 0);
g.set_importance(10, 0);
g.set_importance(11, 6.02);
g.set_importance(12, 0);
g.set_importance(13, 0);
g.set_importance(14, 0);
g.set_importance(15, 4.17);
g.set_importance(16, 8.09);
g.set_importance(17, 6.87);
g.set_importance(18, 0);
g.set_importance(19, 0);
g.set_importance(20, 0);
g.set_importance(21, 1.31);
g.set_importance(22, 0);
g.set_importance(23, 7.07);
g.set_importance(24, 0);
g.set_importance(25, 0);
g.set_importance(26, 6);
g.set_importance(27, 0);
g.set_importance(28, 8.19);
g.set_importance(29, 0);
g.set_importance(30, 0);
g.set_importance(31, 8.82);
g.set_importance(32, 0);
g.set_importance(33, 0);
g.set_importance(34, 0);
g.set_importance(35, 8.26);
g.set_importance(36, 4.05);
g.set_importance(37, 0);
g.set_importance(38, 8.97);
g.set_importance(39, 0);
g.set_importance(40, 5.59);
g.set_importance(41, 9.42);
g.set_importance(42, 3.59);
g.set_importance(43, 4.76);
g.set_importance(44, 4.95);
g.set_importance(45, 6.68);
g.set_importance(46, 9.97);
g.set_importance(47, 3.24);
g.set_importance(48, 4.09);
g.set_importance(49, 0);
g.set_importance(50, 3.87);
g.set_importance(51, 0);
g.set_importance(52, 7.39);
g.set_importance(53, 7.34);
g.set_importance(54, 4.05);
g.set_importance(55, 5.09);
g.set_importance(56, 8.28);
g.set_importance(57, 7.45);
g.set_importance(58, 9.28);
g.set_importance(59, 0);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 42), 4.12);
g.set_repair_time(Line(1, 2), 4.13);
g.set_repair_time(Line(1, 17), 2.89);
g.set_repair_time(Line(1, 31), 2.31);
g.set_repair_time(Line(1, 52), 2.99);
g.set_repair_time(Line(1, 57), 1.13);
g.set_repair_time(Line(2, 52), 4.89);
g.set_repair_time(Line(2, 55), 1.01);
g.set_repair_time(Line(3, 49), 2.54);
g.set_repair_time(Line(4, 9), 3.59);
g.set_repair_time(Line(4, 12), 1.31);
g.set_repair_time(Line(4, 23), 2.21);
g.set_repair_time(Line(4, 34), 2.55);
g.set_repair_time(Line(4, 50), 1.06);
g.set_repair_time(Line(5, 15), 2.62);
g.set_repair_time(Line(5, 32), 4.89);
g.set_repair_time(Line(6, 10), 2.44);
g.set_repair_time(Line(6, 59), 3.99);
g.set_repair_time(Line(7, 39), 3.52);
g.set_repair_time(Line(8, 19), 4.44);
g.set_repair_time(Line(9, 29), 1.54);
g.set_repair_time(Line(9, 36), 3.06);
g.set_repair_time(Line(11, 38), 4.16);
g.set_repair_time(Line(12, 57), 1.87);
g.set_repair_time(Line(13, 48), 3.23);
g.set_repair_time(Line(14, 25), 4.68);
g.set_repair_time(Line(14, 34), 1.7);
g.set_repair_time(Line(14, 38), 4.13);
g.set_repair_time(Line(15, 45), 4);
g.set_repair_time(Line(16, 47), 3.74);
g.set_repair_time(Line(16, 51), 4.36);
g.set_repair_time(Line(16, 57), 2.85);
g.set_repair_time(Line(18, 39), 1.16);
g.set_repair_time(Line(18, 59), 4.74);
g.set_repair_time(Line(19, 32), 1.06);
g.set_repair_time(Line(20, 23), 4.58);
g.set_repair_time(Line(22, 24), 1.74);
g.set_repair_time(Line(22, 37), 2.1);
g.set_repair_time(Line(22, 48), 4.24);
g.set_repair_time(Line(23, 25), 4.66);
g.set_repair_time(Line(24, 43), 3.47);
g.set_repair_time(Line(25, 40), 4.9);
g.set_repair_time(Line(26, 41), 4.01);
g.set_repair_time(Line(27, 31), 3.93);
g.set_repair_time(Line(28, 57), 1.21);
g.set_repair_time(Line(29, 30), 4.7);
g.set_repair_time(Line(34, 56), 4.28);
g.set_repair_time(Line(35, 47), 3.99);
g.set_repair_time(Line(35, 54), 1.2);
g.set_repair_time(Line(41, 58), 3.5);
g.set_repair_time(Line(42, 44), 2.22);
g.set_repair_time(Line(46, 50), 4.89);
g.set_repair_time(Line(46, 54), 1);
g.set_repair_time(Line(50, 51), 2.59);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 12.5875}, {2, 12.9375}, {3, 24.975}, {4, 12.8625}, {5, 14.55}, {6, 15.6625}, {7, 16.4375}, {8, 31.5125}, {9, 2.7875}, {10, 18.45}, {11, 21.2125}, {12, 15.65}, {13, 32.4125}, {14, 16.0875}, {15, 19.05}, {16, 18.1625}, {17, 5.3}, {18, 21.8375}, {19, 21.35}, {20, 26.9375}, {21, 19.9625}, {22, 26.1875}, {23, 21.9625}, {24, 14.675}, {25, 23.6875}, {26, 16.8125}, {27, 20.6}, {28, 22.4375}, {29, 11.8875}, {30, 19.0625}, {31, 14.35}, {32, 10.6}, {33, 15.575}, {34, 13.3}, {35, 26.95}, {36, 6.7375}, {37, 30.8125}, {38, 25.7125}, {39, 22.6875}, {40, 23.7125}, {41, 11.55}, {42, 5.5875}, {43, 17.4625}, {44, 11.8375}, {45, 16.9875}, {46, 18.05}, {47, 21.2125}, {48, 27.95}, {49, 23.725}, {50, 22.9375}, {51, 24.4125}, {52, 7.7875}, {53, 29.1625}, {54, 21.8}, {55, 17.4375}, {56, 22.1375}, {57, 15.375}, {58, 21.1625}, {59, 11.1625}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 12.5875}, {1, 0}, {2, 12.3625}, {3, 22.0625}, {4, 9.1}, {5, 16.5375}, {6, 26.25}, {7, 20.125}, {8, 22.125}, {9, 13.375}, {10, 29.0375}, {11, 19.325}, {12, 6.3125}, {13, 19.825}, {14, 18.075}, {15, 21.0375}, {16, 5.575}, {17, 7.2875}, {18, 17.525}, {19, 23.3375}, {20, 14.35}, {21, 18.075}, {22, 27.0875}, {23, 18.2}, {24, 18.3625}, {25, 23.5875}, {26, 13.05}, {27, 8.0125}, {28, 9.85}, {29, 21.15}, {30, 29.05}, {31, 1.7625}, {32, 12.5875}, {33, 19.1625}, {34, 15.2875}, {35, 22.425}, {36, 17.325}, {37, 35.925}, {38, 23.825}, {39, 21.275}, {40, 21.825}, {41, 13.5375}, {42, 18.175}, {43, 15.575}, {44, 24.425}, {45, 23.075}, {46, 25.1125}, {47, 11.825}, {48, 28.85}, {49, 23.3125}, {50, 13.8}, {51, 11.825}, {52, 8.375}, {53, 16.575}, {54, 21.6375}, {55, 16.8625}, {56, 24.125}, {57, 2.7875}, {58, 13.575}, {59, 21.75}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 12.9375}, {1, 12.3625}, {2, 0}, {3, 23.8375}, {4, 20.225}, {5, 27.4875}, {6, 23.025}, {7, 15.3}, {8, 24.8}, {9, 10.15}, {10, 25.8125}, {11, 14.5}, {12, 18.675}, {13, 29.625}, {14, 26.3625}, {15, 31.9875}, {16, 17.9375}, {17, 18.2375}, {18, 25.3}, {19, 34.2875}, {20, 26.7125}, {21, 8.25}, {22, 17.2625}, {23, 28.7625}, {24, 13.5375}, {25, 18.7625}, {26, 24.175}, {27, 20.375}, {28, 22.2125}, {29, 16.325}, {30, 24.225}, {31, 14.125}, {32, 23.5375}, {33, 22.9375}, {34, 26.2375}, {35, 25.1}, {36, 14.1}, {37, 26.1}, {38, 19}, {39, 21.55}, {40, 17}, {41, 24.4875}, {42, 18.525}, {43, 10.75}, {44, 24.775}, {45, 29.925}, {46, 25.4125}, {47, 14.5}, {48, 19.025}, {49, 22.5875}, {50, 26.1625}, {51, 24.1875}, {52, 5.15}, {53, 28.9375}, {54, 29.1625}, {55, 4.5}, {56, 26.7}, {57, 15.15}, {58, 25.9375}, {59, 18.525}, 