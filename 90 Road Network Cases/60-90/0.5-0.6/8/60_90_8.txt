node_num : 60
demand_node_num : 30
edge_num : 90
damaged_edge_num : 54
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 8, 9, 10, 11, 14, 17, 18, 19, 21, 25, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 40, 42, 45, 49, 51, 54, 55, 56, 58, 59,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 7), Line(0, 10), Line(0, 24), Line(0, 44), Line(1, 3), Line(1, 27), Line(2, 13), Line(2, 47), Line(3, 6), Line(3, 52), Line(3, 57), Line(4, 6), Line(4, 45), Line(5, 22), Line(5, 41), Line(5, 43), Line(5, 45), Line(6, 25), Line(6, 27), Line(7, 19), Line(8, 11), Line(8, 13), Line(8, 31), Line(8, 53), Line(9, 18), Line(9, 38), Line(9, 54), Line(10, 24), Line(11, 14), Line(12, 34), Line(12, 54), Line(13, 15), Line(13, 35), Line(14, 31), Line(14, 36), Line(15, 36), Line(15, 39), Line(16, 30), Line(16, 38), Line(16, 49), Line(16, 55), Line(17, 21), Line(17, 58), Line(18, 19), Line(18, 29), Line(18, 35), Line(18, 47), Line(19, 39), Line(20, 22), Line(20, 32), Line(21, 22), Line(21, 27), Line(21, 57), Line(22, 34), Line(23, 48), Line(23, 58), Line(23, 59), Line(25, 45), Line(25, 58), Line(26, 46), Line(26, 53), Line(27, 40), Line(28, 42), Line(28, 44), Line(29, 41), Line(30, 32), Line(30, 41), Line(30, 49), Line(31, 42), Line(32, 37), Line(33, 50), Line(33, 52), Line(33, 59), Line(35, 55), Line(35, 58), Line(36, 38), Line(37, 51), Line(39, 50), Line(40, 49), Line(40, 51), Line(41, 55), Line(43, 44), Line(43, 45), Line(46, 47), Line(47, 56), Line(48, 56), Line(49, 56), Line(52, 59), Line(55, 57), Line(56, 57),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 7), Line(1, 3), Line(2, 13), Line(2, 47), Line(3, 57), Line(4, 6), Line(4, 45), Line(5, 22), Line(5, 41), Line(5, 43), Line(6, 25), Line(6, 27), Line(8, 31), Line(9, 18), Line(9, 38), Line(9, 54), Line(10, 24), Line(12, 54), Line(13, 15), Line(13, 35), Line(15, 36), Line(15, 39), Line(16, 49), Line(16, 55), Line(18, 19), Line(18, 29), Line(18, 35), Line(19, 39), Line(20, 32), Line(21, 22), Line(21, 57), Line(22, 34), Line(23, 58), Line(23, 59), Line(25, 45), Line(26, 46), Line(26, 53), Line(27, 40), Line(28, 42), Line(30, 32), Line(30, 41), Line(33, 50), Line(33, 52), Line(33, 59), Line(35, 55), Line(35, 58), Line(36, 38), Line(37, 51), Line(39, 50), Line(40, 49), Line(40, 51), Line(43, 45), Line(49, 56), Line(55, 57),  };
const double demand_num_pro = 0.5;
const double damaged_edge_pro = 0.6;
/*********************add_edge*************************/
g.add_edge(0, 7, 4.12);
g.add_edge(0, 10, 5.83);
g.add_edge(0, 24, 1);
g.add_edge(0, 44, 9.84);
g.add_edge(1, 3, 8.94);
g.add_edge(1, 27, 6.7);
g.add_edge(2, 13, 4.47);
g.add_edge(2, 47, 1);
g.add_edge(3, 6, 3.16);
g.add_edge(3, 52, 8.54);
g.add_edge(3, 57, 4.12);
g.add_edge(4, 6, 4.24);
g.add_edge(4, 45, 1.41);
g.add_edge(5, 22, 3.16);
g.add_edge(5, 41, 4.24);
g.add_edge(5, 43, 1);
g.add_edge(5, 45, 4);
g.add_edge(6, 25, 7.28);
g.add_edge(6, 27, 4.12);
g.add_edge(7, 19, 9.89);
g.add_edge(8, 11, 9.21);
g.add_edge(8, 13, 1.41);
g.add_edge(8, 31, 6.32);
g.add_edge(8, 53, 3.6);
g.add_edge(9, 18, 6.08);
g.add_edge(9, 38, 1.41);
g.add_edge(9, 54, 7.21);
g.add_edge(10, 24, 6.4);
g.add_edge(11, 14, 7.21);
g.add_edge(12, 34, 8.6);
g.add_edge(12, 54, 7.07);
g.add_edge(13, 15, 4.47);
g.add_edge(13, 35, 3);
g.add_edge(14, 31, 7.81);
g.add_edge(14, 36, 2);
g.add_edge(15, 36, 3.6);
g.add_edge(15, 39, 7.81);
g.add_edge(16, 30, 3.6);
g.add_edge(16, 38, 3.16);
g.add_edge(16, 49, 2.82);
g.add_edge(16, 55, 2);
g.add_edge(17, 21, 4);
g.add_edge(17, 58, 5);
g.add_edge(18, 19, 4.12);
g.add_edge(18, 29, 5.09);
g.add_edge(18, 35, 5.09);
g.add_edge(18, 47, 6);
g.add_edge(19, 39, 4.12);
g.add_edge(20, 22, 6.7);
g.add_edge(20, 32, 9.05);
g.add_edge(21, 22, 5.38);
g.add_edge(21, 27, 5.09);
g.add_edge(21, 57, 3.16);
g.add_edge(22, 34, 4.24);
g.add_edge(23, 48, 8.06);
g.add_edge(23, 58, 7.61);
g.add_edge(23, 59, 4);
g.add_edge(25, 45, 5.38);
g.add_edge(25, 58, 8.06);
g.add_edge(26, 46, 7.21);
g.add_edge(26, 53, 6);
g.add_edge(27, 40, 6.7);
g.add_edge(28, 42, 2.82);
g.add_edge(28, 44, 7.61);
g.add_edge(29, 41, 9.21);
g.add_edge(30, 32, 8.24);
g.add_edge(30, 41, 3.6);
g.add_edge(30, 49, 6.4);
g.add_edge(31, 42, 7.21);
g.add_edge(32, 37, 6.7);
g.add_edge(33, 50, 4.12);
g.add_edge(33, 52, 7.07);
g.add_edge(33, 59, 2.23);
g.add_edge(35, 55, 3.6);
g.add_edge(35, 58, 3.6);
g.add_edge(36, 38, 4.12);
g.add_edge(37, 51, 7);
g.add_edge(39, 50, 2.23);
g.add_edge(40, 49, 7.61);
g.add_edge(40, 51, 8.06);
g.add_edge(41, 55, 5.09);
g.add_edge(43, 44, 9.21);
g.add_edge(43, 45, 4.12);
g.add_edge(46, 47, 8.24);
g.add_edge(47, 56, 5.09);
g.add_edge(48, 56, 7.07);
g.add_edge(49, 56, 3.6);
g.add_edge(52, 59, 5);
g.add_edge(55, 57, 2.23);
g.add_edge(56, 57, 5.09);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 0);
g.set_importance(6, 0);
g.set_importance(7, 0);
g.set_importance(8, 9.44);
g.set_importance(9, 9.19);
g.set_importance(10, 3.57);
g.set_importance(11, 6.31);
g.set_importance(12, 0);
g.set_importance(13, 0);
g.set_importance(14, 1.38);
g.set_importance(15, 0);
g.set_importance(16, 0);
g.set_importance(17, 7.92);
g.set_importance(18, 5.7);
g.set_importance(19, 9.99);
g.set_importance(20, 0);
g.set_importance(21, 5.45);
g.set_importance(22, 0);
g.set_importance(23, 0);
g.set_importance(24, 0);
g.set_importance(25, 3.72);
g.set_importance(26, 9.87);
g.set_importance(27, 6.7);
g.set_importance(28, 5.46);
g.set_importance(29, 8.69);
g.set_importance(30, 0);
g.set_importance(31, 3.64);
g.set_importance(32, 3.61);
g.set_importance(33, 0);
g.set_importance(34, 5.75);
g.set_importance(35, 9.22);
g.set_importance(36, 0);
g.set_importance(37, 7.59);
g.set_importance(38, 6.68);
g.set_importance(39, 0);
g.set_importance(40, 3.89);
g.set_importance(41, 0);
g.set_importance(42, 4.8);
g.set_importance(43, 0);
g.set_importance(44, 0);
g.set_importance(45, 1.04);
g.set_importance(46, 0);
g.set_importance(47, 0);
g.set_importance(48, 0);
g.set_importance(49, 3.31);
g.set_importance(50, 0);
g.set_importance(51, 2.87);
g.set_importance(52, 0);
g.set_importance(53, 0);
g.set_importance(54, 8.28);
g.set_importance(55, 7.94);
g.set_importance(56, 1.57);
g.set_importance(57, 0);
g.set_importance(58, 1.7);
g.set_importance(59, 2.56);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 7), 1.69);
g.set_repair_time(Line(1, 3), 2.45);
g.set_repair_time(Line(2, 13), 4.35);
g.set_repair_time(Line(2, 47), 3.97);
g.set_repair_time(Line(3, 57), 3.73);
g.set_repair_time(Line(4, 6), 2.31);
g.set_repair_time(Line(4, 45), 1.28);
g.set_repair_time(Line(5, 22), 4.93);
g.set_repair_time(Line(5, 41), 2.44);
g.set_repair_time(Line(5, 43), 3.6);
g.set_repair_time(Line(6, 25), 1.54);
g.set_repair_time(Line(6, 27), 1.99);
g.set_repair_time(Line(8, 31), 4.83);
g.set_repair_time(Line(9, 18), 4.12);
g.set_repair_time(Line(9, 38), 4.53);
g.set_repair_time(Line(9, 54), 3.16);
g.set_repair_time(Line(10, 24), 3.84);
g.set_repair_time(Line(12, 54), 3.9);
g.set_repair_time(Line(13, 15), 1.63);
g.set_repair_time(Line(13, 35), 4.47);
g.set_repair_time(Line(15, 36), 3.52);
g.set_repair_time(Line(15, 39), 1.18);
g.set_repair_time(Line(16, 49), 2.26);
g.set_repair_time(Line(16, 55), 2.73);
g.set_repair_time(Line(18, 19), 2.83);
g.set_repair_time(Line(18, 29), 4.06);
g.set_repair_time(Line(18, 35), 4.71);
g.set_repair_time(Line(19, 39), 3.32);
g.set_repair_time(Line(20, 32), 4.35);
g.set_repair_time(Line(21, 22), 2.27);
g.set_repair_time(Line(21, 57), 3.46);
g.set_repair_time(Line(22, 34), 2.02);
g.set_repair_time(Line(23, 58), 2.64);
g.set_repair_time(Line(23, 59), 1.91);
g.set_repair_time(Line(25, 45), 4.12);
g.set_repair_time(Line(26, 46), 2.98);
g.set_repair_time(Line(26, 53), 2.63);
g.set_repair_time(Line(27, 40), 3.62);
g.set_repair_time(Line(28, 42), 3.5);
g.set_repair_time(Line(30, 32), 3.9);
g.set_repair_time(Line(30, 41), 1.01);
g.set_repair_time(Line(33, 50), 3.04);
g.set_repair_time(Line(33, 52), 3.81);
g.set_repair_time(Line(33, 59), 2.8);
g.set_repair_time(Line(35, 55), 4.28);
g.set_repair_time(Line(35, 58), 3.71);
g.set_repair_time(Line(36, 38), 1.08);
g.set_repair_time(Line(37, 51), 2.14);
g.set_repair_time(Line(39, 50), 3.2);
g.set_repair_time(Line(40, 49), 1.78);
g.set_repair_time(Line(40, 51), 3.94);
g.set_repair_time(Line(43, 45), 3.62);
g.set_repair_time(Line(49, 56), 2.64);
g.set_repair_time(Line(55, 57), 4.6);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 49.55}, {2, 31.4125}, {3, 39.975}, {4, 30.725}, {5, 25.0625}, {6, 36.025}, {7, 5.15}, {8, 34.5375}, {9, 30.2625}, {10, 7.2875}, {11, 46.05}, {12, 45.0625}, {13, 32.775}, {14, 39.425}, {15, 32.425}, {16, 35.975}, {17, 39.775}, {18, 22.6625}, {19, 17.5125}, {20, 37.3875}, {21, 35.7375}, {22, 29.0125}, {23, 38.3875}, {24, 1.25}, {25, 35.6875}, {26, 46.5375}, {27, 41.175}, {28, 21.8125}, {29, 29.025}, {30, 34.8625}, {31, 34.35}, {32, 45.1625}, {33, 30.6}, {34, 34.3125}, {35, 29.025}, {36, 36.925}, {37, 53.5375}, {38, 32.025}, {39, 22.6625}, {40, 49.0125}, {41, 30.3625}, {42, 25.3375}, {43, 23.8125}, {44, 12.3}, {45, 28.9625}, {46, 40.4625}, {47, 30.1625}, {48, 45.3625}, {49, 39.5}, {50, 25.45}, {51, 59.0875}, {52, 39.4375}, {53, 39.0375}, {54, 39.275}, {55, 33.525}, {56, 36.525}, {57, 36.3125}, {58, 33.525}, {59, 33.3875}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 49.55}, {1, 0}, {2, 30.3}, {3, 11.175}, {4, 18.825}, {5, 25.4125}, {6, 13.525}, {7, 47.4875}, {8, 29.125}, {9, 27.325}, {10, 56.8375}, {11, 40.6375}, {12, 37.5125}, {13, 27.3625}, {14, 33.2125}, {15, 32.95}, {16, 21.6125}, {17, 19.7375}, {18, 29.975}, {19, 35.125}, {20, 29.8375}, {21, 14.7375}, {22, 21.4625}, {23, 33.1}, {24, 50.8}, {25, 22.625}, {26, 41.125}, {27, 8.375}, {28, 46.7625}, {29, 36.3375}, {30, 26.1125}, {31, 37.025}, {32, 36.4125}, {33, 30.6875}, {34, 26.7625}, {35, 23.6125}, {36, 30.7125}, {37, 35.575}, {38, 25.5625}, {39, 38.625}, {40, 16.75}, {41, 25.475}, {42, 46.0375}, {43, 25.7375}, {44, 37.25}, {45, 20.5875}, {46, 39.35}, {47, 29.05}, {48, 31.525}, {49, 25.1375}, {50, 35.8375}, {51, 26.825}, {52, 21.85}, {53, 33.625}, {54, 36.3375}, {55, 19.1125}, {56, 22.6875}, {57, 16.325}, {58, 25.9875}, {59, 28.1}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 31.4125}, {1, 30.3}, {2, 0}, {3, 19.125}, {4, 28.375}, {5, 25.5}, {6, 23.075}, {7, 26.2625}, {8, 7.35}, {9, 16.35}, {10, 38.7}, {11, 18.8625}, {12, 34.2}, {13, 5.5875}, {14, 18.175}, {15, 11.175}, {16, 15.6375}, {17, 20.0875}, {18, 8.75}, {19, 13.9}, {20, 33.025}, {21, 17.925}, {22, 24.65}, {23, 23.35}, {24, 32.6625}, {25, 23.9125}, {26, 19.35}, {27, 24.2875}, {28, 27.7875}, {29, 15.1125}, {30, 20.1125}, {31, 15.25}, {32, 30.4125}, {33, 26.9875}, {34, 29.95}, {35, 9.3375}, {36, 15.675}, {37, 38.7875}, {38, 18.1125}, {39, 19.05}, {40, 21.625}, {41, 20.2}, {42, 24.2625}, {43, 26.75}, {44, 37.3}, {45, 30.1375}, {46, 11.55}, {47, 1.25}, {48, 16.45}, {49, 12.1125}, {50, 21.8375}, {51, 31.7}, {52, 29.8}, {53, 11.85}, {54, 25.3625}, {55, 13.8375}, {56, 7.6125}, {57, 13.975}, {58, 13.8375}, {59, 28.35}, 