node_num : 60
demand_node_num : 30
edge_num : 90
damaged_edge_num : 54
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 6, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 38, 40, 41, 42, 47, 51, 54, 55, 59,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 19), Line(0, 23), Line(0, 32), Line(0, 54), Line(1, 11), Line(1, 44), Line(2, 38), Line(2, 41), Line(3, 12), Line(3, 19), Line(3, 23), Line(4, 35), Line(4, 45), Line(4, 48), Line(4, 52), Line(5, 10), Line(5, 18), Line(5, 35), Line(6, 31), Line(6, 42), Line(7, 9), Line(7, 11), Line(7, 52), Line(8, 27), Line(8, 33), Line(8, 59), Line(9, 14), Line(9, 29), Line(9, 39), Line(10, 24), Line(10, 51), Line(11, 19), Line(12, 30), Line(12, 37), Line(13, 29), Line(13, 55), Line(14, 15), Line(14, 29), Line(14, 48), Line(14, 55), Line(15, 56), Line(15, 57), Line(16, 26), Line(16, 41), Line(17, 20), Line(17, 31), Line(17, 46), Line(17, 58), Line(18, 34), Line(19, 42), Line(20, 40), Line(20, 52), Line(21, 38), Line(21, 51), Line(22, 24), Line(22, 43), Line(22, 54), Line(23, 52), Line(24, 35), Line(24, 46), Line(25, 28), Line(25, 49), Line(25, 58), Line(26, 44), Line(27, 30), Line(27, 46), Line(27, 59), Line(28, 48), Line(28, 53), Line(28, 57), Line(30, 59), Line(31, 36), Line(31, 39), Line(32, 37), Line(32, 58), Line(33, 51), Line(34, 47), Line(34, 53), Line(35, 38), Line(35, 55), Line(36, 45), Line(36, 56), Line(38, 40), Line(38, 41), Line(39, 50), Line(40, 56), Line(43, 47), Line(44, 55), Line(47, 48), Line(49, 50),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 23), Line(1, 11), Line(1, 44), Line(2, 41), Line(3, 12), Line(3, 19), Line(3, 23), Line(4, 35), Line(5, 10), Line(5, 18), Line(5, 35), Line(6, 31), Line(7, 11), Line(8, 33), Line(8, 59), Line(9, 14), Line(9, 29), Line(10, 24), Line(10, 51), Line(12, 30), Line(12, 37), Line(13, 29), Line(13, 55), Line(14, 15), Line(14, 29), Line(15, 56), Line(16, 26), Line(17, 20), Line(17, 31), Line(17, 46), Line(17, 58), Line(19, 42), Line(21, 38), Line(22, 24), Line(23, 52), Line(24, 35), Line(24, 46), Line(25, 49), Line(26, 44), Line(27, 30), Line(28, 53), Line(28, 57), Line(30, 59), Line(31, 36), Line(31, 39), Line(32, 58), Line(34, 53), Line(36, 45), Line(39, 50), Line(40, 56), Line(43, 47), Line(44, 55), Line(47, 48), Line(49, 50),  };
const double demand_num_pro = 0.5;
const double damaged_edge_pro = 0.6;
/*********************add_edge*************************/
g.add_edge(0, 19, 4.12);
g.add_edge(0, 23, 8.48);
g.add_edge(0, 32, 6.08);
g.add_edge(0, 54, 3.6);
g.add_edge(1, 11, 5.38);
g.add_edge(1, 44, 4);
g.add_edge(2, 38, 1);
g.add_edge(2, 41, 6.4);
g.add_edge(3, 12, 8.06);
g.add_edge(3, 19, 7.07);
g.add_edge(3, 23, 7);
g.add_edge(4, 35, 7.28);
g.add_edge(4, 45, 6);
g.add_edge(4, 48, 3.6);
g.add_edge(4, 52, 7.81);
g.add_edge(5, 10, 7.61);
g.add_edge(5, 18, 5.09);
g.add_edge(5, 35, 1);
g.add_edge(6, 31, 7.81);
g.add_edge(6, 42, 2.82);
g.add_edge(7, 9, 8);
g.add_edge(7, 11, 2);
g.add_edge(7, 52, 6.08);
g.add_edge(8, 27, 5.83);
g.add_edge(8, 33, 10);
g.add_edge(8, 59, 7.07);
g.add_edge(9, 14, 5);
g.add_edge(9, 29, 6);
g.add_edge(9, 39, 8.54);
g.add_edge(10, 24, 8.24);
g.add_edge(10, 51, 8.94);
g.add_edge(11, 19, 5.65);
g.add_edge(12, 30, 6.7);
g.add_edge(12, 37, 5);
g.add_edge(13, 29, 6.08);
g.add_edge(13, 55, 5.09);
g.add_edge(14, 15, 7.28);
g.add_edge(14, 29, 5);
g.add_edge(14, 48, 5.83);
g.add_edge(14, 55, 4.47);
g.add_edge(15, 56, 4.12);
g.add_edge(15, 57, 7.21);
g.add_edge(16, 26, 8.6);
g.add_edge(16, 41, 5);
g.add_edge(17, 20, 6);
g.add_edge(17, 31, 6);
g.add_edge(17, 46, 9.21);
g.add_edge(17, 58, 8.06);
g.add_edge(18, 34, 5.65);
g.add_edge(19, 42, 3.16);
g.add_edge(20, 40, 5.09);
g.add_edge(20, 52, 7.07);
g.add_edge(21, 38, 8.94);
g.add_edge(21, 51, 5.09);
g.add_edge(22, 24, 8.06);
g.add_edge(22, 43, 2.82);
g.add_edge(22, 54, 4.12);
g.add_edge(23, 52, 5.65);
g.add_edge(24, 35, 4.12);
g.add_edge(24, 46, 6.32);
g.add_edge(25, 28, 1);
g.add_edge(25, 49, 4);
g.add_edge(25, 58, 8);
g.add_edge(26, 44, 8.24);
g.add_edge(27, 30, 4.24);
g.add_edge(27, 46, 7.07);
g.add_edge(27, 59, 2);
g.add_edge(28, 48, 4);
g.add_edge(28, 53, 8.94);
g.add_edge(28, 57, 9.21);
g.add_edge(30, 59, 5.83);
g.add_edge(31, 36, 5.38);
g.add_edge(31, 39, 8.6);
g.add_edge(32, 37, 2.82);
g.add_edge(32, 58, 7.21);
g.add_edge(33, 51, 11.31);
g.add_edge(34, 47, 4.24);
g.add_edge(34, 53, 1);
g.add_edge(35, 38, 10.63);
g.add_edge(35, 55, 3.16);
g.add_edge(36, 45, 1.41);
g.add_edge(36, 56, 5);
g.add_edge(38, 40, 3);
g.add_edge(38, 41, 7.07);
g.add_edge(39, 50, 2);
g.add_edge(40, 56, 7.21);
g.add_edge(43, 47, 2.23);
g.add_edge(44, 55, 6);
g.add_edge(47, 48, 7);
g.add_edge(49, 50, 7);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 0);
g.set_importance(6, 9.04);
g.set_importance(7, 0);
g.set_importance(8, 0);
g.set_importance(9, 0);
g.set_importance(10, 0);
g.set_importance(11, 5.58);
g.set_importance(12, 1.6);
g.set_importance(13, 0);
g.set_importance(14, 2.17);
g.set_importance(15, 0);
g.set_importance(16, 8.18);
g.set_importance(17, 9.25);
g.set_importance(18, 2.05);
g.set_importance(19, 7.02);
g.set_importance(20, 3.47);
g.set_importance(21, 9.65);
g.set_importance(22, 3.82);
g.set_importance(23, 0);
g.set_importance(24, 4.35);
g.set_importance(25, 5.1);
g.set_importance(26, 0);
g.set_importance(27, 8.9);
g.set_importance(28, 2.5);
g.set_importance(29, 4.58);
g.set_importance(30, 3.34);
g.set_importance(31, 9.2);
g.set_importance(32, 5);
g.set_importance(33, 0);
g.set_importance(34, 9.14);
g.set_importance(35, 4.47);
g.set_importance(36, 0);
g.set_importance(37, 0);
g.set_importance(38, 9.81);
g.set_importance(39, 0);
g.set_importance(40, 2.48);
g.set_importance(41, 4.43);
g.set_importance(42, 6.71);
g.set_importance(43, 0);
g.set_importance(44, 0);
g.set_importance(45, 0);
g.set_importance(46, 0);
g.set_importance(47, 1.97);
g.set_importance(48, 0);
g.set_importance(49, 0);
g.set_importance(50, 0);
g.set_importance(51, 5.09);
g.set_importance(52, 0);
g.set_importance(53, 0);
g.set_importance(54, 1.97);
g.set_importance(55, 5.9);
g.set_importance(56, 0);
g.set_importance(57, 0);
g.set_importance(58, 0);
g.set_importance(59, 1.52);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 23), 4.06);
g.set_repair_time(Line(1, 11), 2.91);
g.set_repair_time(Line(1, 44), 2.08);
g.set_repair_time(Line(2, 41), 4.59);
g.set_repair_time(Line(3, 12), 2.36);
g.set_repair_time(Line(3, 19), 4.58);
g.set_repair_time(Line(3, 23), 4.55);
g.set_repair_time(Line(4, 35), 3.87);
g.set_repair_time(Line(5, 10), 2.66);
g.set_repair_time(Line(5, 18), 1.15);
g.set_repair_time(Line(5, 35), 2.4);
g.set_repair_time(Line(6, 31), 4.85);
g.set_repair_time(Line(7, 11), 4.81);
g.set_repair_time(Line(8, 33), 2.62);
g.set_repair_time(Line(8, 59), 3.69);
g.set_repair_time(Line(9, 14), 1.88);
g.set_repair_time(Line(9, 29), 5);
g.set_repair_time(Line(10, 24), 1.24);
g.set_repair_time(Line(10, 51), 1.11);
g.set_repair_time(Line(12, 30), 2.31);
g.set_repair_time(Line(12, 37), 1.32);
g.set_repair_time(Line(13, 29), 1.98);
g.set_repair_time(Line(13, 55), 1.77);
g.set_repair_time(Line(14, 15), 2.93);
g.set_repair_time(Line(14, 29), 2.02);
g.set_repair_time(Line(15, 56), 1.61);
g.set_repair_time(Line(16, 26), 1.7);
g.set_repair_time(Line(17, 20), 4.47);
g.set_repair_time(Line(17, 31), 1.94);
g.set_repair_time(Line(17, 46), 2.58);
g.set_repair_time(Line(17, 58), 1.09);
g.set_repair_time(Line(19, 42), 3.75);
g.set_repair_time(Line(21, 38), 4.65);
g.set_repair_time(Line(22, 24), 1.55);
g.set_repair_time(Line(23, 52), 1.03);
g.set_repair_time(Line(24, 35), 4.43);
g.set_repair_time(Line(24, 46), 1.96);
g.set_repair_time(Line(25, 49), 4.59);
g.set_repair_time(Line(26, 44), 1.43);
g.set_repair_time(Line(27, 30), 3.45);
g.set_repair_time(Line(28, 53), 1.49);
g.set_repair_time(Line(28, 57), 2.05);
g.set_repair_time(Line(30, 59), 4.87);
g.set_repair_time(Line(31, 36), 4.14);
g.set_repair_time(Line(31, 39), 3.2);
g.set_repair_time(Line(32, 58), 2.69);
g.set_repair_time(Line(34, 53), 2.02);
g.set_repair_time(Line(36, 45), 2.91);
g.set_repair_time(Line(39, 50), 4.35);
g.set_repair_time(Line(40, 56), 3.64);
g.set_repair_time(Line(43, 47), 4.87);
g.set_repair_time(Line(44, 55), 3.77);
g.set_repair_time(Line(47, 48), 3.05);
g.set_repair_time(Line(49, 50), 1.99);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 18.9375}, {2, 37.8625}, {3, 13.9875}, {4, 27.425}, {5, 26.125}, {6, 12.625}, {7, 14.7125}, {8, 38.3375}, {9, 24.7125}, {10, 30.025}, {11, 12.2125}, {12, 17.375}, {13, 35.1875}, {14, 30.9625}, {15, 40.0625}, {16, 44.9875}, {17, 26.6875}, {18, 28.325}, {19, 5.15}, {20, 26.5}, {21, 47.5625}, {22, 9.65}, {23, 10.6}, {24, 19.725}, {25, 26.6125}, {26, 34.2375}, {27, 31.05}, {28, 27.8625}, {29, 32.2125}, {30, 25.75}, {31, 22.3875}, {32, 7.6}, {33, 50.8375}, {34, 21.2625}, {35, 24.875}, {36, 29.1125}, {37, 11.125}, {38, 36.6125}, {39, 33.1375}, {40, 32.8625}, {41, 45.45}, {42, 9.1}, {43, 13.175}, {44, 23.9375}, {45, 30.875}, {46, 27.625}, {47, 15.9625}, {48, 24.7125}, {49, 31.6125}, {50, 35.6375}, {51, 41.2}, {52, 17.6625}, {53, 22.5125}, {54, 4.5}, {55, 28.825}, {56, 35.3625}, {57, 39.375}, {58, 16.6125}, {59, 33.0375}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 18.9375}, {1, 0}, {2, 30.9875}, {3, 22.625}, {4, 25.55}, {5, 17.7}, {6, 21.2625}, {7, 9.225}, {8, 45.625}, {9, 19.225}, {10, 27.2125}, {11, 6.725}, {12, 32.7}, {13, 18.8625}, {14, 18.0875}, {15, 27.1875}, {16, 26.05}, {17, 33.1625}, {18, 24.0625}, {19, 13.7875}, {20, 25.6625}, {21, 40.9125}, {22, 28.5875}, {23, 23.8875}, {24, 21.6}, {25, 31.625}, {26, 15.3}, {27, 38.3375}, {28, 30.375}, {29, 24.3375}, {30, 41.075}, {31, 31.025}, {32, 26.5375}, {33, 52.525}, {34, 31.125}, {35, 16.45}, {36, 34.8125}, {37, 30.0625}, {38, 29.7375}, {39, 29.9}, {40, 32.025}, {41, 32.3}, {42, 17.7375}, {43, 32.1125}, {44, 5}, {45, 33.05}, {46, 29.5}, {47, 34.125}, {48, 25.375}, {49, 36.625}, {50, 32.4}, {51, 38.3875}, {52, 16.825}, {53, 32.375}, {54, 23.4375}, {55, 12.5}, {56, 32.3375}, {57, 36.2}, {58, 35.55}, {59, 40.8375}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 37.8625}, {1, 30.9875}, {2, 0}, {3, 36.0125}, {4, 23.6375}, {5, 15.7875}, {6, 36.125}, {7, 27.8}, {8, 43.7125}, {9, 30.325}, {10, 25.3}, {11, 30.3}, {12, 46.0875}, {13, 24.85}, {14, 24.075}, {15, 19.1625}, {16, 14.25}, {17, 18.8625}, {18, 22.15}, {19, 37.3625}, {20, 11.3625}, {21, 12.425}, {22, 29.7625}, {23, 27.2625}, {24, 19.6875}, {25, 34.3875}, {26, 25}, {27, 36.425}, {28, 33.1375}, {29, 30.325}, {30, 41.725}, {31, 26.3625}, {32, 37.95}, {33, 32.925}, {34, 29.2125}, {35, 14.5375}, {36, 20.2625}, {37, 41.475}, {38, 1.25}, {39, 37.1125}, {40, 5}, {41, 8}, {42, 39.65}, {43, 33.2875}, {44, 25.9875}, {45, 22.025}, {46, 27.5875}, {47, 34.5125}, {48, 28.1375}, {49, 39.3875}, {50, 39.6125}, {51, 18.7875}, {52, 20.2}, {53, 30.4625}, {54, 34.9125}, {55, 18.4875}, {56, 14.0125}, {57, 28.175}, {58, 28.9375}, {59, 38.925}, 