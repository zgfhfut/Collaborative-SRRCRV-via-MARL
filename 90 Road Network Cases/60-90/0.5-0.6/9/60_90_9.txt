node_num : 60
demand_node_num : 30
edge_num : 90
damaged_edge_num : 54
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 6, 8, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 39, 40, 41, 42, 44, 45, 47, 48, 50, 53, 54, 57, 59,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 6), Line(0, 38), Line(0, 41), Line(0, 49), Line(1, 16), Line(1, 38), Line(1, 55), Line(2, 6), Line(2, 35), Line(2, 41), Line(3, 7), Line(3, 39), Line(4, 29), Line(4, 58), Line(5, 51), Line(5, 54), Line(6, 33), Line(6, 48), Line(7, 27), Line(7, 29), Line(7, 59), Line(8, 15), Line(8, 25), Line(8, 31), Line(8, 41), Line(8, 57), Line(9, 10), Line(9, 12), Line(9, 46), Line(9, 52), Line(10, 23), Line(10, 29), Line(10, 45), Line(11, 15), Line(11, 24), Line(11, 34), Line(12, 18), Line(12, 40), Line(12, 53), Line(13, 24), Line(13, 29), Line(13, 35), Line(14, 43), Line(14, 51), Line(15, 17), Line(15, 26), Line(15, 28), Line(16, 34), Line(16, 40), Line(16, 42), Line(17, 33), Line(17, 39), Line(18, 41), Line(19, 26), Line(19, 49), Line(19, 54), Line(19, 57), Line(20, 25), Line(20, 26), Line(21, 32), Line(21, 34), Line(21, 55), Line(22, 44), Line(23, 40), Line(23, 48), Line(25, 47), Line(25, 56), Line(26, 36), Line(26, 51), Line(27, 38), Line(27, 50), Line(27, 59), Line(28, 44), Line(30, 36), Line(30, 41), Line(30, 43), Line(30, 56), Line(31, 59), Line(32, 34), Line(33, 56), Line(37, 45), Line(37, 58), Line(40, 48), Line(42, 54), Line(43, 46), Line(45, 51), Line(46, 48), Line(47, 53), Line(50, 52), Line(55, 56),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 38), Line(1, 16), Line(1, 55), Line(2, 6), Line(2, 41), Line(3, 7), Line(4, 29), Line(4, 58), Line(5, 51), Line(6, 33), Line(6, 48), Line(7, 29), Line(7, 59), Line(8, 25), Line(8, 57), Line(9, 10), Line(9, 12), Line(9, 46), Line(9, 52), Line(10, 29), Line(10, 45), Line(11, 15), Line(11, 24), Line(11, 34), Line(12, 40), Line(13, 24), Line(14, 43), Line(15, 17), Line(15, 28), Line(16, 34), Line(16, 42), Line(17, 39), Line(19, 26), Line(19, 49), Line(19, 54), Line(20, 26), Line(21, 32), Line(21, 34), Line(21, 55), Line(22, 44), Line(23, 48), Line(25, 47), Line(25, 56), Line(26, 36), Line(26, 51), Line(27, 59), Line(30, 41), Line(30, 43), Line(32, 34), Line(33, 56), Line(37, 45), Line(43, 46), Line(45, 51), Line(47, 53),  };
const double demand_num_pro = 0.5;
const double damaged_edge_pro = 0.6;
/*********************add_edge*************************/
g.add_edge(0, 6, 8.06);
g.add_edge(0, 38, 12.04);
g.add_edge(0, 41, 8.54);
g.add_edge(0, 49, 2);
g.add_edge(1, 16, 3);
g.add_edge(1, 38, 5.83);
g.add_edge(1, 55, 2.23);
g.add_edge(2, 6, 6.32);
g.add_edge(2, 35, 1);
g.add_edge(2, 41, 2.82);
g.add_edge(3, 7, 1);
g.add_edge(3, 39, 1.41);
g.add_edge(4, 29, 2.23);
g.add_edge(4, 58, 9.43);
g.add_edge(5, 51, 3);
g.add_edge(5, 54, 7.07);
g.add_edge(6, 33, 2.82);
g.add_edge(6, 48, 7.81);
g.add_edge(7, 27, 6.7);
g.add_edge(7, 29, 3.6);
g.add_edge(7, 59, 3);
g.add_edge(8, 15, 4.47);
g.add_edge(8, 25, 6.7);
g.add_edge(8, 31, 6.08);
g.add_edge(8, 41, 4.12);
g.add_edge(8, 57, 7.21);
g.add_edge(9, 10, 8.94);
g.add_edge(9, 12, 3.16);
g.add_edge(9, 46, 6.08);
g.add_edge(9, 52, 3.16);
g.add_edge(10, 23, 4);
g.add_edge(10, 29, 5.83);
g.add_edge(10, 45, 8.06);
g.add_edge(11, 15, 4);
g.add_edge(11, 24, 5.38);
g.add_edge(11, 34, 1);
g.add_edge(12, 18, 3.16);
g.add_edge(12, 40, 2.23);
g.add_edge(12, 53, 3.16);
g.add_edge(13, 24, 5);
g.add_edge(13, 29, 1.41);
g.add_edge(13, 35, 4.47);
g.add_edge(14, 43, 5.09);
g.add_edge(14, 51, 3.16);
g.add_edge(15, 17, 3.16);
g.add_edge(15, 26, 6.4);
g.add_edge(15, 28, 5.83);
g.add_edge(16, 34, 2.23);
g.add_edge(16, 40, 5.38);
g.add_edge(16, 42, 5);
g.add_edge(17, 33, 6.7);
g.add_edge(17, 39, 2);
g.add_edge(18, 41, 5.38);
g.add_edge(19, 26, 6.32);
g.add_edge(19, 49, 5);
g.add_edge(19, 54, 4);
g.add_edge(19, 57, 10.63);
g.add_edge(20, 25, 8.6);
g.add_edge(20, 26, 1.41);
g.add_edge(21, 32, 5.09);
g.add_edge(21, 34, 1.41);
g.add_edge(21, 55, 3);
g.add_edge(22, 44, 5.38);
g.add_edge(23, 40, 1);
g.add_edge(23, 48, 2);
g.add_edge(25, 47, 7.28);
g.add_edge(25, 56, 5.83);
g.add_edge(26, 36, 3.16);
g.add_edge(26, 51, 7);
g.add_edge(27, 38, 9.43);
g.add_edge(27, 50, 4.47);
g.add_edge(27, 59, 4.24);
g.add_edge(28, 44, 8.54);
g.add_edge(30, 36, 5);
g.add_edge(30, 41, 5);
g.add_edge(30, 43, 5.83);
g.add_edge(30, 56, 6.7);
g.add_edge(31, 59, 5.38);
g.add_edge(32, 34, 4);
g.add_edge(33, 56, 5.65);
g.add_edge(37, 45, 5);
g.add_edge(37, 58, 4.47);
g.add_edge(40, 48, 1);
g.add_edge(42, 54, 4);
g.add_edge(43, 46, 6.7);
g.add_edge(45, 51, 7.28);
g.add_edge(46, 48, 2.23);
g.add_edge(47, 53, 10);
g.add_edge(50, 52, 6);
g.add_edge(55, 56, 6.4);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 0);
g.set_importance(6, 4.95);
g.set_importance(7, 0);
g.set_importance(8, 3.39);
g.set_importance(9, 0);
g.set_importance(10, 0);
g.set_importance(11, 9.17);
g.set_importance(12, 3.06);
g.set_importance(13, 1.69);
g.set_importance(14, 8.17);
g.set_importance(15, 9.17);
g.set_importance(16, 0);
g.set_importance(17, 0);
g.set_importance(18, 0);
g.set_importance(19, 0);
g.set_importance(20, 9.34);
g.set_importance(21, 5.4);
g.set_importance(22, 7.33);
g.set_importance(23, 2.83);
g.set_importance(24, 6.81);
g.set_importance(25, 5);
g.set_importance(26, 7.96);
g.set_importance(27, 0);
g.set_importance(28, 7.19);
g.set_importance(29, 0);
g.set_importance(30, 0);
g.set_importance(31, 0);
g.set_importance(32, 0);
g.set_importance(33, 5.37);
g.set_importance(34, 9.3);
g.set_importance(35, 0);
g.set_importance(36, 0);
g.set_importance(37, 0);
g.set_importance(38, 0);
g.set_importance(39, 9.25);
g.set_importance(40, 2.77);
g.set_importance(41, 9.45);
g.set_importance(42, 4.85);
g.set_importance(43, 0);
g.set_importance(44, 4.24);
g.set_importance(45, 5.18);
g.set_importance(46, 0);
g.set_importance(47, 4.36);
g.set_importance(48, 4.85);
g.set_importance(49, 0);
g.set_importance(50, 9.69);
g.set_importance(51, 0);
g.set_importance(52, 0);
g.set_importance(53, 4.98);
g.set_importance(54, 8.75);
g.set_importance(55, 0);
g.set_importance(56, 0);
g.set_importance(57, 7.42);
g.set_importance(58, 0);
g.set_importance(59, 5.45);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 38), 2.92);
g.set_repair_time(Line(1, 16), 1.23);
g.set_repair_time(Line(1, 55), 3.09);
g.set_repair_time(Line(2, 6), 4.91);
g.set_repair_time(Line(2, 41), 1.94);
g.set_repair_time(Line(3, 7), 3.02);
g.set_repair_time(Line(4, 29), 2.84);
g.set_repair_time(Line(4, 58), 1.23);
g.set_repair_time(Line(5, 51), 2.49);
g.set_repair_time(Line(6, 33), 2.35);
g.set_repair_time(Line(6, 48), 3.53);
g.set_repair_time(Line(7, 29), 2.31);
g.set_repair_time(Line(7, 59), 3.91);
g.set_repair_time(Line(8, 25), 4.16);
g.set_repair_time(Line(8, 57), 2.53);
g.set_repair_time(Line(9, 10), 4.03);
g.set_repair_time(Line(9, 12), 2.74);
g.set_repair_time(Line(9, 46), 4.47);
g.set_repair_time(Line(9, 52), 2.74);
g.set_repair_time(Line(10, 29), 3.07);
g.set_repair_time(Line(10, 45), 1.1);
g.set_repair_time(Line(11, 15), 3.14);
g.set_repair_time(Line(11, 24), 2.1);
g.set_repair_time(Line(11, 34), 2.96);
g.set_repair_time(Line(12, 40), 3.26);
g.set_repair_time(Line(13, 24), 1.33);
g.set_repair_time(Line(14, 43), 4.72);
g.set_repair_time(Line(15, 17), 1.9);
g.set_repair_time(Line(15, 28), 3.54);
g.set_repair_time(Line(16, 34), 2.4);
g.set_repair_time(Line(16, 42), 2.18);
g.set_repair_time(Line(17, 39), 1.66);
g.set_repair_time(Line(19, 26), 1.88);
g.set_repair_time(Line(19, 49), 2.82);
g.set_repair_time(Line(19, 54), 4.51);
g.set_repair_time(Line(20, 26), 1.85);
g.set_repair_time(Line(21, 32), 3.77);
g.set_repair_time(Line(21, 34), 4.55);
g.set_repair_time(Line(21, 55), 2.47);
g.set_repair_time(Line(22, 44), 3.86);
g.set_repair_time(Line(23, 48), 1.71);
g.set_repair_time(Line(25, 47), 1.13);
g.set_repair_time(Line(25, 56), 3.41);
g.set_repair_time(Line(26, 36), 1.78);
g.set_repair_time(Line(26, 51), 1.2);
g.set_repair_time(Line(27, 59), 4.23);
g.set_repair_time(Line(30, 41), 2.67);
g.set_repair_time(Line(30, 43), 3.17);
g.set_repair_time(Line(32, 34), 2.68);
g.set_repair_time(Line(33, 56), 4.04);
g.set_repair_time(Line(37, 45), 4.11);
g.set_repair_time(Line(43, 46), 1.59);
g.set_repair_time(Line(45, 51), 2.64);
g.set_repair_time(Line(47, 53), 2.28);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 22.3375}, {2, 14.2}, {3, 26.2375}, {4, 25.5875}, {5, 22.5875}, {6, 10.075}, {7, 27.3}, {8, 15.825}, {9, 25.3}, {10, 27.3375}, {11, 26.4125}, {12, 21.35}, {13, 21.0375}, {14, 29.35}, {15, 21.4125}, {16, 25}, {17, 21.975}, {18, 17.4}, {19, 8.75}, {20, 18.4125}, {21, 28.875}, {22, 46.1}, {23, 22.3375}, {24, 27.2875}, {25, 24.2}, {26, 16.65}, {27, 26.8375}, {28, 28.7}, {29, 22.8}, {30, 16.925}, {31, 23.425}, {32, 32.6625}, {33, 13.6}, {34, 27.6625}, {35, 15.45}, {36, 20.6}, {37, 40.75}, {38, 15.05}, {39, 24.475}, {40, 21.0875}, {41, 10.675}, {42, 18.75}, {43, 24.2125}, {44, 39.375}, {45, 34.5}, {46, 22.625}, {47, 33.3}, {48, 19.8375}, {49, 2.5}, {50, 32.425}, {51, 25.4}, {52, 29.25}, {53, 25.3}, {54, 13.75}, {55, 25.125}, {56, 20.6625}, {57, 22.0375}, {58, 37.375}, {59, 30.15}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 22.3375}, {1, 0}, {2, 27.05}, {3, 21}, {4, 25.3125}, {5, 23.8375}, {6, 21.375}, {7, 22.25}, {8, 18.375}, {9, 17.2125}, {10, 16.725}, {11, 7.7875}, {12, 13.2625}, {13, 20.7625}, {14, 29.25}, {15, 12.7875}, {16, 3.75}, {17, 16.7375}, {18, 17.2125}, {19, 20}, {20, 22.55}, {21, 6.5375}, {22, 37.475}, {23, 11.725}, {24, 14.5125}, {25, 18.075}, {26, 20.7875}, {27, 19.075}, {28, 20.075}, {29, 22.525}, {30, 19.1625}, {31, 25.975}, {32, 11.5375}, {33, 17.85}, {34, 6.5375}, {35, 26.35}, {36, 24.7375}, {37, 33.05}, {38, 7.2875}, {39, 19.2375}, {40, 10.475}, {41, 23.525}, {42, 10}, {43, 22.8875}, {44, 30.75}, {45, 26.8}, {46, 14.5125}, {47, 27.175}, {48, 11.725}, {49, 24.8375}, {50, 24.6625}, {51, 27.5875}, {52, 21.1625}, {53, 17.2125}, {54, 15}, {55, 2.7875}, {56, 10.7875}, {57, 27.3875}, {58, 37.1}, {59, 24.375}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 14.2}, {1, 27.05}, {2, 0}, {3, 14.35}, {4, 11.3875}, {5, 31.125}, {6, 7.9}, {7, 13.1}, {8, 8.675}, {9, 18.15}, {10, 15.8875}, {11, 19.2625}, {12, 14.2}, {13, 6.8375}, {14, 23.425}, {15, 14.2625}, {16, 23.3}, {17, 18.2125}, {18, 10.25}, {19, 22.95}, {20, 21.7375}, {21, 22.275}, {22, 38.95}, {23, 18.2375}, {24, 13.0875}, {25, 17.05}, {26, 19.975}, {27, 21.475}, {28, 21.55}, {29, 8.6}, {30, 9.775}, {31, 16.275}, {32, 25.5125}, {33, 11.425}, {34, 20.5125}, {35, 1.25}, {36, 16.025}, {37, 28.7625}, {38, 29.25}, {39, 16.1125}, {40, 16.9875}, {41, 3.525}, {42, 29.55}, {43, 17.0625}, {44, 32.225}, {45, 25.9625}, {46, 20.45}, {47, 26.15}, {48, 17.6625}, {49, 16.7}, {50, 27.0625}, {51, 27.375}, {52, 22.1}, {53, 18.15}, {54, 27.95}, {55, 26.025}, {56, 18.15}, {57, 17.6875}, {58, 23.175}, {59, 16.85}, 