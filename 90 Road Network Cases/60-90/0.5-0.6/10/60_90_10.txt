node_num : 60
demand_node_num : 30
edge_num : 90
damaged_edge_num : 54
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 6, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 34, 39, 42, 45, 46, 48, 54, 56, 57,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 29), Line(0, 30), Line(0, 49), Line(1, 30), Line(1, 45), Line(1, 55), Line(2, 10), Line(2, 16), Line(2, 36), Line(2, 45), Line(3, 42), Line(3, 58), Line(3, 59), Line(4, 34), Line(4, 56), Line(5, 19), Line(5, 24), Line(5, 51), Line(5, 55), Line(6, 11), Line(6, 27), Line(6, 57), Line(7, 17), Line(7, 34), Line(8, 17), Line(8, 18), Line(9, 10), Line(9, 24), Line(9, 41), Line(9, 44), Line(10, 45), Line(11, 25), Line(11, 52), Line(12, 30), Line(12, 40), Line(12, 54), Line(13, 23), Line(13, 26), Line(13, 30), Line(13, 51), Line(13, 58), Line(14, 19), Line(14, 49), Line(15, 39), Line(15, 52), Line(15, 53), Line(16, 20), Line(17, 32), Line(18, 37), Line(19, 57), Line(20, 26), Line(20, 34), Line(21, 31), Line(21, 51), Line(21, 59), Line(22, 44), Line(22, 46), Line(23, 24), Line(23, 33), Line(24, 28), Line(24, 41), Line(25, 35), Line(25, 40), Line(26, 47), Line(27, 43), Line(28, 35), Line(29, 43), Line(29, 59), Line(30, 53), Line(30, 56), Line(31, 58), Line(32, 41), Line(32, 50), Line(33, 46), Line(34, 50), Line(35, 48), Line(36, 45), Line(36, 59), Line(37, 38), Line(38, 47), Line(39, 48), Line(39, 55), Line(42, 53), Line(42, 58), Line(44, 52), Line(45, 54), Line(47, 51), Line(48, 50), Line(53, 55), Line(54, 56),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 30), Line(0, 49), Line(1, 30), Line(1, 45), Line(2, 10), Line(2, 16), Line(2, 45), Line(3, 42), Line(3, 58), Line(4, 34), Line(5, 19), Line(5, 24), Line(5, 51), Line(6, 11), Line(6, 27), Line(7, 17), Line(8, 17), Line(9, 24), Line(9, 41), Line(9, 44), Line(11, 25), Line(12, 30), Line(12, 54), Line(13, 23), Line(13, 30), Line(13, 58), Line(14, 19), Line(14, 49), Line(15, 52), Line(17, 32), Line(19, 57), Line(21, 59), Line(22, 46), Line(23, 24), Line(23, 33), Line(24, 41), Line(25, 40), Line(26, 47), Line(28, 35), Line(29, 43), Line(29, 59), Line(30, 53), Line(30, 56), Line(31, 58), Line(32, 41), Line(36, 45), Line(38, 47), Line(39, 55), Line(42, 58), Line(45, 54), Line(47, 51), Line(48, 50), Line(53, 55), Line(54, 56),  };
const double demand_num_pro = 0.5;
const double damaged_edge_pro = 0.6;
/*********************add_edge*************************/
g.add_edge(0, 29, 3.6);
g.add_edge(0, 30, 6.4);
g.add_edge(0, 49, 4.12);
g.add_edge(1, 30, 5.38);
g.add_edge(1, 45, 2);
g.add_edge(1, 55, 7.21);
g.add_edge(2, 10, 6.08);
g.add_edge(2, 16, 5.38);
g.add_edge(2, 36, 7.81);
g.add_edge(2, 45, 4.12);
g.add_edge(3, 42, 5.09);
g.add_edge(3, 58, 5.38);
g.add_edge(3, 59, 4.12);
g.add_edge(4, 34, 9.21);
g.add_edge(4, 56, 7.28);
g.add_edge(5, 19, 3.16);
g.add_edge(5, 24, 6.7);
g.add_edge(5, 51, 6.32);
g.add_edge(5, 55, 5);
g.add_edge(6, 11, 6.08);
g.add_edge(6, 27, 5.38);
g.add_edge(6, 57, 6.32);
g.add_edge(7, 17, 6.7);
g.add_edge(7, 34, 5.38);
g.add_edge(8, 17, 7.61);
g.add_edge(8, 18, 6.7);
g.add_edge(9, 10, 6.4);
g.add_edge(9, 24, 5);
g.add_edge(9, 41, 6.08);
g.add_edge(9, 44, 5.38);
g.add_edge(10, 45, 7.07);
g.add_edge(11, 25, 1.41);
g.add_edge(11, 52, 7.28);
g.add_edge(12, 30, 10.63);
g.add_edge(12, 40, 4);
g.add_edge(12, 54, 8.94);
g.add_edge(13, 23, 7.07);
g.add_edge(13, 26, 1);
g.add_edge(13, 30, 4.24);
g.add_edge(13, 51, 4);
g.add_edge(13, 58, 2.82);
g.add_edge(14, 19, 2);
g.add_edge(14, 49, 1.41);
g.add_edge(15, 39, 10.63);
g.add_edge(15, 52, 12.04);
g.add_edge(15, 53, 10);
g.add_edge(16, 20, 2.82);
g.add_edge(17, 32, 1);
g.add_edge(18, 37, 5.38);
g.add_edge(19, 57, 5);
g.add_edge(20, 26, 4.47);
g.add_edge(20, 34, 5.38);
g.add_edge(21, 31, 9.84);
g.add_edge(21, 51, 9.48);
g.add_edge(21, 59, 7.07);
g.add_edge(22, 44, 7.21);
g.add_edge(22, 46, 8.06);
g.add_edge(23, 24, 10.81);
g.add_edge(23, 33, 5.09);
g.add_edge(24, 28, 6);
g.add_edge(24, 41, 9.48);
g.add_edge(25, 35, 2);
g.add_edge(25, 40, 5);
g.add_edge(26, 47, 6.08);
g.add_edge(27, 43, 4.24);
g.add_edge(28, 35, 2.23);
g.add_edge(29, 43, 7.21);
g.add_edge(29, 59, 7.07);
g.add_edge(30, 53, 5.09);
g.add_edge(30, 56, 5.09);
g.add_edge(31, 58, 2.23);
g.add_edge(32, 41, 4.24);
g.add_edge(32, 50, 4.12);
g.add_edge(33, 46, 1.41);
g.add_edge(34, 50, 5.83);
g.add_edge(35, 48, 3.16);
g.add_edge(36, 45, 4.47);
g.add_edge(36, 59, 8.06);
g.add_edge(37, 38, 4.47);
g.add_edge(38, 47, 5.83);
g.add_edge(39, 48, 9.21);
g.add_edge(39, 55, 10);
g.add_edge(42, 53, 6.4);
g.add_edge(42, 58, 1);
g.add_edge(44, 52, 8.94);
g.add_edge(45, 54, 7.07);
g.add_edge(47, 51, 5.83);
g.add_edge(48, 50, 4.47);
g.add_edge(53, 55, 9.84);
g.add_edge(54, 56, 2.23);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 0);
g.set_importance(6, 4.84);
g.set_importance(7, 2.5);
g.set_importance(8, 2.5);
g.set_importance(9, 4.05);
g.set_importance(10, 2.72);
g.set_importance(11, 5.04);
g.set_importance(12, 1.09);
g.set_importance(13, 6.1);
g.set_importance(14, 0);
g.set_importance(15, 0);
g.set_importance(16, 6.33);
g.set_importance(17, 0);
g.set_importance(18, 2.62);
g.set_importance(19, 3.22);
g.set_importance(20, 2.69);
g.set_importance(21, 2.7);
g.set_importance(22, 5.85);
g.set_importance(23, 5.49);
g.set_importance(24, 8.77);
g.set_importance(25, 4.99);
g.set_importance(26, 6.11);
g.set_importance(27, 0);
g.set_importance(28, 6.35);
g.set_importance(29, 9.07);
g.set_importance(30, 5.16);
g.set_importance(31, 0);
g.set_importance(32, 0);
g.set_importance(33, 0);
g.set_importance(34, 7.88);
g.set_importance(35, 0);
g.set_importance(36, 0);
g.set_importance(37, 0);
g.set_importance(38, 0);
g.set_importance(39, 4.15);
g.set_importance(40, 0);
g.set_importance(41, 0);
g.set_importance(42, 7.31);
g.set_importance(43, 0);
g.set_importance(44, 0);
g.set_importance(45, 7.86);
g.set_importance(46, 5.46);
g.set_importance(47, 0);
g.set_importance(48, 7.9);
g.set_importance(49, 0);
g.set_importance(50, 0);
g.set_importance(51, 0);
g.set_importance(52, 0);
g.set_importance(53, 0);
g.set_importance(54, 9.43);
g.set_importance(55, 0);
g.set_importance(56, 6.01);
g.set_importance(57, 4.27);
g.set_importance(58, 0);
g.set_importance(59, 0);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 30), 3.46);
g.set_repair_time(Line(0, 49), 4.68);
g.set_repair_time(Line(1, 30), 4.15);
g.set_repair_time(Line(1, 45), 2.52);
g.set_repair_time(Line(2, 10), 3.3);
g.set_repair_time(Line(2, 16), 4.83);
g.set_repair_time(Line(2, 45), 2.63);
g.set_repair_time(Line(3, 42), 2.33);
g.set_repair_time(Line(3, 58), 2.83);
g.set_repair_time(Line(4, 34), 2.73);
g.set_repair_time(Line(5, 19), 1.88);
g.set_repair_time(Line(5, 24), 1.41);
g.set_repair_time(Line(5, 51), 1.4);
g.set_repair_time(Line(6, 11), 1.81);
g.set_repair_time(Line(6, 27), 4.96);
g.set_repair_time(Line(7, 17), 4.64);
g.set_repair_time(Line(8, 17), 1.21);
g.set_repair_time(Line(9, 24), 3.99);
g.set_repair_time(Line(9, 41), 2.33);
g.set_repair_time(Line(9, 44), 3.98);
g.set_repair_time(Line(11, 25), 4.49);
g.set_repair_time(Line(12, 30), 1.34);
g.set_repair_time(Line(12, 54), 1.67);
g.set_repair_time(Line(13, 23), 3.07);
g.set_repair_time(Line(13, 30), 1.98);
g.set_repair_time(Line(13, 58), 1.05);
g.set_repair_time(Line(14, 19), 3.19);
g.set_repair_time(Line(14, 49), 4.24);
g.set_repair_time(Line(15, 52), 3.57);
g.set_repair_time(Line(17, 32), 1.7);
g.set_repair_time(Line(19, 57), 1.57);
g.set_repair_time(Line(21, 59), 2.57);
g.set_repair_time(Line(22, 46), 4.98);
g.set_repair_time(Line(23, 24), 2.14);
g.set_repair_time(Line(23, 33), 2.72);
g.set_repair_time(Line(24, 41), 2.72);
g.set_repair_time(Line(25, 40), 1.95);
g.set_repair_time(Line(26, 47), 2.44);
g.set_repair_time(Line(28, 35), 2.01);
g.set_repair_time(Line(29, 43), 1.59);
g.set_repair_time(Line(29, 59), 4.37);
g.set_repair_time(Line(30, 53), 3.13);
g.set_repair_time(Line(30, 56), 1.2);
g.set_repair_time(Line(31, 58), 1.16);
g.set_repair_time(Line(32, 41), 4.91);
g.set_repair_time(Line(36, 45), 2.3);
g.set_repair_time(Line(38, 47), 4.79);
g.set_repair_time(Line(39, 55), 2.03);
g.set_repair_time(Line(42, 58), 4.95);
g.set_repair_time(Line(45, 54), 2.24);
g.set_repair_time(Line(47, 51), 3.79);
g.set_repair_time(Line(48, 50), 2.23);
g.set_repair_time(Line(53, 55), 2.78);
g.set_repair_time(Line(54, 56), 1.32);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 14.725}, {2, 22.375}, {3, 18.4875}, {4, 23.4625}, {5, 13.3625}, {6, 23.5625}, {7, 33.5875}, {8, 49.65}, {9, 27.9875}, {10, 26.0625}, {11, 31.1625}, {12, 21.2875}, {13, 13.3}, {14, 6.9125}, {15, 26.8625}, {16, 23.6625}, {17, 40.1375}, {18, 41.75}, {19, 9.4125}, {20, 20.1375}, {21, 22.175}, {22, 40.3375}, {23, 22.1375}, {24, 21.7375}, {25, 32.5375}, {26, 14.55}, {27, 18.8125}, {28, 29.2375}, {29, 4.5}, {30, 8}, {31, 19.6125}, {32, 38.8875}, {33, 28.5}, {34, 26.8625}, {35, 32.025}, {36, 22.8125}, {37, 35.025}, {38, 29.4375}, {39, 32.1125}, {40, 26.2875}, {41, 33.5875}, {42, 18.075}, {43, 13.5125}, {44, 34.7125}, {45, 17.225}, {46, 30.2625}, {47, 22.15}, {48, 35.975}, {49, 5.15}, {50, 34.15}, {51, 18.3}, {52, 40.2625}, {53, 14.3625}, {54, 17.15}, {55, 19.6125}, {56, 14.3625}, {57, 15.6625}, {58, 16.825}, {59, 13.3375}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 14.725}, {1, 0}, {2, 7.65}, {3, 22.275}, {4, 22.1875}, {5, 15.2625}, {6, 33.3625}, {7, 31.35}, {8, 43}, {9, 19.3375}, {10, 11.3375}, {11, 33.025}, {12, 20.0125}, {13, 12.025}, {14, 21.6375}, {15, 25.5875}, {16, 14.375}, {17, 33.4875}, {18, 40.475}, {19, 19.2125}, {20, 17.9}, {21, 27}, {22, 35.075}, {23, 20.8625}, {24, 23.6375}, {25, 31.2625}, {26, 13.275}, {27, 33.5375}, {28, 31.1375}, {29, 19.225}, {30, 6.725}, {31, 18.3375}, {32, 32.2375}, {33, 27.225}, {34, 24.625}, {35, 33.7625}, {36, 8.0875}, {37, 33.75}, {38, 28.1625}, {39, 21.5125}, {40, 25.0125}, {41, 26.9375}, {42, 16.8}, {43, 28.2375}, {44, 26.0625}, {45, 2.5}, {46, 28.9875}, {47, 20.875}, {48, 33.025}, {49, 19.875}, {50, 31.9125}, {51, 17.025}, {52, 37.2375}, {53, 13.0875}, {54, 11.3375}, {55, 9.0125}, {56, 13.0875}, {57, 25.4625}, {58, 15.55}, {59, 18.1625}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 22.375}, {1, 7.65}, {2, 0}, {3, 24.9875}, {4, 25.875}, {5, 22.9125}, {6, 41.0125}, {7, 23.7}, {8, 39.2625}, {9, 15.6}, {10, 7.6}, {11, 36.4}, {12, 25.1625}, {13, 17.0875}, {14, 29.2875}, {15, 33.2375}, {16, 6.725}, {17, 29.75}, {18, 43.0375}, {19, 26.8625}, {20, 10.25}, {21, 28.675}, {22, 31.3375}, {23, 25.925}, {24, 21.85}, {25, 34.6375}, {26, 15.8375}, {27, 41.1875}, {28, 29.35}, {29, 26.875}, {30, 14.375}, {31, 23.4}, {32, 28.5}, {33, 32.2875}, {34, 16.975}, {35, 32.1375}, {36, 9.7625}, {37, 36.3125}, {38, 30.725}, {39, 29.1625}, {40, 30.1625}, {41, 23.2}, {42, 21.8625}, {43, 35.8875}, {44, 22.325}, {45, 5.15}, {46, 34.05}, {47, 23.4375}, {48, 29.85}, {49, 27.525}, {50, 24.2625}, {51, 22.0875}, {52, 33.5}, {53, 20.7375}, {54, 13.9875}, {55, 16.6625}, {56, 16.775}, {57, 33.1125}, {58, 20.6125}, {59, 19.8375}, 