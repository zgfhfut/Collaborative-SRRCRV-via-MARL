node_num : 60
demand_node_num : 30
edge_num : 90
damaged_edge_num : 54
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 5, 6, 8, 9, 12, 14, 15, 18, 21, 23, 24, 26, 29, 30, 32, 33, 34, 36, 38, 41, 43, 44, 45, 47, 48, 49, 50, 52, 53, 59,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 2), Line(0, 9), Line(0, 16), Line(0, 18), Line(0, 50), Line(0, 57), Line(1, 31), Line(1, 49), Line(2, 38), Line(2, 57), Line(3, 23), Line(3, 39), Line(4, 5), Line(4, 38), Line(5, 13), Line(5, 39), Line(6, 7), Line(6, 22), Line(7, 15), Line(7, 48), Line(8, 11), Line(8, 28), Line(8, 34), Line(8, 41), Line(8, 45), Line(8, 53), Line(9, 10), Line(9, 30), Line(9, 42), Line(10, 43), Line(11, 18), Line(12, 20), Line(12, 48), Line(13, 23), Line(14, 32), Line(14, 52), Line(15, 41), Line(15, 43), Line(15, 47), Line(16, 37), Line(16, 39), Line(17, 37), Line(17, 52), Line(17, 54), Line(18, 21), Line(18, 33), Line(19, 20), Line(19, 21), Line(20, 29), Line(20, 57), Line(22, 25), Line(22, 28), Line(23, 28), Line(24, 56), Line(24, 59), Line(25, 28), Line(26, 27), Line(26, 41), Line(26, 42), Line(27, 40), Line(28, 42), Line(29, 51), Line(29, 55), Line(30, 36), Line(31, 46), Line(32, 37), Line(32, 38), Line(32, 41), Line(32, 44), Line(33, 44), Line(34, 37), Line(34, 50), Line(35, 36), Line(35, 47), Line(36, 38), Line(37, 43), Line(38, 47), Line(39, 43), Line(40, 50), Line(42, 51), Line(43, 46), Line(43, 59), Line(45, 54), Line(45, 58), Line(46, 56), Line(48, 50), Line(48, 58), Line(49, 54), Line(53, 55), Line(55, 56),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 16), Line(0, 50), Line(1, 31), Line(1, 49), Line(2, 57), Line(3, 23), Line(4, 5), Line(5, 13), Line(6, 7), Line(6, 22), Line(7, 15), Line(7, 48), Line(8, 11), Line(8, 34), Line(8, 41), Line(8, 45), Line(8, 53), Line(9, 30), Line(9, 42), Line(10, 43), Line(11, 18), Line(12, 20), Line(12, 48), Line(14, 32), Line(14, 52), Line(15, 41), Line(15, 43), Line(15, 47), Line(16, 39), Line(18, 21), Line(20, 57), Line(22, 28), Line(23, 28), Line(25, 28), Line(26, 41), Line(26, 42), Line(27, 40), Line(28, 42), Line(30, 36), Line(31, 46), Line(32, 37), Line(32, 41), Line(32, 44), Line(37, 43), Line(39, 43), Line(40, 50), Line(43, 46), Line(45, 54), Line(45, 58), Line(46, 56), Line(48, 58), Line(49, 54), Line(53, 55), Line(55, 56),  };
const double demand_num_pro = 0.5;
const double damaged_edge_pro = 0.6;
/*********************add_edge*************************/
g.add_edge(0, 2, 6.08);
g.add_edge(0, 9, 3.16);
g.add_edge(0, 16, 4.47);
g.add_edge(0, 18, 5);
g.add_edge(0, 50, 3.6);
g.add_edge(0, 57, 2.23);
g.add_edge(1, 31, 9.43);
g.add_edge(1, 49, 8.48);
g.add_edge(2, 38, 6);
g.add_edge(2, 57, 5.09);
g.add_edge(3, 23, 7.21);
g.add_edge(3, 39, 1.41);
g.add_edge(4, 5, 6.4);
g.add_edge(4, 38, 4.47);
g.add_edge(5, 13, 8);
g.add_edge(5, 39, 4.24);
g.add_edge(6, 7, 5.38);
g.add_edge(6, 22, 3);
g.add_edge(7, 15, 1.41);
g.add_edge(7, 48, 4.12);
g.add_edge(8, 11, 2.23);
g.add_edge(8, 28, 4);
g.add_edge(8, 34, 4.47);
g.add_edge(8, 41, 5.09);
g.add_edge(8, 45, 2);
g.add_edge(8, 53, 1);
g.add_edge(9, 10, 3.16);
g.add_edge(9, 30, 3.6);
g.add_edge(9, 42, 6.4);
g.add_edge(10, 43, 1);
g.add_edge(11, 18, 9.48);
g.add_edge(12, 20, 3.16);
g.add_edge(12, 48, 5.09);
g.add_edge(13, 23, 8.94);
g.add_edge(14, 32, 2.82);
g.add_edge(14, 52, 3.6);
g.add_edge(15, 41, 4.47);
g.add_edge(15, 43, 5.38);
g.add_edge(15, 47, 4.12);
g.add_edge(16, 37, 7.07);
g.add_edge(16, 39, 5.09);
g.add_edge(17, 37, 5);
g.add_edge(17, 52, 8.94);
g.add_edge(17, 54, 8.94);
g.add_edge(18, 21, 2.23);
g.add_edge(18, 33, 4.24);
g.add_edge(19, 20, 3.16);
g.add_edge(19, 21, 6.08);
g.add_edge(20, 29, 7.28);
g.add_edge(20, 57, 3.16);
g.add_edge(22, 25, 5.09);
g.add_edge(22, 28, 5.65);
g.add_edge(23, 28, 6);
g.add_edge(24, 56, 2);
g.add_edge(24, 59, 1);
g.add_edge(25, 28, 3.16);
g.add_edge(26, 27, 8.06);
g.add_edge(26, 41, 10);
g.add_edge(26, 42, 7.81);
g.add_edge(27, 40, 9);
g.add_edge(28, 42, 1);
g.add_edge(29, 51, 5.65);
g.add_edge(29, 55, 7);
g.add_edge(30, 36, 5);
g.add_edge(31, 46, 6.4);
g.add_edge(32, 37, 5.65);
g.add_edge(32, 38, 4.12);
g.add_edge(32, 41, 2);
g.add_edge(32, 44, 7.28);
g.add_edge(33, 44, 9.05);
g.add_edge(34, 37, 5.09);
g.add_edge(34, 50, 5);
g.add_edge(35, 36, 4.12);
g.add_edge(35, 47, 4.47);
g.add_edge(36, 38, 2.23);
g.add_edge(37, 43, 2.23);
g.add_edge(38, 47, 4.47);
g.add_edge(39, 43, 7.28);
g.add_edge(40, 50, 3.6);
g.add_edge(42, 51, 3.6);
g.add_edge(43, 46, 7.07);
g.add_edge(43, 59, 7.21);
g.add_edge(45, 54, 3);
g.add_edge(45, 58, 7.21);
g.add_edge(46, 56, 3.6);
g.add_edge(48, 50, 1.41);
g.add_edge(48, 58, 5.38);
g.add_edge(49, 54, 6.32);
g.add_edge(53, 55, 6.32);
g.add_edge(55, 56, 6.08);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 8.13);
g.set_importance(6, 1.56);
g.set_importance(7, 0);
g.set_importance(8, 1.6);
g.set_importance(9, 9.49);
g.set_importance(10, 0);
g.set_importance(11, 0);
g.set_importance(12, 5.58);
g.set_importance(13, 0);
g.set_importance(14, 2.63);
g.set_importance(15, 9.79);
g.set_importance(16, 0);
g.set_importance(17, 0);
g.set_importance(18, 9.73);
g.set_importance(19, 0);
g.set_importance(20, 0);
g.set_importance(21, 4.78);
g.set_importance(22, 0);
g.set_importance(23, 2.14);
g.set_importance(24, 2.71);
g.set_importance(25, 0);
g.set_importance(26, 4.85);
g.set_importance(27, 0);
g.set_importance(28, 0);
g.set_importance(29, 4.38);
g.set_importance(30, 5.91);
g.set_importance(31, 0);
g.set_importance(32, 5.54);
g.set_importance(33, 3.99);
g.set_importance(34, 8.65);
g.set_importance(35, 0);
g.set_importance(36, 4.92);
g.set_importance(37, 0);
g.set_importance(38, 9.33);
g.set_importance(39, 0);
g.set_importance(40, 0);
g.set_importance(41, 5.26);
g.set_importance(42, 0);
g.set_importance(43, 6.05);
g.set_importance(44, 5.62);
g.set_importance(45, 7.01);
g.set_importance(46, 0);
g.set_importance(47, 2.05);
g.set_importance(48, 5.25);
g.set_importance(49, 1.94);
g.set_importance(50, 2.15);
g.set_importance(51, 0);
g.set_importance(52, 1.2);
g.set_importance(53, 6.72);
g.set_importance(54, 0);
g.set_importance(55, 0);
g.set_importance(56, 0);
g.set_importance(57, 0);
g.set_importance(58, 0);
g.set_importance(59, 6);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 16), 1.18);
g.set_repair_time(Line(0, 50), 2.23);
g.set_repair_time(Line(1, 31), 4.67);
g.set_repair_time(Line(1, 49), 4.46);
g.set_repair_time(Line(2, 57), 1.31);
g.set_repair_time(Line(3, 23), 2.65);
g.set_repair_time(Line(4, 5), 4.94);
g.set_repair_time(Line(5, 13), 3.76);
g.set_repair_time(Line(6, 7), 4.18);
g.set_repair_time(Line(6, 22), 3.08);
g.set_repair_time(Line(7, 15), 4.74);
g.set_repair_time(Line(7, 48), 2.82);
g.set_repair_time(Line(8, 11), 4.45);
g.set_repair_time(Line(8, 34), 3.59);
g.set_repair_time(Line(8, 41), 4.85);
g.set_repair_time(Line(8, 45), 3.38);
g.set_repair_time(Line(8, 53), 1.36);
g.set_repair_time(Line(9, 30), 3.63);
g.set_repair_time(Line(9, 42), 2.72);
g.set_repair_time(Line(10, 43), 1.8);
g.set_repair_time(Line(11, 18), 2.9);
g.set_repair_time(Line(12, 20), 2.81);
g.set_repair_time(Line(12, 48), 2.56);
g.set_repair_time(Line(14, 32), 3.67);
g.set_repair_time(Line(14, 52), 1.02);
g.set_repair_time(Line(15, 41), 4.46);
g.set_repair_time(Line(15, 43), 3.94);
g.set_repair_time(Line(15, 47), 1.19);
g.set_repair_time(Line(16, 39), 2.87);
g.set_repair_time(Line(18, 21), 1.05);
g.set_repair_time(Line(20, 57), 2.58);
g.set_repair_time(Line(22, 28), 3.51);
g.set_repair_time(Line(23, 28), 4.74);
g.set_repair_time(Line(25, 28), 2.19);
g.set_repair_time(Line(26, 41), 2.08);
g.set_repair_time(Line(26, 42), 1.24);
g.set_repair_time(Line(27, 40), 2.67);
g.set_repair_time(Line(28, 42), 3.99);
g.set_repair_time(Line(30, 36), 2.13);
g.set_repair_time(Line(31, 46), 2.57);
g.set_repair_time(Line(32, 37), 3.59);
g.set_repair_time(Line(32, 41), 2.47);
g.set_repair_time(Line(32, 44), 4.95);
g.set_repair_time(Line(37, 43), 4.04);
g.set_repair_time(Line(39, 43), 3.2);
g.set_repair_time(Line(40, 50), 4.73);
g.set_repair_time(Line(43, 46), 3.59);
g.set_repair_time(Line(45, 54), 2.08);
g.set_repair_time(Line(45, 58), 1.55);
g.set_repair_time(Line(46, 56), 3.31);
g.set_repair_time(Line(48, 58), 4.56);
g.set_repair_time(Line(49, 54), 3.02);
g.set_repair_time(Line(53, 55), 1.47);
g.set_repair_time(Line(55, 56), 2.03);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 37.775}, {2, 7.6}, {3, 13.7125}, {4, 20.6875}, {5, 17.25}, {6, 18.1375}, {7, 11.4125}, {8, 16.3375}, {9, 3.95}, {10, 7.9}, {11, 18.1}, {12, 10.6875}, {13, 27.25}, {14, 22.525}, {15, 13.175}, {16, 5.5875}, {17, 18.1875}, {18, 6.25}, {19, 10.6875}, {20, 6.7375}, {21, 9.0375}, {22, 20.2625}, {23, 20.7}, {24, 19.4125}, {25, 17.15}, {26, 21.7125}, {27, 20.25}, {28, 13.2}, {29, 15.8375}, {30, 8.45}, {31, 25.9875}, {32, 19}, {33, 11.55}, {34, 10.75}, {35, 19.85}, {36, 14.7}, {37, 11.9375}, {38, 15.1}, {39, 11.95}, {40, 9}, {41, 18.7625}, {42, 11.95}, {43, 9.15}, {44, 22.8625}, {45, 18.8375}, {46, 17.9875}, {47, 18.325}, {48, 6.2625}, {49, 30.4875}, {50, 4.5}, {51, 16.45}, {52, 27.025}, {53, 17.5875}, {54, 22.5875}, {55, 24.5875}, {56, 21.9125}, {57, 2.7875}, {58, 12.9875}, {59, 18.1625}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 37.775}, {1, 0}, {2, 45.375}, {3, 39.4875}, {4, 44.35}, {5, 43.025}, {6, 40.5625}, {7, 37.1125}, {8, 24.75}, {9, 33.825}, {10, 29.875}, {11, 27.5375}, {12, 44.35}, {13, 48.425}, {14, 37.1375}, {15, 35.35}, {16, 40.25}, {17, 29.675}, {18, 39.3875}, {19, 48.4625}, {20, 44.5125}, {21, 42.175}, {22, 36.8125}, {23, 37.25}, {24, 26.7875}, {25, 33.7}, {26, 40.7625}, {27, 50.8375}, {28, 29.75}, {29, 40.6375}, {30, 38.325}, {31, 11.7875}, {32, 33.6125}, {33, 44.6875}, {34, 30.3375}, {35, 46.0875}, {36, 41.55}, {37, 31.4125}, {38, 38.7625}, {39, 37.725}, {40, 41.0875}, {41, 31.1125}, {42, 31}, {43, 28.625}, {44, 42.7125}, {45, 22.25}, {46, 19.7875}, {47, 40.5}, {48, 37.9875}, {49, 10.6}, {50, 36.5875}, {51, 35.5}, {52, 40.85}, {53, 26}, {54, 18.5}, {55, 31.8875}, {56, 24.2875}, {57, 40.5625}, {58, 31.2625}, {59, 28.0375}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 7.6}, {1, 45.375}, {2, 0}, {3, 21.3125}, {4, 13.0875}, {5, 21.0875}, {6, 25.7375}, {7, 19.0125}, {8, 21.5125}, {9, 11.55}, {10, 15.5}, {11, 24.3}, {12, 14.2625}, {13, 31.0875}, {14, 16.175}, {15, 18.2375}, {16, 13.1875}, {17, 25.7875}, {18, 13.85}, {19, 14.2625}, {20, 10.3125}, {21, 16.6375}, {22, 27.8625}, {23, 28.3}, {24, 27.0125}, {25, 24.75}, {26, 27.65}, {27, 27.85}, {28, 20.8}, {29, 19.4125}, {30, 16.05}, {31, 33.5875}, {32, 12.65}, {33, 19.15}, {34, 18.35}, {35, 15.4375}, {36, 10.2875}, {37, 19.5375}, {38, 7.5}, {39, 19.55}, {40, 16.6}, {41, 15.15}, {42, 19.55}, {43, 16.75}, {44, 21.75}, {45, 24.0125}, {46, 25.5875}, {47, 13.0875}, {48, 13.8625}, {49, 35.6625}, {50, 12.1}, {51, 24.05}, {52, 20.675}, {53, 22.7625}, {54, 27.7625}, {55, 28.1625}, {56, 29.5125}, {57, 6.3625}, {58, 20.5875}, {59, 25.7625}, 