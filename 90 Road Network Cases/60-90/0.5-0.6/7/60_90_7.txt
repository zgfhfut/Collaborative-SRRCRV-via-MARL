node_num : 60
demand_node_num : 30
edge_num : 90
damaged_edge_num : 54
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 5, 12, 13, 16, 19, 21, 24, 25, 26, 27, 28, 29, 30, 33, 36, 37, 38, 39, 42, 44, 45, 46, 49, 51, 52, 53, 54, 55, 56, 59,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 11), Line(0, 19), Line(0, 28), Line(0, 35), Line(1, 28), Line(1, 48), Line(1, 52), Line(2, 37), Line(2, 58), Line(3, 8), Line(3, 9), Line(3, 26), Line(3, 53), Line(4, 9), Line(4, 14), Line(4, 19), Line(4, 20), Line(5, 13), Line(5, 18), Line(6, 9), Line(6, 12), Line(6, 31), Line(6, 38), Line(6, 47), Line(7, 35), Line(7, 53), Line(8, 50), Line(9, 27), Line(10, 20), Line(10, 22), Line(12, 38), Line(13, 27), Line(13, 49), Line(13, 51), Line(14, 22), Line(14, 28), Line(14, 40), Line(15, 17), Line(15, 31), Line(15, 34), Line(16, 25), Line(16, 31), Line(16, 32), Line(17, 24), Line(17, 33), Line(18, 29), Line(18, 34), Line(19, 43), Line(20, 26), Line(21, 29), Line(21, 37), Line(21, 55), Line(22, 25), Line(22, 44), Line(23, 42), Line(23, 54), Line(24, 36), Line(25, 41), Line(27, 36), Line(27, 53), Line(28, 34), Line(29, 37), Line(29, 51), Line(30, 33), Line(30, 43), Line(30, 49), Line(31, 49), Line(32, 38), Line(33, 53), Line(34, 51), Line(34, 54), Line(34, 56), Line(34, 59), Line(35, 36), Line(35, 57), Line(37, 59), Line(39, 40), Line(39, 45), Line(39, 50), Line(41, 48), Line(42, 57), Line(43, 56), Line(44, 45), Line(46, 55), Line(46, 56), Line(47, 49), Line(47, 55), Line(50, 59), Line(51, 58), Line(52, 57),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 19), Line(0, 28), Line(0, 35), Line(1, 28), Line(1, 48), Line(1, 52), Line(2, 58), Line(3, 8), Line(3, 9), Line(3, 26), Line(4, 9), Line(4, 14), Line(5, 18), Line(6, 9), Line(6, 12), Line(6, 31), Line(6, 38), Line(6, 47), Line(7, 35), Line(7, 53), Line(8, 50), Line(9, 27), Line(10, 20), Line(12, 38), Line(13, 27), Line(13, 49), Line(13, 51), Line(14, 40), Line(15, 31), Line(15, 34), Line(17, 24), Line(17, 33), Line(18, 29), Line(21, 29), Line(21, 55), Line(23, 42), Line(23, 54), Line(25, 41), Line(29, 37), Line(29, 51), Line(30, 49), Line(31, 49), Line(33, 53), Line(34, 54), Line(34, 59), Line(35, 36), Line(35, 57), Line(37, 59), Line(39, 50), Line(41, 48), Line(42, 57), Line(46, 56), Line(50, 59), Line(51, 58),  };
const double demand_num_pro = 0.5;
const double damaged_edge_pro = 0.6;
/*********************add_edge*************************/
g.add_edge(0, 11, 4);
g.add_edge(0, 19, 4);
g.add_edge(0, 28, 6.32);
g.add_edge(0, 35, 2);
g.add_edge(1, 28, 5.09);
g.add_edge(1, 48, 7.61);
g.add_edge(1, 52, 3.6);
g.add_edge(2, 37, 6.4);
g.add_edge(2, 58, 4.47);
g.add_edge(3, 8, 6.7);
g.add_edge(3, 9, 2.23);
g.add_edge(3, 26, 7.07);
g.add_edge(3, 53, 5.83);
g.add_edge(4, 9, 5);
g.add_edge(4, 14, 4.12);
g.add_edge(4, 19, 9.89);
g.add_edge(4, 20, 6.08);
g.add_edge(5, 13, 2.82);
g.add_edge(5, 18, 6.32);
g.add_edge(6, 9, 3.16);
g.add_edge(6, 12, 3.16);
g.add_edge(6, 31, 3.16);
g.add_edge(6, 38, 6.08);
g.add_edge(6, 47, 3.6);
g.add_edge(7, 35, 6.7);
g.add_edge(7, 53, 2.23);
g.add_edge(8, 50, 6.08);
g.add_edge(9, 27, 6.4);
g.add_edge(10, 20, 6.32);
g.add_edge(10, 22, 9.89);
g.add_edge(12, 38, 5.38);
g.add_edge(13, 27, 4.47);
g.add_edge(13, 49, 3.16);
g.add_edge(13, 51, 2.23);
g.add_edge(14, 22, 4.24);
g.add_edge(14, 28, 3);
g.add_edge(14, 40, 3.16);
g.add_edge(15, 17, 3.16);
g.add_edge(15, 31, 3.16);
g.add_edge(15, 34, 5.38);
g.add_edge(16, 25, 7.61);
g.add_edge(16, 31, 6);
g.add_edge(16, 32, 6.4);
g.add_edge(17, 24, 9.21);
g.add_edge(17, 33, 7.21);
g.add_edge(18, 29, 8.94);
g.add_edge(18, 34, 4.47);
g.add_edge(19, 43, 4.12);
g.add_edge(20, 26, 6.08);
g.add_edge(21, 29, 1.41);
g.add_edge(21, 37, 2.82);
g.add_edge(21, 55, 8.54);
g.add_edge(22, 25, 11.4);
g.add_edge(22, 44, 8.06);
g.add_edge(23, 42, 3.16);
g.add_edge(23, 54, 1.41);
g.add_edge(24, 36, 1);
g.add_edge(25, 41, 7);
g.add_edge(27, 36, 7);
g.add_edge(27, 53, 9.89);
g.add_edge(28, 34, 4);
g.add_edge(29, 37, 4.24);
g.add_edge(29, 51, 5.38);
g.add_edge(30, 33, 5.09);
g.add_edge(30, 43, 4.47);
g.add_edge(30, 49, 7);
g.add_edge(31, 49, 3.6);
g.add_edge(32, 38, 2.82);
g.add_edge(33, 53, 7.28);
g.add_edge(34, 51, 2.23);
g.add_edge(34, 54, 3.6);
g.add_edge(34, 56, 3.16);
g.add_edge(34, 59, 3);
g.add_edge(35, 36, 5);
g.add_edge(35, 57, 10);
g.add_edge(37, 59, 3);
g.add_edge(39, 40, 3.6);
g.add_edge(39, 45, 2.82);
g.add_edge(39, 50, 6.32);
g.add_edge(41, 48, 9.48);
g.add_edge(42, 57, 5);
g.add_edge(43, 56, 5);
g.add_edge(44, 45, 1.41);
g.add_edge(46, 55, 11.31);
g.add_edge(46, 56, 7.28);
g.add_edge(47, 49, 6.32);
g.add_edge(47, 55, 9.43);
g.add_edge(50, 59, 3);
g.add_edge(51, 58, 1.41);
g.add_edge(52, 57, 6.4);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 3.28);
g.set_importance(6, 0);
g.set_importance(7, 0);
g.set_importance(8, 0);
g.set_importance(9, 0);
g.set_importance(10, 0);
g.set_importance(11, 0);
g.set_importance(12, 8.39);
g.set_importance(13, 4.94);
g.set_importance(14, 0);
g.set_importance(15, 0);
g.set_importance(16, 3.55);
g.set_importance(17, 0);
g.set_importance(18, 0);
g.set_importance(19, 2.98);
g.set_importance(20, 0);
g.set_importance(21, 3.77);
g.set_importance(22, 0);
g.set_importance(23, 0);
g.set_importance(24, 4.96);
g.set_importance(25, 3.9);
g.set_importance(26, 5.94);
g.set_importance(27, 7.76);
g.set_importance(28, 5.04);
g.set_importance(29, 6.11);
g.set_importance(30, 4.37);
g.set_importance(31, 0);
g.set_importance(32, 0);
g.set_importance(33, 7.8);
g.set_importance(34, 0);
g.set_importance(35, 0);
g.set_importance(36, 4.1);
g.set_importance(37, 9.8);
g.set_importance(38, 5.28);
g.set_importance(39, 7.51);
g.set_importance(40, 0);
g.set_importance(41, 0);
g.set_importance(42, 3.34);
g.set_importance(43, 0);
g.set_importance(44, 5.5);
g.set_importance(45, 5.08);
g.set_importance(46, 9.07);
g.set_importance(47, 0);
g.set_importance(48, 0);
g.set_importance(49, 3.8);
g.set_importance(50, 0);
g.set_importance(51, 9.22);
g.set_importance(52, 4.19);
g.set_importance(53, 9.09);
g.set_importance(54, 6.68);
g.set_importance(55, 9.5);
g.set_importance(56, 5.07);
g.set_importance(57, 0);
g.set_importance(58, 0);
g.set_importance(59, 9.13);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 19), 1.26);
g.set_repair_time(Line(0, 28), 4.39);
g.set_repair_time(Line(0, 35), 1.44);
g.set_repair_time(Line(1, 28), 3.55);
g.set_repair_time(Line(1, 48), 3.8);
g.set_repair_time(Line(1, 52), 2.03);
g.set_repair_time(Line(2, 58), 4.45);
g.set_repair_time(Line(3, 8), 2.15);
g.set_repair_time(Line(3, 9), 3.27);
g.set_repair_time(Line(3, 26), 2.35);
g.set_repair_time(Line(4, 9), 2.58);
g.set_repair_time(Line(4, 14), 3.22);
g.set_repair_time(Line(5, 18), 1.24);
g.set_repair_time(Line(6, 9), 1.22);
g.set_repair_time(Line(6, 12), 1.72);
g.set_repair_time(Line(6, 31), 2.93);
g.set_repair_time(Line(6, 38), 4.05);
g.set_repair_time(Line(6, 47), 4.26);
g.set_repair_time(Line(7, 35), 4.45);
g.set_repair_time(Line(7, 53), 2.34);
g.set_repair_time(Line(8, 50), 4.54);
g.set_repair_time(Line(9, 27), 2.66);
g.set_repair_time(Line(10, 20), 3.32);
g.set_repair_time(Line(12, 38), 1.31);
g.set_repair_time(Line(13, 27), 1.08);
g.set_repair_time(Line(13, 49), 1.64);
g.set_repair_time(Line(13, 51), 3.2);
g.set_repair_time(Line(14, 40), 2.5);
g.set_repair_time(Line(15, 31), 3.17);
g.set_repair_time(Line(15, 34), 1.08);
g.set_repair_time(Line(17, 24), 2.54);
g.set_repair_time(Line(17, 33), 3.85);
g.set_repair_time(Line(18, 29), 3.45);
g.set_repair_time(Line(21, 29), 3.29);
g.set_repair_time(Line(21, 55), 2.07);
g.set_repair_time(Line(23, 42), 3.27);
g.set_repair_time(Line(23, 54), 2.9);
g.set_repair_time(Line(25, 41), 2.86);
g.set_repair_time(Line(29, 37), 2.31);
g.set_repair_time(Line(29, 51), 3.26);
g.set_repair_time(Line(30, 49), 2.24);
g.set_repair_time(Line(31, 49), 3.24);
g.set_repair_time(Line(33, 53), 3.39);
g.set_repair_time(Line(34, 54), 1.78);
g.set_repair_time(Line(34, 59), 1.42);
g.set_repair_time(Line(35, 36), 2.7);
g.set_repair_time(Line(35, 57), 2.01);
g.set_repair_time(Line(37, 59), 3.13);
g.set_repair_time(Line(39, 50), 2.64);
g.set_repair_time(Line(41, 48), 1.24);
g.set_repair_time(Line(42, 57), 4.29);
g.set_repair_time(Line(46, 56), 3.18);
g.set_repair_time(Line(50, 59), 1.38);
g.set_repair_time(Line(51, 58), 2.22);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 14.2625}, {2, 23.0375}, {3, 20.95}, {4, 16.8}, {5, 22}, {6, 27}, {7, 10.875}, {8, 28}, {9, 23.05}, {10, 29.3125}, {11, 5}, {12, 30.95}, {13, 18.475}, {14, 11.65}, {15, 19.625}, {16, 31.075}, {17, 21.5125}, {18, 18.4875}, {19, 5}, {20, 24.4}, {21, 23.925}, {22, 16.95}, {23, 19.1625}, {24, 10}, {25, 31.2}, {26, 29.7875}, {27, 17.5}, {28, 7.9}, {29, 22.4125}, {30, 15.7375}, {31, 23.575}, {32, 38.125}, {33, 22.1}, {34, 12.9}, {35, 2.5}, {36, 8.75}, {37, 20.4}, {38, 34.6}, {39, 20.1}, {40, 15.6}, {41, 35.625}, {42, 21.25}, {43, 10.15}, {44, 25.3875}, {45, 23.625}, {46, 25.5}, {47, 30.325}, {48, 23.775}, {49, 22.425}, {50, 20.4}, {51, 15.6875}, {52, 18.7625}, {53, 13.6625}, {54, 17.4}, {55, 34.6}, {56, 16.4}, {57, 15}, {58, 17.45}, {59, 16.65}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 14.2625}, {1, 0}, {2, 21.5}, {3, 24.3}, {4, 15.2625}, {5, 20.4625}, {6, 25.4625}, {7, 25.1375}, {8, 26.4625}, {9, 21.5125}, {10, 27.775}, {11, 19.2625}, {12, 29.4125}, {13, 16.9375}, {14, 10.1125}, {15, 18.0875}, {16, 29.5375}, {17, 22.0375}, {18, 16.95}, {19, 19.2625}, {20, 22.8625}, {21, 22.3875}, {22, 15.4125}, {23, 17.625}, {24, 24.2625}, {25, 29.6625}, {26, 30.4625}, {27, 22.525}, {28, 6.3625}, {29, 20.875}, {30, 27.15}, {31, 22.0375}, {32, 36.5875}, {33, 31.05}, {34, 11.3625}, {35, 16.7625}, {36, 23.0125}, {37, 18.8625}, {38, 33.0625}, {39, 18.5625}, {40, 14.0625}, {41, 21.3625}, {42, 18.75}, {43, 21.5625}, {44, 23.85}, {45, 22.0875}, {46, 24.4125}, {47, 28.7875}, {48, 9.5125}, {49, 20.8875}, {50, 18.8625}, {51, 14.15}, {52, 4.5}, {53, 27.925}, {54, 15.8625}, {55, 33.0625}, {56, 15.3125}, {57, 12.5}, {58, 15.9125}, {59, 15.1125}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 23.0375}, {1, 21.5}, {2, 0}, {3, 26.5125}, {4, 24.0375}, {5, 13.6625}, {6, 22.5375}, {7, 30.875}, {8, 23.1}, {9, 23.725}, {10, 36.55}, {11, 28.0375}, {12, 26.4875}, {13, 10.1375}, {14, 18.8875}, {15, 16.8625}, {16, 26.0875}, {17, 20.8125}, {18, 15.725}, {19, 25.4875}, {20, 31.6375}, {21, 11.525}, {22, 24.1875}, {23, 16.4}, {24, 25.725}, {25, 35.6}, {26, 35.35}, {27, 15.725}, {28, 15.1375}, {29, 13.2875}, {30, 22.8375}, {31, 18.5875}, {32, 33.6625}, {33, 29.2}, {34, 10.1375}, {35, 25.5375}, {36, 24.475}, {37, 8}, {38, 30.1375}, {39, 23.4}, {40, 22.8375}, {41, 42.8625}, {42, 20.35}, {43, 20.3375}, {44, 28.6875}, {45, 26.925}, {46, 23.1875}, {47, 21.9875}, {48, 31.0125}, {49, 14.0875}, {50, 15.5}, {51, 7.35}, {52, 26}, {53, 28.0875}, {54, 14.6375}, {55, 22.2}, {56, 14.0875}, {57, 26.6}, {58, 5.5875}, {59, 11.75}, 