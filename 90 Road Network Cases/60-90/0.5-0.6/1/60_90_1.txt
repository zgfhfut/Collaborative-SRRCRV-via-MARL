node_num : 60
demand_node_num : 30
edge_num : 90
damaged_edge_num : 54
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 6, 8, 9, 11, 14, 15, 18, 19, 24, 26, 28, 29, 33, 34, 36, 37, 38, 39, 41, 42, 43, 45, 47, 50, 52, 53, 54, 55, 57, 58,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 15), Line(0, 23), Line(0, 58), Line(1, 30), Line(1, 50), Line(1, 51), Line(2, 11), Line(2, 13), Line(2, 56), Line(3, 9), Line(3, 18), Line(3, 49), Line(4, 36), Line(4, 41), Line(5, 9), Line(5, 34), Line(5, 49), Line(6, 8), Line(6, 24), Line(6, 46), Line(7, 24), Line(7, 25), Line(7, 31), Line(7, 32), Line(7, 48), Line(7, 54), Line(8, 13), Line(8, 25), Line(9, 26), Line(9, 27), Line(10, 13), Line(10, 28), Line(10, 35), Line(11, 23), Line(11, 38), Line(11, 56), Line(12, 45), Line(12, 49), Line(13, 20), Line(13, 31), Line(14, 20), Line(14, 30), Line(14, 52), Line(15, 25), Line(15, 32), Line(15, 39), Line(16, 17), Line(16, 55), Line(17, 50), Line(18, 47), Line(19, 45), Line(19, 51), Line(20, 28), Line(21, 28), Line(21, 59), Line(22, 29), Line(22, 43), Line(24, 29), Line(24, 30), Line(24, 32), Line(25, 54), Line(25, 55), Line(26, 37), Line(26, 54), Line(27, 34), Line(27, 56), Line(29, 38), Line(31, 58), Line(32, 39), Line(32, 53), Line(33, 48), Line(33, 53), Line(34, 50), Line(35, 47), Line(36, 43), Line(37, 39), Line(38, 59), Line(39, 51), Line(40, 42), Line(40, 44), Line(40, 52), Line(41, 46), Line(42, 57), Line(44, 52), Line(45, 47), Line(47, 55), Line(48, 57), Line(49, 54), Line(55, 58), Line(56, 57),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 15), Line(1, 30), Line(1, 50), Line(2, 11), Line(2, 13), Line(3, 18), Line(3, 49), Line(4, 36), Line(4, 41), Line(5, 9), Line(5, 34), Line(6, 46), Line(7, 31), Line(7, 32), Line(7, 48), Line(8, 13), Line(8, 25), Line(10, 28), Line(10, 35), Line(11, 23), Line(11, 56), Line(12, 49), Line(13, 31), Line(14, 20), Line(14, 30), Line(14, 52), Line(15, 32), Line(15, 39), Line(16, 17), Line(16, 55), Line(19, 45), Line(19, 51), Line(21, 28), Line(21, 59), Line(24, 29), Line(24, 30), Line(24, 32), Line(25, 55), Line(26, 37), Line(26, 54), Line(27, 34), Line(29, 38), Line(32, 39), Line(32, 53), Line(33, 48), Line(33, 53), Line(34, 50), Line(35, 47), Line(36, 43), Line(40, 44), Line(41, 46), Line(44, 52), Line(55, 58), Line(56, 57),  };
const double demand_num_pro = 0.5;
const double damaged_edge_pro = 0.6;
/*********************add_edge*************************/
g.add_edge(0, 15, 8.6);
g.add_edge(0, 23, 9.48);
g.add_edge(0, 58, 5.83);
g.add_edge(1, 30, 6.08);
g.add_edge(1, 50, 6.7);
g.add_edge(1, 51, 2.23);
g.add_edge(2, 11, 9.05);
g.add_edge(2, 13, 3.16);
g.add_edge(2, 56, 6.08);
g.add_edge(3, 9, 3);
g.add_edge(3, 18, 6.7);
g.add_edge(3, 49, 9.48);
g.add_edge(4, 36, 7.61);
g.add_edge(4, 41, 3);
g.add_edge(5, 9, 9.05);
g.add_edge(5, 34, 7);
g.add_edge(5, 49, 1);
g.add_edge(6, 8, 3.16);
g.add_edge(6, 24, 3.6);
g.add_edge(6, 46, 8.06);
g.add_edge(7, 24, 6.4);
g.add_edge(7, 25, 7.07);
g.add_edge(7, 31, 5.38);
g.add_edge(7, 32, 4.24);
g.add_edge(7, 48, 4.12);
g.add_edge(7, 54, 6.32);
g.add_edge(8, 13, 5);
g.add_edge(8, 25, 2.82);
g.add_edge(9, 26, 7.07);
g.add_edge(9, 27, 9.21);
g.add_edge(10, 13, 2.82);
g.add_edge(10, 28, 7.07);
g.add_edge(10, 35, 5);
g.add_edge(11, 23, 9.21);
g.add_edge(11, 38, 3.16);
g.add_edge(11, 56, 3);
g.add_edge(12, 45, 3.16);
g.add_edge(12, 49, 5.38);
g.add_edge(13, 20, 3.6);
g.add_edge(13, 31, 2);
g.add_edge(14, 20, 5);
g.add_edge(14, 30, 5.38);
g.add_edge(14, 52, 5.83);
g.add_edge(15, 25, 2);
g.add_edge(15, 32, 7.21);
g.add_edge(15, 39, 1);
g.add_edge(16, 17, 3);
g.add_edge(16, 55, 3.6);
g.add_edge(17, 50, 2.23);
g.add_edge(18, 47, 3.6);
g.add_edge(19, 45, 3);
g.add_edge(19, 51, 5.09);
g.add_edge(20, 28, 2.23);
g.add_edge(21, 28, 4.12);
g.add_edge(21, 59, 6);
g.add_edge(22, 29, 5);
g.add_edge(22, 43, 5.38);
g.add_edge(24, 29, 8.24);
g.add_edge(24, 30, 8.06);
g.add_edge(24, 32, 2.23);
g.add_edge(25, 54, 1.41);
g.add_edge(25, 55, 6.7);
g.add_edge(26, 37, 6.08);
g.add_edge(26, 54, 4.12);
g.add_edge(27, 34, 7.61);
g.add_edge(27, 56, 6.32);
g.add_edge(29, 38, 5.09);
g.add_edge(31, 58, 1);
g.add_edge(32, 39, 6.7);
g.add_edge(32, 53, 5.38);
g.add_edge(33, 48, 10);
g.add_edge(33, 53, 3.16);
g.add_edge(34, 50, 5.83);
g.add_edge(35, 47, 4);
g.add_edge(36, 43, 5.09);
g.add_edge(37, 39, 2.23);
g.add_edge(38, 59, 5.38);
g.add_edge(39, 51, 7.81);
g.add_edge(40, 42, 6.7);
g.add_edge(40, 44, 7);
g.add_edge(40, 52, 7.21);
g.add_edge(41, 46, 5.38);
g.add_edge(42, 57, 1.41);
g.add_edge(44, 52, 4.12);
g.add_edge(45, 47, 2.23);
g.add_edge(47, 55, 5);
g.add_edge(48, 57, 7.81);
g.add_edge(49, 54, 4.24);
g.add_edge(55, 58, 5);
g.add_edge(56, 57, 4);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 0);
g.set_importance(6, 3.63);
g.set_importance(7, 0);
g.set_importance(8, 7.44);
g.set_importance(9, 5.53);
g.set_importance(10, 0);
g.set_importance(11, 7.93);
g.set_importance(12, 0);
g.set_importance(13, 0);
g.set_importance(14, 1.85);
g.set_importance(15, 7.4);
g.set_importance(16, 0);
g.set_importance(17, 0);
g.set_importance(18, 9.14);
g.set_importance(19, 3.23);
g.set_importance(20, 0);
g.set_importance(21, 0);
g.set_importance(22, 0);
g.set_importance(23, 0);
g.set_importance(24, 3.41);
g.set_importance(25, 0);
g.set_importance(26, 6.55);
g.set_importance(27, 0);
g.set_importance(28, 7.74);
g.set_importance(29, 3.1);
g.set_importance(30, 0);
g.set_importance(31, 0);
g.set_importance(32, 0);
g.set_importance(33, 4.96);
g.set_importance(34, 3.69);
g.set_importance(35, 0);
g.set_importance(36, 7.45);
g.set_importance(37, 7.34);
g.set_importance(38, 5.86);
g.set_importance(39, 3.57);
g.set_importance(40, 0);
g.set_importance(41, 8.06);
g.set_importance(42, 2.28);
g.set_importance(43, 5.46);
g.set_importance(44, 0);
g.set_importance(45, 9.16);
g.set_importance(46, 0);
g.set_importance(47, 1.03);
g.set_importance(48, 0);
g.set_importance(49, 0);
g.set_importance(50, 5.33);
g.set_importance(51, 0);
g.set_importance(52, 3.99);
g.set_importance(53, 4.56);
g.set_importance(54, 3.83);
g.set_importance(55, 4.52);
g.set_importance(56, 0);
g.set_importance(57, 3.71);
g.set_importance(58, 2.03);
g.set_importance(59, 0);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 15), 3.36);
g.set_repair_time(Line(1, 30), 1.39);
g.set_repair_time(Line(1, 50), 2.1);
g.set_repair_time(Line(2, 11), 2.65);
g.set_repair_time(Line(2, 13), 3.22);
g.set_repair_time(Line(3, 18), 2.13);
g.set_repair_time(Line(3, 49), 4.33);
g.set_repair_time(Line(4, 36), 4.8);
g.set_repair_time(Line(4, 41), 4.05);
g.set_repair_time(Line(5, 9), 3.64);
g.set_repair_time(Line(5, 34), 2.61);
g.set_repair_time(Line(6, 46), 2.52);
g.set_repair_time(Line(7, 31), 2.2);
g.set_repair_time(Line(7, 32), 4.55);
g.set_repair_time(Line(7, 48), 1.46);
g.set_repair_time(Line(8, 13), 2.31);
g.set_repair_time(Line(8, 25), 2.08);
g.set_repair_time(Line(10, 28), 1.26);
g.set_repair_time(Line(10, 35), 3.29);
g.set_repair_time(Line(11, 23), 4.26);
g.set_repair_time(Line(11, 56), 3.66);
g.set_repair_time(Line(12, 49), 4.64);
g.set_repair_time(Line(13, 31), 1.72);
g.set_repair_time(Line(14, 20), 2.53);
g.set_repair_time(Line(14, 30), 1.05);
g.set_repair_time(Line(14, 52), 2.98);
g.set_repair_time(Line(15, 32), 3.89);
g.set_repair_time(Line(15, 39), 3.11);
g.set_repair_time(Line(16, 17), 3.66);
g.set_repair_time(Line(16, 55), 1.42);
g.set_repair_time(Line(19, 45), 4.14);
g.set_repair_time(Line(19, 51), 2.81);
g.set_repair_time(Line(21, 28), 2.76);
g.set_repair_time(Line(21, 59), 1.57);
g.set_repair_time(Line(24, 29), 1.89);
g.set_repair_time(Line(24, 30), 2.5);
g.set_repair_time(Line(24, 32), 1.97);
g.set_repair_time(Line(25, 55), 3.13);
g.set_repair_time(Line(26, 37), 1.76);
g.set_repair_time(Line(26, 54), 3.95);
g.set_repair_time(Line(27, 34), 2.49);
g.set_repair_time(Line(29, 38), 4.49);
g.set_repair_time(Line(32, 39), 2.95);
g.set_repair_time(Line(32, 53), 2.37);
g.set_repair_time(Line(33, 48), 2.85);
g.set_repair_time(Line(33, 53), 3.39);
g.set_repair_time(Line(34, 50), 2.38);
g.set_repair_time(Line(35, 47), 1.6);
g.set_repair_time(Line(36, 43), 3.24);
g.set_repair_time(Line(40, 44), 4.95);
g.set_repair_time(Line(41, 46), 1.27);
g.set_repair_time(Line(44, 52), 3.11);
g.set_repair_time(Line(55, 58), 3.29);
g.set_repair_time(Line(56, 57), 4.48);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 24.55}, {2, 14.9875}, {3, 32.1625}, {4, 41.275}, {5, 21.5625}, {6, 20.725}, {7, 15.2625}, {8, 16.775}, {9, 29}, {10, 14.5625}, {11, 23.3625}, {12, 26.525}, {13, 11.0375}, {14, 21.7875}, {15, 10.75}, {16, 18.0375}, {17, 21.7875}, {18, 24.2875}, {19, 26.325}, {20, 15.5375}, {21, 23.475}, {22, 39.1}, {23, 11.85}, {24, 22.55}, {25, 13.25}, {26, 20.1625}, {27, 30.4875}, {28, 18.325}, {29, 32.85}, {30, 28.5125}, {31, 8.5375}, {32, 19.7625}, {33, 30.4375}, {34, 30.3125}, {35, 20.8125}, {36, 50.7875}, {37, 14.7875}, {38, 27.3125}, {39, 12}, {40, 37.725}, {41, 37.525}, {42, 29.35}, {43, 45.825}, {44, 34.225}, {45, 22.575}, {46, 30.8}, {47, 19.7875}, {48, 20.4125}, {49, 20.3125}, {50, 24.575}, {51, 21.7625}, {52, 29.075}, {53, 26.4875}, {54, 15.0125}, {55, 13.5375}, {56, 22.5875}, {57, 27.5875}, {58, 7.2875}, {59, 30.975}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 24.55}, {1, 0}, {2, 29.025}, {3, 28.5625}, {4, 42.725}, {5, 24.4125}, {6, 22.175}, {7, 25.1375}, {8, 19.825}, {9, 31.775}, {10, 26.9375}, {11, 36.825}, {12, 16.85}, {13, 25.075}, {14, 14.325}, {15, 13.8}, {16, 14.9125}, {17, 11.1625}, {18, 20.1875}, {19, 9.15}, {20, 20.575}, {21, 28.5125}, {22, 34.225}, {23, 36.4}, {24, 17.675}, {25, 16.3}, {26, 22.9375}, {27, 25.175}, {28, 23.3625}, {29, 27.975}, {30, 7.6}, {31, 26.9125}, {32, 20.4625}, {33, 31.1375}, {34, 15.6625}, {35, 20.6875}, {36, 47.3125}, {37, 15.3375}, {38, 34.3375}, {39, 12.55}, {40, 30.625}, {41, 38.975}, {42, 39}, {43, 40.95}, {44, 26.7625}, {45, 12.9}, {46, 32.25}, {47, 15.6875}, {48, 30.2875}, {49, 23.3625}, {50, 8.375}, {51, 2.7875}, {52, 21.6125}, {53, 27.1875}, {54, 18.0625}, {55, 19.4125}, {56, 33.075}, {57, 38.075}, {58, 25.6625}, {59, 36.0125}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 14.9875}, {1, 29.025}, {2, 0}, {3, 30.7625}, {4, 34.7}, {5, 22.0375}, {6, 14.15}, {7, 13.175}, {8, 10.2}, {9, 27.0125}, {10, 7.475}, {11, 11.3125}, {12, 25.4625}, {13, 3.95}, {14, 14.7}, {15, 16.225}, {16, 18.45}, {17, 22.2}, {18, 23.225}, {19, 25.2625}, {20, 8.45}, {21, 16.3875}, {22, 27.875}, {23, 22.825}, {24, 18.65}, {25, 13.725}, {26, 20.6375}, {27, 15.5}, {28, 11.2375}, {29, 21.625}, {30, 21.425}, {31, 6.45}, {32, 18.475}, {33, 29.15}, {34, 25.0125}, {35, 13.725}, {36, 40.9625}, {37, 20.2625}, {38, 15.2625}, {39, 17.475}, {40, 22.7375}, {41, 30.95}, {42, 14.3625}, {43, 34.6}, {44, 27.1375}, {45, 21.5125}, {46, 24.225}, {47, 18.725}, {48, 18.325}, {49, 20.7875}, {50, 24.9875}, {51, 27.2375}, {52, 21.9875}, {53, 25.2}, {54, 15.4875}, {55, 13.95}, {56, 7.6}, {57, 12.6}, {58, 7.7}, {59, 21.9875}, 