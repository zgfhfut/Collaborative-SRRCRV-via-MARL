node_num : 60
demand_node_num : 36
edge_num : 90
damaged_edge_num : 62
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 6, 7, 10, 11, 13, 14, 16, 17, 19, 24, 25, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 46, 48, 49, 50, 51, 52, 55, 56, 57, 59,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 16), Line(0, 21), Line(0, 40), Line(0, 41), Line(1, 18), Line(1, 38), Line(2, 33), Line(2, 47), Line(3, 6), Line(3, 20), Line(3, 23), Line(3, 24), Line(4, 26), Line(4, 41), Line(5, 16), Line(5, 31), Line(5, 38), Line(6, 37), Line(6, 41), Line(6, 45), Line(7, 19), Line(7, 28), Line(7, 29), Line(7, 52), Line(8, 43), Line(8, 46), Line(9, 27), Line(9, 32), Line(10, 44), Line(10, 56), Line(11, 45), Line(11, 50), Line(11, 51), Line(11, 53), Line(12, 53), Line(12, 55), Line(13, 33), Line(13, 45), Line(13, 46), Line(14, 20), Line(14, 31), Line(14, 46), Line(15, 48), Line(15, 50), Line(17, 51), Line(17, 57), Line(17, 58), Line(18, 56), Line(19, 23), Line(19, 59), Line(20, 25), Line(20, 58), Line(21, 22), Line(21, 27), Line(22, 43), Line(22, 56), Line(23, 31), Line(23, 55), Line(24, 35), Line(25, 32), Line(25, 44), Line(26, 35), Line(26, 51), Line(28, 29), Line(28, 40), Line(28, 51), Line(30, 46), Line(30, 48), Line(30, 52), Line(32, 45), Line(34, 37), Line(34, 47), Line(35, 42), Line(35, 56), Line(36, 49), Line(36, 54), Line(37, 45), Line(38, 54), Line(39, 42), Line(39, 54), Line(42, 50), Line(42, 59), Line(43, 54), Line(44, 49), Line(48, 49), Line(48, 58), Line(52, 57), Line(53, 58), Line(53, 59), Line(58, 59),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 16), Line(0, 21), Line(0, 40), Line(1, 18), Line(1, 38), Line(2, 33), Line(2, 47), Line(3, 6), Line(3, 20), Line(3, 23), Line(3, 24), Line(4, 26), Line(4, 41), Line(5, 16), Line(5, 31), Line(6, 41), Line(7, 19), Line(7, 29), Line(7, 52), Line(8, 43), Line(8, 46), Line(9, 27), Line(9, 32), Line(10, 44), Line(11, 45), Line(11, 50), Line(11, 51), Line(12, 53), Line(12, 55), Line(13, 33), Line(13, 45), Line(13, 46), Line(14, 31), Line(14, 46), Line(15, 50), Line(17, 51), Line(17, 58), Line(19, 59), Line(20, 25), Line(21, 27), Line(23, 55), Line(24, 35), Line(25, 32), Line(25, 44), Line(26, 35), Line(28, 51), Line(30, 46), Line(30, 48), Line(30, 52), Line(34, 37), Line(35, 42), Line(35, 56), Line(36, 49), Line(36, 54), Line(38, 54), Line(39, 42), Line(39, 54), Line(42, 50), Line(42, 59), Line(48, 58), Line(52, 57), Line(58, 59),  };
const double demand_num_pro = 0.6;
const double damaged_edge_pro = 0.7;
/*********************add_edge*************************/
g.add_edge(0, 16, 4.47214);
g.add_edge(0, 21, 5);
g.add_edge(0, 40, 4.24264);
g.add_edge(0, 41, 7.81025);
g.add_edge(1, 18, 8.06226);
g.add_edge(1, 38, 3);
g.add_edge(2, 33, 2.23607);
g.add_edge(2, 47, 3.60555);
g.add_edge(3, 6, 3);
g.add_edge(3, 20, 6.40312);
g.add_edge(3, 23, 5.38516);
g.add_edge(3, 24, 5);
g.add_edge(4, 26, 1);
g.add_edge(4, 41, 3);
g.add_edge(5, 16, 8.06226);
g.add_edge(5, 31, 7.2111);
g.add_edge(5, 38, 6.40312);
g.add_edge(6, 37, 2.23607);
g.add_edge(6, 41, 5);
g.add_edge(6, 45, 1.41421);
g.add_edge(7, 19, 4);
g.add_edge(7, 28, 1.41421);
g.add_edge(7, 29, 5.09902);
g.add_edge(7, 52, 6);
g.add_edge(8, 43, 5.83095);
g.add_edge(8, 46, 5.65685);
g.add_edge(9, 27, 5.09902);
g.add_edge(9, 32, 4);
g.add_edge(10, 44, 1.41421);
g.add_edge(10, 56, 1);
g.add_edge(11, 45, 6);
g.add_edge(11, 50, 7.61577);
g.add_edge(11, 51, 8.544);
g.add_edge(11, 53, 8.24621);
g.add_edge(12, 53, 4.12311);
g.add_edge(12, 55, 4.24264);
g.add_edge(13, 33, 4.12311);
g.add_edge(13, 45, 6.7082);
g.add_edge(13, 46, 8.06226);
g.add_edge(14, 20, 4.12311);
g.add_edge(14, 31, 4.47214);
g.add_edge(14, 46, 1);
g.add_edge(15, 48, 2.23607);
g.add_edge(15, 50, 7.07107);
g.add_edge(17, 51, 3.16228);
g.add_edge(17, 57, 4.12311);
g.add_edge(17, 58, 4.47214);
g.add_edge(18, 56, 7.2111);
g.add_edge(19, 23, 9.05539);
g.add_edge(19, 59, 3.16228);
g.add_edge(20, 25, 2.23607);
g.add_edge(20, 58, 7.28011);
g.add_edge(21, 22, 4.47214);
g.add_edge(21, 27, 6.7082);
g.add_edge(22, 43, 6.40312);
g.add_edge(22, 56, 2.23607);
g.add_edge(23, 31, 7.28011);
g.add_edge(23, 55, 3.60555);
g.add_edge(24, 35, 4.12311);
g.add_edge(25, 32, 1);
g.add_edge(25, 44, 4);
g.add_edge(26, 35, 5.83095);
g.add_edge(26, 51, 4);
g.add_edge(28, 29, 4);
g.add_edge(28, 40, 3.16228);
g.add_edge(28, 51, 9.21954);
g.add_edge(30, 46, 6.40312);
g.add_edge(30, 48, 8.94427);
g.add_edge(30, 52, 3);
g.add_edge(32, 45, 5.83095);
g.add_edge(34, 37, 4.24264);
g.add_edge(34, 47, 2.23607);
g.add_edge(35, 42, 4.24264);
g.add_edge(35, 56, 2.23607);
g.add_edge(36, 49, 3.16228);
g.add_edge(36, 54, 5.83095);
g.add_edge(37, 45, 1);
g.add_edge(38, 54, 7.07107);
g.add_edge(39, 42, 10.2956);
g.add_edge(39, 54, 9.21954);
g.add_edge(42, 50, 8.06226);
g.add_edge(42, 59, 5);
g.add_edge(43, 54, 2);
g.add_edge(44, 49, 1);
g.add_edge(48, 49, 7.28011);
g.add_edge(48, 58, 1.41421);
g.add_edge(52, 57, 1.41421);
g.add_edge(53, 58, 4.12311);
g.add_edge(53, 59, 5.09902);
g.add_edge(58, 59, 6.40312);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 0);
g.set_importance(6, 6.29);
g.set_importance(7, 2.83);
g.set_importance(8, 0);
g.set_importance(9, 0);
g.set_importance(10, 8.1);
g.set_importance(11, 2.75);
g.set_importance(12, 0);
g.set_importance(13, 4.98);
g.set_importance(14, 2.23);
g.set_importance(15, 0);
g.set_importance(16, 3.89);
g.set_importance(17, 8.68);
g.set_importance(18, 0);
g.set_importance(19, 1.51);
g.set_importance(20, 0);
g.set_importance(21, 0);
g.set_importance(22, 0);
g.set_importance(23, 0);
g.set_importance(24, 3.06);
g.set_importance(25, 8.97);
g.set_importance(26, 0);
g.set_importance(27, 8.62);
g.set_importance(28, 4.7);
g.set_importance(29, 7.52);
g.set_importance(30, 0);
g.set_importance(31, 0);
g.set_importance(32, 9.78);
g.set_importance(33, 3.6);
g.set_importance(34, 2.27);
g.set_importance(35, 3.36);
g.set_importance(36, 8.66);
g.set_importance(37, 3.84);
g.set_importance(38, 5.88);
g.set_importance(39, 4.83);
g.set_importance(40, 5.77);
g.set_importance(41, 0);
g.set_importance(42, 6.23);
g.set_importance(43, 4.32);
g.set_importance(44, 0);
g.set_importance(45, 4.03);
g.set_importance(46, 7.1);
g.set_importance(47, 0);
g.set_importance(48, 3.52);
g.set_importance(49, 7.4);
g.set_importance(50, 1.06);
g.set_importance(51, 3.69);
g.set_importance(52, 3.74);
g.set_importance(53, 0);
g.set_importance(54, 0);
g.set_importance(55, 3.29);
g.set_importance(56, 8.19);
g.set_importance(57, 6.95);
g.set_importance(58, 0);
g.set_importance(59, 5.71);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 16), 3.93);
g.set_repair_time(Line(0, 21), 4.58);
g.set_repair_time(Line(0, 40), 3.28);
g.set_repair_time(Line(1, 18), 3.29);
g.set_repair_time(Line(1, 38), 4.38);
g.set_repair_time(Line(2, 33), 1.24);
g.set_repair_time(Line(2, 47), 3.58);
g.set_repair_time(Line(3, 6), 3.31);
g.set_repair_time(Line(3, 20), 1.04);
g.set_repair_time(Line(3, 23), 1.33);
g.set_repair_time(Line(3, 24), 2.43);
g.set_repair_time(Line(4, 26), 2.18);
g.set_repair_time(Line(4, 41), 4.54);
g.set_repair_time(Line(5, 16), 3.44);
g.set_repair_time(Line(5, 31), 4.96);
g.set_repair_time(Line(6, 41), 2.07);
g.set_repair_time(Line(7, 19), 1.67);
g.set_repair_time(Line(7, 29), 3.68);
g.set_repair_time(Line(7, 52), 1.9);
g.set_repair_time(Line(8, 43), 3.09);
g.set_repair_time(Line(8, 46), 3.62);
g.set_repair_time(Line(9, 27), 2.68);
g.set_repair_time(Line(9, 32), 3.81);
g.set_repair_time(Line(10, 44), 1.12);
g.set_repair_time(Line(11, 45), 2.33);
g.set_repair_time(Line(11, 50), 2.74);
g.set_repair_time(Line(11, 51), 2.23);
g.set_repair_time(Line(12, 53), 3.62);
g.set_repair_time(Line(12, 55), 4.82);
g.set_repair_time(Line(13, 33), 2.03);
g.set_repair_time(Line(13, 45), 2.21);
g.set_repair_time(Line(13, 46), 2.01);
g.set_repair_time(Line(14, 31), 4.47);
g.set_repair_time(Line(14, 46), 1.53);
g.set_repair_time(Line(15, 50), 1.36);
g.set_repair_time(Line(17, 51), 2.13);
g.set_repair_time(Line(17, 58), 2.26);
g.set_repair_time(Line(19, 59), 3.25);
g.set_repair_time(Line(20, 25), 2.13);
g.set_repair_time(Line(21, 27), 1.92);
g.set_repair_time(Line(23, 55), 3.55);
g.set_repair_time(Line(24, 35), 2.79);
g.set_repair_time(Line(25, 32), 1.7);
g.set_repair_time(Line(25, 44), 4.5);
g.set_repair_time(Line(26, 35), 1.99);
g.set_repair_time(Line(28, 51), 1.69);
g.set_repair_time(Line(30, 46), 1.89);
g.set_repair_time(Line(30, 48), 2.97);
g.set_repair_time(Line(30, 52), 3.51);
g.set_repair_time(Line(34, 37), 2.94);
g.set_repair_time(Line(35, 42), 2.44);
g.set_repair_time(Line(35, 56), 2.47);
g.set_repair_time(Line(36, 49), 3.03);
g.set_repair_time(Line(36, 54), 2.17);
g.set_repair_time(Line(38, 54), 3.2);
g.set_repair_time(Line(39, 42), 3.16);
g.set_repair_time(Line(39, 54), 3.54);
g.set_repair_time(Line(42, 50), 1.87);
g.set_repair_time(Line(42, 59), 1.72);
g.set_repair_time(Line(48, 58), 1.98);
g.set_repair_time(Line(52, 57), 4.83);
g.set_repair_time(Line(58, 59), 1.15);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 27.4219}, {2, 31.4132}, {3, 19.7628}, {4, 13.5128}, {5, 15.668}, {6, 16.0128}, {7, 11.0239}, {8, 27.1328}, {9, 21.009}, {10, 15.8853}, {11, 25.2806}, {12, 31.5044}, {13, 26.1658}, {14, 30.272}, {15, 30.7982}, {16, 5.59017}, {17, 23.7157}, {18, 23.6491}, {19, 16.0239}, {20, 25.4481}, {21, 6.25}, {22, 11.8402}, {23, 26.4943}, {24, 22.5842}, {25, 22.653}, {26, 14.7628}, {27, 14.6353}, {28, 9.25615}, {29, 14.2561}, {30, 22.2739}, {31, 24.6819}, {32, 23.903}, {33, 31.3197}, {34, 24.1112}, {35, 17.4303}, {36, 22.8559}, {37, 18.8079}, {38, 23.6719}, {39, 33.8685}, {40, 5.3033}, {41, 9.76281}, {42, 22.7336}, {43, 19.8441}, {44, 17.653}, {45, 17.7806}, {46, 30.2778}, {47, 26.9063}, {48, 28.0032}, {49, 18.903}, {50, 32.8115}, {51, 19.7628}, {52, 18.5239}, {53, 26.3505}, {54, 22.3441}, {55, 31.0012}, {56, 14.6353}, {57, 20.2917}, {58, 27.9807}, {59, 19.9768}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 27.4219}, {1, 0}, {2, 45.6347}, {3, 33.2907}, {4, 30.4255}, {5, 11.7539}, {6, 37.0407}, {7, 38.4458}, {8, 22.3775}, {9, 33.3595}, {10, 20.3417}, {11, 43.1482}, {12, 39.6782}, {13, 37.6858}, {14, 26.358}, {15, 35.2547}, {16, 21.8317}, {17, 38.1283}, {18, 10.0778}, {19, 37.3929}, {20, 29.9046}, {21, 27.477}, {22, 21.8868}, {23, 29.8679}, {24, 27.0407}, {25, 27.1095}, {26, 29.1755}, {27, 35.8622}, {28, 36.678}, {29, 41.678}, {30, 35.6119}, {31, 20.7678}, {32, 28.3595}, {33, 42.8397}, {34, 42.2015}, {35, 21.8868}, {36, 19.8775}, {37, 36.8982}, {38, 3.75}, {39, 24.1133}, {40, 32.7252}, {41, 34.1755}, {42, 27.1901}, {43, 15.0888}, {44, 22.1095}, {45, 35.6482}, {46, 27.608}, {47, 44.9965}, {48, 32.4596}, {49, 23.3595}, {50, 37.2679}, {51, 34.1755}, {52, 39.3619}, {53, 39.3813}, {54, 12.5888}, {55, 34.3749}, {56, 19.0917}, {57, 41.1296}, {58, 34.2274}, {59, 33.4401}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 31.4132}, {1, 45.6347}, {2, 0}, {3, 19.1504}, {4, 25.4004}, {5, 33.8808}, {6, 15.4004}, {7, 37.2807}, {8, 25.0979}, {9, 26.144}, {10, 29.1618}, {11, 21.3553}, {12, 35.6921}, {13, 7.94897}, {14, 19.2768}, {15, 38.0937}, {16, 37.0034}, {17, 35.6033}, {18, 39.4257}, {19, 37.2011}, {20, 24.4307}, {21, 37.6632}, {22, 33.2069}, {23, 25.8819}, {24, 25.4004}, {25, 22.394}, {26, 26.6504}, {27, 32.5178}, {28, 39.0485}, {29, 43.6545}, {30, 26.0307}, {31, 24.867}, {32, 21.144}, {33, 2.79508}, {34, 7.30202}, {35, 30.5543}, {36, 32.5969}, {37, 12.6053}, {38, 41.8847}, {39, 46.411}, {40, 36.7165}, {41, 21.6504}, {42, 35.8576}, {43, 32.3865}, {44, 27.394}, {45, 13.8553}, {46, 18.0268}, {47, 4.50694}, {48, 35.2986}, {49, 28.644}, {50, 30.875}, {51, 31.6504}, {52, 29.7807}, {53, 31.6631}, {54, 34.8865}, {55, 30.3888}, {56, 30.4118}, {57, 31.5485}, {58, 33.5308}, {59, 38.0369}, 