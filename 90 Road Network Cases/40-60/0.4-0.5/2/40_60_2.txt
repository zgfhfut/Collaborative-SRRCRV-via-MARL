node_num : 40
demand_node_num : 16
edge_num : 60
damaged_edge_num : 30
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 5, 6, 8, 10, 11, 12, 14, 16, 17, 21, 22, 27, 29, 31, 36, 37,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 12), Line(0, 14), Line(0, 17), Line(0, 39), Line(1, 9), Line(1, 24), Line(1, 31), Line(2, 6), Line(2, 7), Line(3, 8), Line(3, 11), Line(3, 21), Line(3, 32), Line(3, 36), Line(4, 23), Line(4, 34), Line(5, 15), Line(5, 23), Line(5, 28), Line(6, 10), Line(7, 9), Line(8, 21), Line(8, 26), Line(8, 38), Line(9, 28), Line(9, 31), Line(10, 29), Line(11, 31), Line(11, 33), Line(12, 18), Line(12, 37), Line(13, 27), Line(13, 38), Line(14, 15), Line(14, 38), Line(16, 18), Line(16, 22), Line(17, 19), Line(17, 23), Line(17, 32), Line(17, 34), Line(18, 29), Line(19, 27), Line(19, 33), Line(20, 26), Line(20, 28), Line(20, 33), Line(21, 23), Line(21, 36), Line(22, 37), Line(24, 35), Line(25, 30), Line(25, 35), Line(26, 36), Line(28, 35), Line(30, 31), Line(31, 33), Line(32, 33), Line(36, 37), Line(38, 39),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 14), Line(1, 9), Line(1, 24), Line(2, 7), Line(3, 21), Line(3, 32), Line(3, 36), Line(4, 23), Line(4, 34), Line(5, 28), Line(6, 10), Line(8, 26), Line(9, 28), Line(9, 31), Line(11, 33), Line(13, 38), Line(14, 15), Line(16, 18), Line(17, 19), Line(17, 23), Line(17, 34), Line(19, 27), Line(20, 28), Line(20, 33), Line(21, 36), Line(22, 37), Line(25, 35), Line(30, 31), Line(31, 33), Line(32, 33),  };
const double demand_num_pro = 0.4;
const double damaged_edge_pro = 0.5;
/*********************add_edge*************************/
g.add_edge(0, 12, 4);
g.add_edge(0, 14, 3.16);
g.add_edge(0, 17, 1);
g.add_edge(0, 39, 5.09);
g.add_edge(1, 9, 6.7);
g.add_edge(1, 24, 2.82);
g.add_edge(1, 31, 7.21);
g.add_edge(2, 6, 1);
g.add_edge(2, 7, 2.23);
g.add_edge(3, 8, 9.05);
g.add_edge(3, 11, 7.28);
g.add_edge(3, 21, 3.6);
g.add_edge(3, 32, 1);
g.add_edge(3, 36, 8.48);
g.add_edge(4, 23, 6.4);
g.add_edge(4, 34, 2.23);
g.add_edge(5, 15, 3.16);
g.add_edge(5, 23, 6.4);
g.add_edge(5, 28, 5.09);
g.add_edge(6, 10, 2.23);
g.add_edge(7, 9, 5.38);
g.add_edge(8, 21, 6.7);
g.add_edge(8, 26, 9.84);
g.add_edge(8, 38, 4.12);
g.add_edge(9, 28, 4);
g.add_edge(9, 31, 7);
g.add_edge(10, 29, 4);
g.add_edge(11, 31, 2);
g.add_edge(11, 33, 7.81);
g.add_edge(12, 18, 5);
g.add_edge(12, 37, 2.82);
g.add_edge(13, 27, 8.6);
g.add_edge(13, 38, 9.43);
g.add_edge(14, 15, 4);
g.add_edge(14, 38, 8.06);
g.add_edge(16, 18, 3.16);
g.add_edge(16, 22, 5);
g.add_edge(17, 19, 6.32);
g.add_edge(17, 23, 8.6);
g.add_edge(17, 32, 5.83);
g.add_edge(17, 34, 4);
g.add_edge(18, 29, 4.12);
g.add_edge(19, 27, 1);
g.add_edge(19, 33, 9.43);
g.add_edge(20, 26, 6.7);
g.add_edge(20, 28, 7.61);
g.add_edge(20, 33, 8.6);
g.add_edge(21, 23, 7.21);
g.add_edge(21, 36, 5);
g.add_edge(22, 37, 6.32);
g.add_edge(24, 35, 2.23);
g.add_edge(25, 30, 1);
g.add_edge(25, 35, 5.09);
g.add_edge(26, 36, 6.7);
g.add_edge(28, 35, 3.16);
g.add_edge(30, 31, 4);
g.add_edge(31, 33, 9.21);
g.add_edge(32, 33, 7);
g.add_edge(36, 37, 2);
g.add_edge(38, 39, 9.84);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 7.57);
g.set_importance(6, 6.41);
g.set_importance(7, 0);
g.set_importance(8, 2.79);
g.set_importance(9, 0);
g.set_importance(10, 6.56);
g.set_importance(11, 6.12);
g.set_importance(12, 2.12);
g.set_importance(13, 0);
g.set_importance(14, 7.56);
g.set_importance(15, 0);
g.set_importance(16, 8.2);
g.set_importance(17, 8.41);
g.set_importance(18, 0);
g.set_importance(19, 0);
g.set_importance(20, 0);
g.set_importance(21, 2.52);
g.set_importance(22, 2.77);
g.set_importance(23, 0);
g.set_importance(24, 0);
g.set_importance(25, 0);
g.set_importance(26, 0);
g.set_importance(27, 7.59);
g.set_importance(28, 0);
g.set_importance(29, 4.53);
g.set_importance(30, 0);
g.set_importance(31, 1.2);
g.set_importance(32, 0);
g.set_importance(33, 0);
g.set_importance(34, 0);
g.set_importance(35, 0);
g.set_importance(36, 9.25);
g.set_importance(37, 4.98);
g.set_importance(38, 0);
g.set_importance(39, 0);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 14), 3.9);
g.set_repair_time(Line(1, 9), 3.47);
g.set_repair_time(Line(1, 24), 4.78);
g.set_repair_time(Line(2, 7), 3.8);
g.set_repair_time(Line(3, 21), 2.54);
g.set_repair_time(Line(3, 32), 2.86);
g.set_repair_time(Line(3, 36), 2.83);
g.set_repair_time(Line(4, 23), 2.37);
g.set_repair_time(Line(4, 34), 4.63);
g.set_repair_time(Line(5, 28), 2.7);
g.set_repair_time(Line(6, 10), 1.81);
g.set_repair_time(Line(8, 26), 1.98);
g.set_repair_time(Line(9, 28), 4.02);
g.set_repair_time(Line(9, 31), 2.99);
g.set_repair_time(Line(11, 33), 4.26);
g.set_repair_time(Line(13, 38), 2.37);
g.set_repair_time(Line(14, 15), 1.81);
g.set_repair_time(Line(16, 18), 2.26);
g.set_repair_time(Line(17, 19), 2.44);
g.set_repair_time(Line(17, 23), 3.8);
g.set_repair_time(Line(17, 34), 1.23);
g.set_repair_time(Line(19, 27), 4.34);
g.set_repair_time(Line(20, 28), 3.74);
g.set_repair_time(Line(20, 33), 4.89);
g.set_repair_time(Line(21, 36), 4.28);
g.set_repair_time(Line(22, 37), 4.26);
g.set_repair_time(Line(25, 35), 1.62);
g.set_repair_time(Line(30, 31), 3.29);
g.set_repair_time(Line(31, 33), 1.21);
g.set_repair_time(Line(32, 33), 3.3);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 29.525}, {2, 25.4375}, {3, 9.7875}, {4, 9.0375}, {5, 12.9}, {6, 24.1875}, {7, 28.225}, {8, 19.175}, {9, 24.2625}, {10, 21.4}, {11, 18.8875}, {12, 5}, {13, 21.15}, {14, 3.95}, {15, 8.95}, {16, 15.2}, {17, 1.25}, {18, 11.25}, {19, 9.15}, {20, 27.775}, {21, 14.2875}, {22, 16.425}, {23, 12}, {24, 26}, {25, 27.6375}, {26, 19.4}, {27, 10.4}, {28, 19.2625}, {29, 16.4}, {30, 26.3875}, {31, 21.3875}, {32, 8.5375}, {33, 17.2875}, {34, 6.25}, {35, 23.2125}, {36, 11.025}, {37, 8.525}, {38, 14.025}, {39, 6.3625}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 29.525}, {1, 0}, {2, 17.8875}, {3, 20.6125}, {4, 32.625}, {5, 16.625}, {6, 19.1375}, {7, 15.1}, {8, 31.925}, {9, 8.375}, {10, 21.925}, {11, 11.5125}, {12, 34.525}, {13, 44.3125}, {14, 25.575}, {15, 20.575}, {16, 36.025}, {17, 29.15}, {18, 32.075}, {19, 32.3125}, {20, 19.775}, {21, 25.1125}, {22, 41.6125}, {23, 24.625}, {24, 3.525}, {25, 12.675}, {26, 28.15}, {27, 33.5625}, {28, 10.2625}, {29, 26.925}, {30, 13.925}, {31, 9.0125}, {32, 21.8625}, {33, 20.525}, {34, 34.15}, {35, 6.3125}, {36, 31.2125}, {37, 33.7125}, {38, 35.65}, {39, 35.8875}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 25.4375}, {1, 17.8875}, {2, 0}, {3, 29.8625}, {4, 34.475}, {5, 20.875}, {6, 1.25}, {7, 2.7875}, {8, 41.0875}, {9, 9.5125}, {10, 4.0375}, {11, 20.7625}, {12, 20.4375}, {13, 46.5875}, {14, 29.3875}, {15, 24.825}, {16, 18.1375}, {17, 26.6875}, {18, 14.1875}, {19, 34.5875}, {20, 24.025}, {21, 32.7125}, {22, 24.3875}, {23, 28.875}, {24, 21.25}, {25, 24.5125}, {26, 32.4}, {27, 35.8375}, {28, 14.5125}, {29, 9.0375}, {30, 23.2625}, {31, 18.2625}, {32, 31.1125}, {33, 29.775}, {34, 31.6875}, {35, 18.4625}, {36, 26.4625}, {37, 23.9625}, {38, 39.4625}, {39, 31.8}, 