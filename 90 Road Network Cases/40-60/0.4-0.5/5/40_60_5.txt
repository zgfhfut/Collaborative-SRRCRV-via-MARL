node_num : 40
demand_node_num : 16
edge_num : 60
damaged_edge_num : 30
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 3, 4, 5, 8, 9, 10, 12, 13, 21, 22, 24, 27, 31, 36, 37, 38,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 7), Line(0, 35), Line(0, 36), Line(1, 6), Line(1, 23), Line(1, 26), Line(2, 13), Line(2, 16), Line(2, 17), Line(3, 7), Line(3, 11), Line(3, 28), Line(4, 17), Line(4, 21), Line(4, 38), Line(5, 11), Line(5, 24), Line(5, 26), Line(5, 37), Line(6, 32), Line(6, 34), Line(7, 10), Line(8, 12), Line(8, 18), Line(8, 27), Line(8, 30), Line(9, 24), Line(9, 33), Line(10, 25), Line(10, 33), Line(10, 37), Line(11, 29), Line(11, 31), Line(12, 22), Line(12, 25), Line(12, 28), Line(13, 14), Line(13, 36), Line(14, 17), Line(14, 21), Line(15, 20), Line(15, 23), Line(15, 31), Line(16, 20), Line(16, 33), Line(17, 19), Line(18, 22), Line(18, 34), Line(19, 28), Line(19, 32), Line(20, 27), Line(22, 35), Line(23, 32), Line(24, 28), Line(24, 29), Line(26, 29), Line(27, 28), Line(30, 31), Line(31, 32), Line(38, 39),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 7), Line(0, 35), Line(1, 23), Line(1, 26), Line(2, 13), Line(2, 16), Line(2, 17), Line(3, 7), Line(3, 28), Line(4, 17), Line(4, 38), Line(5, 24), Line(6, 32), Line(6, 34), Line(8, 12), Line(8, 30), Line(9, 33), Line(14, 17), Line(14, 21), Line(15, 23), Line(15, 31), Line(19, 28), Line(20, 27), Line(22, 35), Line(23, 32), Line(24, 28), Line(24, 29), Line(27, 28), Line(31, 32), Line(38, 39),  };
const double demand_num_pro = 0.4;
const double damaged_edge_pro = 0.5;
/*********************add_edge*************************/
g.add_edge(0, 7, 4.12);
g.add_edge(0, 35, 6.32);
g.add_edge(0, 36, 2.23);
g.add_edge(1, 6, 6.4);
g.add_edge(1, 23, 5);
g.add_edge(1, 26, 2);
g.add_edge(2, 13, 2.23);
g.add_edge(2, 16, 2.23);
g.add_edge(2, 17, 3);
g.add_edge(3, 7, 9.21);
g.add_edge(3, 11, 8.24);
g.add_edge(3, 28, 8.94);
g.add_edge(4, 17, 4.47);
g.add_edge(4, 21, 5);
g.add_edge(4, 38, 1);
g.add_edge(5, 11, 1.41);
g.add_edge(5, 24, 8.24);
g.add_edge(5, 26, 1.41);
g.add_edge(5, 37, 7.07);
g.add_edge(6, 32, 4.24);
g.add_edge(6, 34, 7.07);
g.add_edge(7, 10, 9.89);
g.add_edge(8, 12, 2);
g.add_edge(8, 18, 7);
g.add_edge(8, 27, 7.81);
g.add_edge(8, 30, 5);
g.add_edge(9, 24, 3.16);
g.add_edge(9, 33, 1.41);
g.add_edge(10, 25, 6.7);
g.add_edge(10, 33, 2.23);
g.add_edge(10, 37, 10.63);
g.add_edge(11, 29, 1);
g.add_edge(11, 31, 7.61);
g.add_edge(12, 22, 3);
g.add_edge(12, 25, 8.24);
g.add_edge(12, 28, 7.61);
g.add_edge(13, 14, 3.16);
g.add_edge(13, 36, 3);
g.add_edge(14, 17, 4);
g.add_edge(14, 21, 3);
g.add_edge(15, 20, 1.41);
g.add_edge(15, 23, 2);
g.add_edge(15, 31, 1);
g.add_edge(16, 20, 1);
g.add_edge(16, 33, 7.07);
g.add_edge(17, 19, 5.09);
g.add_edge(18, 22, 9.48);
g.add_edge(18, 34, 7.07);
g.add_edge(19, 28, 7.21);
g.add_edge(19, 32, 3.6);
g.add_edge(20, 27, 2.82);
g.add_edge(22, 35, 7.28);
g.add_edge(23, 32, 3.16);
g.add_edge(24, 28, 9.48);
g.add_edge(24, 29, 9.84);
g.add_edge(26, 29, 3.6);
g.add_edge(27, 28, 8.06);
g.add_edge(30, 31, 7.28);
g.add_edge(31, 32, 1);
g.add_edge(38, 39, 6.08);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 5.5);
g.set_importance(4, 7.17);
g.set_importance(5, 8.73);
g.set_importance(6, 0);
g.set_importance(7, 0);
g.set_importance(8, 1.68);
g.set_importance(9, 3.06);
g.set_importance(10, 3.9);
g.set_importance(11, 0);
g.set_importance(12, 7.21);
g.set_importance(13, 2.31);
g.set_importance(14, 0);
g.set_importance(15, 0);
g.set_importance(16, 0);
g.set_importance(17, 0);
g.set_importance(18, 0);
g.set_importance(19, 0);
g.set_importance(20, 0);
g.set_importance(21, 6.05);
g.set_importance(22, 5.71);
g.set_importance(23, 0);
g.set_importance(24, 7.7);
g.set_importance(25, 0);
g.set_importance(26, 0);
g.set_importance(27, 6.19);
g.set_importance(28, 0);
g.set_importance(29, 0);
g.set_importance(30, 0);
g.set_importance(31, 4.79);
g.set_importance(32, 0);
g.set_importance(33, 0);
g.set_importance(34, 0);
g.set_importance(35, 0);
g.set_importance(36, 2.7);
g.set_importance(37, 5.65);
g.set_importance(38, 2.8);
g.set_importance(39, 0);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 7), 1.03);
g.set_repair_time(Line(0, 35), 3.47);
g.set_repair_time(Line(1, 23), 4.42);
g.set_repair_time(Line(1, 26), 4.29);
g.set_repair_time(Line(2, 13), 2.1);
g.set_repair_time(Line(2, 16), 4.56);
g.set_repair_time(Line(2, 17), 5);
g.set_repair_time(Line(3, 7), 2.61);
g.set_repair_time(Line(3, 28), 4.74);
g.set_repair_time(Line(4, 17), 1.37);
g.set_repair_time(Line(4, 38), 2.43);
g.set_repair_time(Line(5, 24), 1.72);
g.set_repair_time(Line(6, 32), 3.35);
g.set_repair_time(Line(6, 34), 4.91);
g.set_repair_time(Line(8, 12), 4.87);
g.set_repair_time(Line(8, 30), 1.96);
g.set_repair_time(Line(9, 33), 2.08);
g.set_repair_time(Line(14, 17), 4.76);
g.set_repair_time(Line(14, 21), 3.76);
g.set_repair_time(Line(15, 23), 4.29);
g.set_repair_time(Line(15, 31), 2.44);
g.set_repair_time(Line(19, 28), 1.92);
g.set_repair_time(Line(20, 27), 3.71);
g.set_repair_time(Line(22, 35), 4.55);
g.set_repair_time(Line(23, 32), 4.92);
g.set_repair_time(Line(24, 28), 4.9);
g.set_repair_time(Line(24, 29), 2.61);
g.set_repair_time(Line(27, 28), 3.21);
g.set_repair_time(Line(31, 32), 3.61);
g.set_repair_time(Line(38, 39), 1.99);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 23.875}, {2, 9.325}, {3, 16.6625}, {4, 18.6625}, {5, 27.65}, {6, 22.925}, {7, 5.15}, {8, 23.25}, {9, 22.0625}, {10, 17.5125}, {11, 25.8875}, {12, 20.75}, {13, 6.5375}, {14, 10.4875}, {15, 15.125}, {16, 12.1125}, {17, 13.075}, {18, 28.85}, {19, 19.4375}, {20, 13.3625}, {21, 14.2375}, {22, 17}, {23, 17.625}, {24, 26.0125}, {25, 25.8875}, {26, 26.375}, {27, 16.8875}, {28, 26.9625}, {29, 27.1375}, {30, 25.475}, {31, 16.375}, {32, 17.625}, {33, 20.3}, {34, 31.7625}, {35, 7.9}, {36, 2.7875}, {37, 30.8}, {38, 19.9125}, {39, 27.5125}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 23.875}, {1, 0}, {2, 14.55}, {3, 16.325}, {4, 23.8875}, {5, 4.2625}, {6, 8}, {7, 27.8375}, {8, 23.8}, {9, 18.5125}, {10, 23.0625}, {11, 6.025}, {12, 26.3}, {13, 17.3375}, {14, 21.2875}, {15, 8.75}, {16, 11.7625}, {17, 18.3}, {18, 25.675}, {19, 14.7}, {20, 10.5125}, {21, 25.0375}, {22, 30.05}, {23, 6.25}, {24, 14.5625}, {25, 31.4375}, {26, 2.5}, {27, 14.0375}, {28, 23.7125}, {29, 7}, {30, 19.1}, {31, 10}, {32, 10.2}, {33, 20.275}, {34, 16.8375}, {35, 31.775}, {36, 21.0875}, {37, 13.1}, {38, 25.1375}, {39, 32.7375}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 9.325}, {1, 14.55}, {2, 0}, {3, 25.9875}, {4, 9.3375}, {5, 18.325}, {6, 13.6}, {7, 14.475}, {8, 17.325}, {9, 13.3875}, {10, 14.4125}, {11, 16.5625}, {12, 19.825}, {13, 2.7875}, {14, 6.7375}, {15, 5.8}, {16, 2.7875}, {17, 3.75}, {18, 26.075}, {19, 10.1125}, {20, 4.0375}, {21, 10.4875}, {22, 23.575}, {23, 8.3}, {24, 17.3375}, {25, 22.7875}, {26, 17.05}, {27, 7.5625}, {28, 17.6375}, {29, 17.8125}, {30, 16.15}, {31, 7.05}, {32, 8.3}, {33, 11.625}, {34, 22.4375}, {35, 17.225}, {36, 6.5375}, {37, 27.1625}, {38, 10.5875}, {39, 18.1875}, 