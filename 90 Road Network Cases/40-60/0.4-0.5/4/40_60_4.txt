node_num : 40
demand_node_num : 16
edge_num : 60
damaged_edge_num : 30
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 4, 5, 6, 8, 9, 14, 16, 17, 18, 26, 27, 30, 31, 33, 35, 37,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 3), Line(0, 12), Line(0, 16), Line(1, 15), Line(1, 19), Line(1, 25), Line(1, 37), Line(2, 5), Line(2, 34), Line(3, 14), Line(3, 23), Line(4, 24), Line(4, 31), Line(4, 39), Line(5, 17), Line(5, 21), Line(6, 25), Line(6, 32), Line(6, 37), Line(7, 11), Line(7, 18), Line(7, 38), Line(8, 22), Line(8, 24), Line(9, 28), Line(9, 36), Line(10, 22), Line(10, 39), Line(11, 19), Line(11, 30), Line(12, 30), Line(13, 20), Line(13, 30), Line(14, 26), Line(14, 32), Line(14, 36), Line(15, 19), Line(15, 23), Line(16, 20), Line(16, 28), Line(16, 35), Line(17, 34), Line(17, 35), Line(18, 27), Line(18, 29), Line(19, 20), Line(20, 26), Line(21, 33), Line(23, 25), Line(24, 38), Line(25, 28), Line(25, 33), Line(26, 29), Line(27, 33), Line(28, 32), Line(31, 35), Line(31, 36), Line(31, 39), Line(33, 37), Line(35, 36),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 3), Line(0, 16), Line(1, 25), Line(2, 34), Line(4, 24), Line(4, 31), Line(4, 39), Line(5, 21), Line(7, 11), Line(7, 18), Line(8, 22), Line(8, 24), Line(9, 28), Line(10, 22), Line(10, 39), Line(12, 30), Line(14, 32), Line(15, 19), Line(16, 28), Line(16, 35), Line(17, 34), Line(17, 35), Line(18, 29), Line(21, 33), Line(23, 25), Line(24, 38), Line(25, 33), Line(27, 33), Line(31, 35), Line(31, 39),  };
const double demand_num_pro = 0.4;
const double damaged_edge_pro = 0.5;
/*********************add_edge*************************/
g.add_edge(0, 3, 4);
g.add_edge(0, 12, 2.82);
g.add_edge(0, 16, 1.41);
g.add_edge(1, 15, 2.82);
g.add_edge(1, 19, 5.38);
g.add_edge(1, 25, 2.82);
g.add_edge(1, 37, 1);
g.add_edge(2, 5, 4.12);
g.add_edge(2, 34, 3.6);
g.add_edge(3, 14, 2.82);
g.add_edge(3, 23, 4.12);
g.add_edge(4, 24, 8.6);
g.add_edge(4, 31, 7.81);
g.add_edge(4, 39, 5.83);
g.add_edge(5, 17, 4);
g.add_edge(5, 21, 3.6);
g.add_edge(6, 25, 2);
g.add_edge(6, 32, 3.6);
g.add_edge(6, 37, 2.23);
g.add_edge(7, 11, 2.82);
g.add_edge(7, 18, 3);
g.add_edge(7, 38, 6.4);
g.add_edge(8, 22, 4.12);
g.add_edge(8, 24, 7.81);
g.add_edge(9, 28, 6.08);
g.add_edge(9, 36, 4.12);
g.add_edge(10, 22, 3.16);
g.add_edge(10, 39, 2.82);
g.add_edge(11, 19, 1);
g.add_edge(11, 30, 2.23);
g.add_edge(12, 30, 9.05);
g.add_edge(13, 20, 9.05);
g.add_edge(13, 30, 5);
g.add_edge(14, 26, 4.24);
g.add_edge(14, 32, 1.41);
g.add_edge(14, 36, 4.47);
g.add_edge(15, 19, 8.06);
g.add_edge(15, 23, 4.47);
g.add_edge(16, 20, 1);
g.add_edge(16, 28, 5.65);
g.add_edge(16, 35, 7.07);
g.add_edge(17, 34, 2.82);
g.add_edge(17, 35, 4.12);
g.add_edge(18, 27, 8.94);
g.add_edge(18, 29, 8.06);
g.add_edge(19, 20, 8.54);
g.add_edge(20, 26, 7);
g.add_edge(21, 33, 1.41);
g.add_edge(23, 25, 6);
g.add_edge(24, 38, 1.41);
g.add_edge(25, 28, 1);
g.add_edge(25, 33, 4.12);
g.add_edge(26, 29, 6.4);
g.add_edge(27, 33, 5.83);
g.add_edge(28, 32, 2);
g.add_edge(31, 35, 9.43);
g.add_edge(31, 36, 5.38);
g.add_edge(31, 39, 2.23);
g.add_edge(33, 37, 3.16);
g.add_edge(35, 36, 6);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 5.06);
g.set_importance(5, 4.02);
g.set_importance(6, 1.95);
g.set_importance(7, 0);
g.set_importance(8, 6.02);
g.set_importance(9, 8.61);
g.set_importance(10, 0);
g.set_importance(11, 0);
g.set_importance(12, 0);
g.set_importance(13, 0);
g.set_importance(14, 7.07);
g.set_importance(15, 0);
g.set_importance(16, 8.72);
g.set_importance(17, 8.46);
g.set_importance(18, 6.75);
g.set_importance(19, 0);
g.set_importance(20, 0);
g.set_importance(21, 0);
g.set_importance(22, 0);
g.set_importance(23, 0);
g.set_importance(24, 0);
g.set_importance(25, 0);
g.set_importance(26, 6.59);
g.set_importance(27, 7.52);
g.set_importance(28, 0);
g.set_importance(29, 0);
g.set_importance(30, 3.07);
g.set_importance(31, 4.2);
g.set_importance(32, 0);
g.set_importance(33, 2.78);
g.set_importance(34, 0);
g.set_importance(35, 7.73);
g.set_importance(36, 0);
g.set_importance(37, 6.84);
g.set_importance(38, 0);
g.set_importance(39, 0);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 3), 3.09);
g.set_repair_time(Line(0, 16), 1.38);
g.set_repair_time(Line(1, 25), 1.18);
g.set_repair_time(Line(2, 34), 3.64);
g.set_repair_time(Line(4, 24), 4.65);
g.set_repair_time(Line(4, 31), 4.5);
g.set_repair_time(Line(4, 39), 2.35);
g.set_repair_time(Line(5, 21), 3.73);
g.set_repair_time(Line(7, 11), 2.34);
g.set_repair_time(Line(7, 18), 2.06);
g.set_repair_time(Line(8, 22), 1.78);
g.set_repair_time(Line(8, 24), 1.07);
g.set_repair_time(Line(9, 28), 1.27);
g.set_repair_time(Line(10, 22), 1.43);
g.set_repair_time(Line(10, 39), 2.62);
g.set_repair_time(Line(12, 30), 1.73);
g.set_repair_time(Line(14, 32), 4.06);
g.set_repair_time(Line(15, 19), 4.93);
g.set_repair_time(Line(16, 28), 2.6);
g.set_repair_time(Line(16, 35), 4.05);
g.set_repair_time(Line(17, 34), 2.56);
g.set_repair_time(Line(17, 35), 1.01);
g.set_repair_time(Line(18, 29), 2.7);
g.set_repair_time(Line(21, 33), 1.24);
g.set_repair_time(Line(23, 25), 3.81);
g.set_repair_time(Line(24, 38), 4.44);
g.set_repair_time(Line(25, 33), 2.04);
g.set_repair_time(Line(27, 33), 2.67);
g.set_repair_time(Line(31, 35), 2.44);
g.set_repair_time(Line(31, 39), 3.9);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 13.6}, {2, 23.775}, {3, 5}, {4, 30.6}, {5, 20.75}, {6, 12.575}, {7, 18.4625}, {8, 36.25}, {9, 16.425}, {10, 27.15}, {11, 14.9375}, {12, 3.525}, {13, 14.325}, {14, 8.525}, {15, 15.7375}, {16, 1.7625}, {17, 15.75}, {18, 22.2125}, {19, 13.6875}, {20, 3.0125}, {21, 16.9875}, {22, 31.1}, {23, 10.15}, {24, 28.225}, {25, 10.075}, {26, 11.7625}, {27, 22.5125}, {28, 8.825}, {29, 19.7625}, {30, 14.8375}, {31, 20.8375}, {32, 10.2875}, {33, 15.225}, {34, 19.275}, {35, 10.6}, {36, 14.1125}, {37, 14.85}, {38, 26.4625}, {39, 23.625}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 13.6}, {1, 0}, {2, 16.6125}, {3, 12.5625}, {4, 31.1125}, {5, 11.4625}, {6, 4.0375}, {7, 11.5}, {8, 31.025}, {9, 12.375}, {10, 27.6625}, {11, 7.975}, {12, 17.125}, {13, 17.0125}, {14, 9.0375}, {15, 3.525}, {16, 11.8375}, {17, 16.4625}, {18, 15.25}, {19, 6.725}, {20, 13.0875}, {21, 6.9625}, {22, 31.6125}, {23, 9.1125}, {24, 21.2625}, {25, 3.525}, {26, 14.3375}, {27, 12.4875}, {28, 4.775}, {29, 22.3375}, {30, 10.7625}, {31, 21.35}, {32, 7.275}, {33, 5.2}, {34, 19.9875}, {35, 20.675}, {36, 14.625}, {37, 1.25}, {38, 19.5}, {39, 24.1375}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 23.775}, {1, 16.6125}, {2, 0}, {3, 25.6}, {4, 34.725}, {5, 5.15}, {6, 18.15}, {7, 28.1125}, {8, 40.375}, {9, 25.4125}, {10, 31.275}, {11, 24.5875}, {12, 27.3}, {13, 33.625}, {14, 22.075}, {15, 20.1375}, {16, 22.0125}, {17, 8.025}, {18, 29.875}, {19, 23.3375}, {20, 23.2625}, {21, 9.65}, {22, 35.225}, {23, 24.0625}, {24, 37.875}, {25, 16.5625}, {26, 27.375}, {27, 18.7}, {28, 17.8125}, {29, 35.375}, {30, 27.375}, {31, 24.9625}, {32, 20.3125}, {33, 11.4125}, {34, 4.5}, {35, 13.175}, {36, 20.675}, {37, 15.3625}, {38, 36.1125}, {39, 27.75}, 