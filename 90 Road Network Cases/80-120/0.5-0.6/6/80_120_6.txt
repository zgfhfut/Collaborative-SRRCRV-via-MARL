node_num : 80
demand_node_num : 40
edge_num : 120
damaged_edge_num : 72
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 29, 31, 32, 33, 34, 36, 37, 38, 39, 43, 49, 52, 55, 56, 57, 60, 62, 65, 66, 67, 68, 69, 72, 74, 75, 77, 79,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 11), Line(0, 14), Line(0, 17), Line(0, 60), Line(0, 77), Line(1, 2), Line(1, 68), Line(2, 74), Line(3, 21), Line(3, 71), Line(4, 15), Line(4, 16), Line(4, 65), Line(4, 71), Line(5, 27), Line(5, 42), Line(6, 17), Line(6, 46), Line(6, 51), Line(7, 37), Line(7, 47), Line(8, 22), Line(8, 66), Line(8, 75), Line(9, 17), Line(9, 32), Line(9, 37), Line(9, 71), Line(9, 73), Line(10, 22), Line(10, 53), Line(10, 76), Line(10, 79), Line(11, 51), Line(11, 52), Line(11, 73), Line(12, 31), Line(12, 61), Line(12, 75), Line(13, 32), Line(13, 61), Line(14, 62), Line(15, 41), Line(15, 56), Line(15, 57), Line(16, 19), Line(16, 34), Line(16, 50), Line(17, 40), Line(18, 66), Line(18, 79), Line(19, 24), Line(19, 43), Line(19, 50), Line(20, 26), Line(20, 43), Line(20, 48), Line(21, 56), Line(21, 65), Line(22, 55), Line(23, 26), Line(23, 46), Line(24, 26), Line(24, 48), Line(24, 60), Line(25, 61), Line(25, 78), Line(26, 35), Line(27, 67), Line(27, 77), Line(28, 30), Line(28, 37), Line(28, 40), Line(29, 38), Line(29, 52), Line(29, 61), Line(30, 45), Line(30, 67), Line(30, 69), Line(31, 57), Line(31, 75), Line(32, 35), Line(32, 76), Line(33, 53), Line(33, 56), Line(33, 58), Line(34, 39), Line(34, 53), Line(35, 45), Line(36, 37), Line(36, 42), Line(36, 50), Line(38, 44), Line(38, 51), Line(39, 52), Line(39, 72), Line(40, 69), Line(41, 63), Line(43, 71), Line(44, 54), Line(45, 70), Line(46, 67), Line(47, 54), Line(47, 57), Line(49, 64), Line(49, 79), Line(50, 74), Line(53, 63), Line(55, 56), Line(56, 61), Line(56, 64), Line(58, 73), Line(59, 72), Line(59, 76), Line(61, 72), Line(62, 70), Line(64, 77), Line(65, 71), Line(68, 78), Line(69, 72),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 14), Line(0, 17), Line(0, 60), Line(1, 2), Line(3, 21), Line(4, 65), Line(4, 71), Line(5, 27), Line(6, 17), Line(7, 47), Line(9, 37), Line(9, 71), Line(9, 73), Line(10, 53), Line(10, 76), Line(11, 51), Line(11, 52), Line(11, 73), Line(12, 61), Line(13, 32), Line(13, 61), Line(14, 62), Line(15, 57), Line(16, 50), Line(17, 40), Line(18, 66), Line(18, 79), Line(19, 43), Line(19, 50), Line(20, 26), Line(20, 43), Line(21, 56), Line(22, 55), Line(23, 46), Line(24, 26), Line(24, 48), Line(24, 60), Line(25, 78), Line(26, 35), Line(27, 67), Line(28, 30), Line(28, 37), Line(29, 38), Line(29, 52), Line(29, 61), Line(30, 45), Line(31, 75), Line(32, 35), Line(32, 76), Line(33, 58), Line(34, 39), Line(36, 42), Line(38, 44), Line(38, 51), Line(39, 52), Line(39, 72), Line(41, 63), Line(44, 54), Line(47, 54), Line(49, 64), Line(49, 79), Line(53, 63), Line(55, 56), Line(56, 64), Line(58, 73), Line(59, 76), Line(61, 72), Line(62, 70), Line(64, 77), Line(65, 71), Line(68, 78), Line(69, 72),  };
const double demand_num_pro = 0.5;
const double damaged_edge_pro = 0.6;
/*********************add_edge*************************/
g.add_edge(0, 11, 5.65);
g.add_edge(0, 14, 2);
g.add_edge(0, 17, 7.07);
g.add_edge(0, 60, 5.65);
g.add_edge(0, 77, 8.54);
g.add_edge(1, 2, 5);
g.add_edge(1, 68, 7.07);
g.add_edge(2, 74, 6.32);
g.add_edge(3, 21, 4.12);
g.add_edge(3, 71, 5);
g.add_edge(4, 15, 1);
g.add_edge(4, 16, 5.38);
g.add_edge(4, 65, 6.32);
g.add_edge(4, 71, 6.4);
g.add_edge(5, 27, 6.7);
g.add_edge(5, 42, 4.47);
g.add_edge(6, 17, 6.08);
g.add_edge(6, 46, 7.61);
g.add_edge(6, 51, 6.32);
g.add_edge(7, 37, 5.09);
g.add_edge(7, 47, 3.6);
g.add_edge(8, 22, 6);
g.add_edge(8, 66, 5.09);
g.add_edge(8, 75, 3);
g.add_edge(9, 17, 3.6);
g.add_edge(9, 32, 4.24);
g.add_edge(9, 37, 2.23);
g.add_edge(9, 71, 3.6);
g.add_edge(9, 73, 5.09);
g.add_edge(10, 22, 7.28);
g.add_edge(10, 53, 4.24);
g.add_edge(10, 76, 7.07);
g.add_edge(10, 79, 10);
g.add_edge(11, 51, 5);
g.add_edge(11, 52, 7.28);
g.add_edge(11, 73, 1);
g.add_edge(12, 31, 1);
g.add_edge(12, 61, 8.54);
g.add_edge(12, 75, 7);
g.add_edge(13, 32, 8);
g.add_edge(13, 61, 6);
g.add_edge(14, 62, 7.07);
g.add_edge(15, 41, 7.21);
g.add_edge(15, 56, 2.23);
g.add_edge(15, 57, 2.23);
g.add_edge(16, 19, 6.08);
g.add_edge(16, 34, 2);
g.add_edge(16, 50, 6.32);
g.add_edge(17, 40, 3);
g.add_edge(18, 66, 2);
g.add_edge(18, 79, 5.38);
g.add_edge(19, 24, 6.32);
g.add_edge(19, 43, 3.16);
g.add_edge(19, 50, 3);
g.add_edge(20, 26, 8.06);
g.add_edge(20, 43, 8.06);
g.add_edge(20, 48, 2.82);
g.add_edge(21, 56, 7);
g.add_edge(21, 65, 2.23);
g.add_edge(22, 55, 5.09);
g.add_edge(23, 26, 6.4);
g.add_edge(23, 46, 2.23);
g.add_edge(24, 26, 8.94);
g.add_edge(24, 48, 2.23);
g.add_edge(24, 60, 8.06);
g.add_edge(25, 61, 5.09);
g.add_edge(25, 78, 2.23);
g.add_edge(26, 35, 5);
g.add_edge(27, 67, 9.21);
g.add_edge(27, 77, 1);
g.add_edge(28, 30, 5);
g.add_edge(28, 37, 6.7);
g.add_edge(28, 40, 9.05);
g.add_edge(29, 38, 12.04);
g.add_edge(29, 52, 2.23);
g.add_edge(29, 61, 3);
g.add_edge(30, 45, 4.12);
g.add_edge(30, 67, 5.38);
g.add_edge(30, 69, 2.23);
g.add_edge(31, 57, 10);
g.add_edge(31, 75, 7.07);
g.add_edge(32, 35, 8.06);
g.add_edge(32, 76, 6.32);
g.add_edge(33, 53, 4.12);
g.add_edge(33, 56, 8.54);
g.add_edge(33, 58, 5.09);
g.add_edge(34, 39, 2.82);
g.add_edge(34, 53, 3.6);
g.add_edge(35, 45, 9.84);
g.add_edge(36, 37, 4.47);
g.add_edge(36, 42, 3.6);
g.add_edge(36, 50, 3.16);
g.add_edge(38, 44, 9.48);
g.add_edge(38, 51, 3.16);
g.add_edge(39, 52, 3);
g.add_edge(39, 72, 6.08);
g.add_edge(40, 69, 7.07);
g.add_edge(41, 63, 3);
g.add_edge(43, 71, 5.38);
g.add_edge(44, 54, 9.21);
g.add_edge(45, 70, 6.7);
g.add_edge(46, 67, 7.07);
g.add_edge(47, 54, 4.12);
g.add_edge(47, 57, 4.47);
g.add_edge(49, 64, 1.41);
g.add_edge(49, 79, 2.23);
g.add_edge(50, 74, 1);
g.add_edge(53, 63, 4);
g.add_edge(55, 56, 2.23);
g.add_edge(56, 61, 7.21);
g.add_edge(56, 64, 3.6);
g.add_edge(58, 73, 8.54);
g.add_edge(59, 72, 3.6);
g.add_edge(59, 76, 2.23);
g.add_edge(61, 72, 7.61);
g.add_edge(62, 70, 1.41);
g.add_edge(64, 77, 6.08);
g.add_edge(65, 71, 6.08);
g.add_edge(68, 78, 5.83);
g.add_edge(69, 72, 6);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 0);
g.set_importance(6, 0);
g.set_importance(7, 0);
g.set_importance(8, 0);
g.set_importance(9, 8.79);
g.set_importance(10, 2.3);
g.set_importance(11, 3.39);
g.set_importance(12, 4.58);
g.set_importance(13, 4.96);
g.set_importance(14, 8.25);
g.set_importance(15, 3.03);
g.set_importance(16, 0);
g.set_importance(17, 9.68);
g.set_importance(18, 5.59);
g.set_importance(19, 0);
g.set_importance(20, 4.68);
g.set_importance(21, 7.23);
g.set_importance(22, 6.81);
g.set_importance(23, 4.07);
g.set_importance(24, 0);
g.set_importance(25, 0);
g.set_importance(26, 0);
g.set_importance(27, 0);
g.set_importance(28, 0);
g.set_importance(29, 3.28);
g.set_importance(30, 0);
g.set_importance(31, 5.21);
g.set_importance(32, 1.99);
g.set_importance(33, 9.85);
g.set_importance(34, 6.42);
g.set_importance(35, 0);
g.set_importance(36, 1.39);
g.set_importance(37, 8.74);
g.set_importance(38, 2.94);
g.set_importance(39, 6.48);
g.set_importance(40, 0);
g.set_importance(41, 0);
g.set_importance(42, 0);
g.set_importance(43, 2.14);
g.set_importance(44, 0);
g.set_importance(45, 0);
g.set_importance(46, 0);
g.set_importance(47, 0);
g.set_importance(48, 0);
g.set_importance(49, 3.17);
g.set_importance(50, 0);
g.set_importance(51, 0);
g.set_importance(52, 7.22);
g.set_importance(53, 0);
g.set_importance(54, 0);
g.set_importance(55, 1.6);
g.set_importance(56, 6.54);
g.set_importance(57, 1.55);
g.set_importance(58, 0);
g.set_importance(59, 0);
g.set_importance(60, 4.34);
g.set_importance(61, 0);
g.set_importance(62, 3.66);
g.set_importance(63, 0);
g.set_importance(64, 0);
g.set_importance(65, 1.16);
g.set_importance(66, 2.96);
g.set_importance(67, 8.28);
g.set_importance(68, 8.08);
g.set_importance(69, 9.82);
g.set_importance(70, 0);
g.set_importance(71, 0);
g.set_importance(72, 3.57);
g.set_importance(73, 0);
g.set_importance(74, 5.43);
g.set_importance(75, 3.34);
g.set_importance(76, 0);
g.set_importance(77, 1.2);
g.set_importance(78, 0);
g.set_importance(79, 4.52);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 14), 4.21);
g.set_repair_time(Line(0, 17), 1.09);
g.set_repair_time(Line(0, 60), 3.22);
g.set_repair_time(Line(1, 2), 1.42);
g.set_repair_time(Line(3, 21), 3.67);
g.set_repair_time(Line(4, 65), 2.58);
g.set_repair_time(Line(4, 71), 2.32);
g.set_repair_time(Line(5, 27), 2.62);
g.set_repair_time(Line(6, 17), 4.49);
g.set_repair_time(Line(7, 47), 1.68);
g.set_repair_time(Line(9, 37), 3.48);
g.set_repair_time(Line(9, 71), 1.94);
g.set_repair_time(Line(9, 73), 4.84);
g.set_repair_time(Line(10, 53), 2.1);
g.set_repair_time(Line(10, 76), 3.13);
g.set_repair_time(Line(11, 51), 4.62);
g.set_repair_time(Line(11, 52), 2.82);
g.set_repair_time(Line(11, 73), 4.11);
g.set_repair_time(Line(12, 61), 2.2);
g.set_repair_time(Line(13, 32), 2.7);
g.set_repair_time(Line(13, 61), 4.8);
g.set_repair_time(Line(14, 62), 4.17);
g.set_repair_time(Line(15, 57), 1.66);
g.set_repair_time(Line(16, 50), 1.33);
g.set_repair_time(Line(17, 40), 2.72);
g.set_repair_time(Line(18, 66), 3.43);
g.set_repair_time(Line(18, 79), 2.59);
g.set_repair_time(Line(19, 43), 3.68);
g.set_repair_time(Line(19, 50), 4.75);
g.set_repair_time(Line(20, 26), 1.41);
g.set_repair_time(Line(20, 43), 4.24);
g.set_repair_time(Line(21, 56), 2.88);
g.set_repair_time(Line(22, 55), 3.49);
g.set_repair_time(Line(23, 46), 2.64);
g.set_repair_time(Line(24, 26), 3.71);
g.set_repair_time(Line(24, 48), 3.23);
g.set_repair_time(Line(24, 60), 1.52);
g.set_repair_time(Line(25, 78), 2.45);
g.set_repair_time(Line(26, 35), 3.44);
g.set_repair_time(Line(27, 67), 4.7);
g.set_repair_time(Line(28, 30), 1.46);
g.set_repair_time(Line(28, 37), 3.85);
g.set_repair_time(Line(29, 38), 3.41);
g.set_repair_time(Line(29, 52), 2.8);
g.set_repair_time(Line(29, 61), 3.43);
g.set_repair_time(Line(30, 45), 4.1);
g.set_repair_time(Line(31, 75), 4.66);
g.set_repair_time(Line(32, 35), 1.21);
g.set_repair_time(Line(32, 76), 1.71);
g.set_repair_time(Line(33, 58), 2.3);
g.set_repair_time(Line(34, 39), 1.03);
g.set_repair_time(Line(36, 42), 3.15);
g.set_repair_time(Line(38, 44), 1.84);
g.set_repair_time(Line(38, 51), 3.69);
g.set_repair_time(Line(39, 52), 2.46);
g.set_repair_time(Line(39, 72), 4.57);
g.set_repair_time(Line(41, 63), 2.09);
g.set_repair_time(Line(44, 54), 3.46);
g.set_repair_time(Line(47, 54), 3.64);
g.set_repair_time(Line(49, 64), 1.18);
g.set_repair_time(Line(49, 79), 4.69);
g.set_repair_time(Line(53, 63), 4.88);
g.set_repair_time(Line(55, 56), 4.47);
g.set_repair_time(Line(56, 64), 1.07);
g.set_repair_time(Line(58, 73), 1.62);
g.set_repair_time(Line(59, 76), 2.1);
g.set_repair_time(Line(61, 72), 3.63);
g.set_repair_time(Line(62, 70), 1.36);
g.set_repair_time(Line(64, 77), 4.56);
g.set_repair_time(Line(65, 71), 2.75);
g.set_repair_time(Line(68, 78), 4.88);
g.set_repair_time(Line(69, 72), 4.58);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 41.0625}, {2, 34.8125}, {3, 24.0875}, {4, 25.8375}, {5, 20.3}, {6, 16.4375}, {7, 22.4875}, {8, 38.4125}, {9, 13.3375}, {10, 33.2375}, {11, 7.0625}, {12, 33.375}, {13, 28.6375}, {14, 2.5}, {15, 25.5625}, {16, 25.9375}, {17, 8.8375}, {18, 29.55}, {19, 25.0375}, {20, 23.45}, {21, 28.225}, {22, 31.925}, {23, 28.7375}, {24, 17.1375}, {25, 29.0625}, {26, 28.3125}, {27, 11.925}, {28, 23.9}, {29, 18.95}, {30, 24.2125}, {31, 34.625}, {32, 18.6375}, {33, 25.35}, {34, 23.4375}, {35, 28.7125}, {36, 21.7125}, {37, 16.125}, {38, 17.2625}, {39, 19.9125}, {40, 12.5875}, {41, 34.575}, {42, 25.8875}, {43, 24.5625}, {44, 29.1125}, {45, 21.475}, {46, 25.95}, {47, 26.9875}, {48, 19.925}, {49, 20.0375}, {50, 25.6625}, {51, 13.3125}, {52, 16.1625}, {53, 27.9375}, {54, 32.1375}, {55, 25.5625}, {56, 22.775}, {57, 28.35}, {58, 18.9875}, {59, 29.325}, {60, 7.0625}, {61, 22.7}, {62, 11.3375}, {63, 32.9375}, {64, 18.275}, {65, 25.4375}, {66, 32.05}, {67, 23.4375}, {68, 39.1375}, {69, 21.425}, {70, 13.1}, {71, 17.8375}, {72, 27.5125}, {73, 8.3125}, {74, 26.9125}, {75, 42.125}, {76, 26.5375}, {77, 10.675}, {78, 31.85}, {79, 22.825}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 41.0625}, {1, 0}, {2, 6.25}, {3, 36.075}, {4, 30.025}, {5, 29.4375}, {6, 39.825}, {7, 31.3}, {8, 48.45}, {9, 27.725}, {10, 35.6}, {11, 35.3375}, {12, 35.95}, {13, 32.775}, {14, 43.5625}, {15, 31.275}, {16, 23.3}, {17, 32.225}, {18, 49.8375}, {19, 19.15}, {20, 33.175}, {21, 40.2125}, {22, 43.2125}, {23, 46.225}, {24, 27.05}, {25, 18.9125}, {26, 38.225}, {27, 37.8125}, {28, 33.3125}, {29, 29.025}, {30, 39.5625}, {31, 37.2}, {32, 33.025}, {33, 35.45}, {34, 25.8}, {35, 43.1}, {36, 19.35}, {37, 24.9375}, {38, 44.075}, {39, 29.325}, {40, 35.975}, {41, 39.05}, {42, 23.85}, {43, 23.1}, {44, 52.4625}, {45, 44.7125}, {46, 49.0125}, {47, 35.8}, {48, 29.8375}, {49, 40.325}, {50, 15.4}, {51, 41.5875}, {52, 31.8125}, {53, 30.3}, {54, 40.95}, {55, 36.85}, {56, 34.0625}, {57, 34.0625}, {58, 41.8125}, {59, 39.2875}, {60, 37.125}, {61, 25.275}, {62, 52.4}, {63, 35.3}, {64, 38.5625}, {65, 37.425}, {66, 52.3375}, {67, 46.2875}, {68, 8.8375}, {69, 42.2875}, {70, 53.0875}, {71, 29.825}, {72, 34.7875}, {73, 34.0875}, {74, 14.15}, {75, 44.7}, {76, 40.925}, {77, 39.0625}, {78, 16.125}, {79, 43.1125}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 34.8125}, {1, 6.25}, {2, 0}, {3, 29.825}, {4, 23.775}, {5, 23.1875}, {6, 33.575}, {7, 25.05}, {8, 44.4625}, {9, 21.475}, {10, 29.35}, {11, 29.0875}, {12, 41.5625}, {13, 36.775}, {14, 37.3125}, {15, 25.025}, {16, 17.05}, {17, 25.975}, {18, 43.5875}, {19, 12.9}, {20, 26.925}, {21, 33.9625}, {22, 36.9625}, {23, 39.975}, {24, 20.8}, {25, 25.1625}, {26, 31.975}, {27, 31.5625}, {28, 27.0625}, {29, 29.6125}, {30, 33.3125}, {31, 40.3125}, {32, 26.775}, {33, 29.2}, {34, 19.55}, {35, 36.85}, {36, 13.1}, {37, 18.6875}, {38, 39.2875}, {39, 23.075}, {40, 29.725}, {41, 32.8}, {42, 17.6}, {43, 16.85}, {44, 46.2125}, {45, 38.4625}, {46, 42.7625}, {47, 29.55}, {48, 23.5875}, {49, 34.075}, {50, 9.15}, {51, 35.3375}, {52, 26.825}, {53, 24.05}, {54, 34.7}, {55, 30.6}, {56, 27.8125}, {57, 27.8125}, {58, 35.5625}, {59, 35.175}, {60, 30.875}, {61, 31.525}, {62, 46.15}, {63, 29.05}, {64, 32.3125}, {65, 31.175}, {66, 46.0875}, {67, 40.0375}, {68, 15.0875}, {69, 36.1}, {70, 46.8375}, {71, 23.575}, {72, 30.675}, {73, 27.8375}, {74, 7.9}, {75, 48.2125}, {76, 34.675}, {77, 32.8125}, {78, 22.375}, {79, 36.8625}, 