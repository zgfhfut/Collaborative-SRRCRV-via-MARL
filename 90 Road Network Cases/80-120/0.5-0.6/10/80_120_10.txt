node_num : 80
demand_node_num : 40
edge_num : 120
damaged_edge_num : 72
/***********************node**************************/
const set<int> node_store = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,  };
/*********************demand_node*********************/
const set<int> demand_node_store = { 7, 8, 10, 11, 14, 17, 19, 22, 25, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 62, 66, 67, 70, 71, 73, 74, 78,  };
/***********************edge**************************/
const set<Line> edge_store = { Line(0, 33), Line(0, 51), Line(0, 78), Line(1, 46), Line(1, 65), Line(1, 67), Line(2, 20), Line(2, 22), Line(2, 28), Line(3, 53), Line(3, 67), Line(4, 53), Line(4, 64), Line(4, 79), Line(5, 10), Line(5, 23), Line(5, 28), Line(5, 54), Line(5, 69), Line(6, 8), Line(6, 39), Line(7, 63), Line(7, 73), Line(8, 76), Line(9, 41), Line(9, 47), Line(9, 57), Line(10, 41), Line(11, 30), Line(11, 35), Line(11, 38), Line(12, 14), Line(12, 16), Line(12, 52), Line(13, 17), Line(13, 50), Line(13, 59), Line(14, 56), Line(15, 18), Line(15, 24), Line(15, 61), Line(16, 27), Line(16, 30), Line(16, 36), Line(17, 19), Line(17, 69), Line(18, 27), Line(18, 64), Line(18, 70), Line(19, 77), Line(20, 44), Line(21, 71), Line(21, 74), Line(22, 29), Line(22, 34), Line(23, 39), Line(23, 46), Line(23, 47), Line(24, 27), Line(24, 31), Line(24, 48), Line(25, 59), Line(25, 70), Line(26, 28), Line(26, 64), Line(27, 68), Line(28, 59), Line(29, 31), Line(29, 33), Line(30, 35), Line(30, 41), Line(30, 60), Line(31, 56), Line(32, 37), Line(32, 45), Line(32, 51), Line(32, 55), Line(32, 59), Line(33, 55), Line(34, 59), Line(34, 63), Line(35, 68), Line(36, 63), Line(36, 74), Line(37, 57), Line(37, 63), Line(38, 73), Line(39, 55), Line(39, 65), Line(39, 74), Line(40, 54), Line(40, 56), Line(40, 60), Line(42, 49), Line(42, 66), Line(42, 73), Line(43, 49), Line(43, 53), Line(44, 58), Line(45, 65), Line(45, 66), Line(45, 71), Line(47, 60), Line(48, 77), Line(49, 73), Line(50, 63), Line(50, 69), Line(52, 67), Line(52, 71), Line(53, 72), Line(57, 68), Line(58, 65), Line(60, 69), Line(61, 79), Line(62, 72), Line(62, 75), Line(63, 65), Line(67, 75), Line(70, 78), Line(72, 76),  };
/********************damaged_node*********************/
const set<Line> damaged_edge_store = { Line(0, 33), Line(0, 51), Line(0, 78), Line(1, 46), Line(1, 65), Line(1, 67), Line(2, 20), Line(2, 28), Line(3, 53), Line(3, 67), Line(4, 53), Line(4, 79), Line(5, 10), Line(5, 23), Line(6, 8), Line(7, 63), Line(7, 73), Line(8, 76), Line(9, 41), Line(9, 47), Line(9, 57), Line(10, 41), Line(11, 30), Line(11, 35), Line(12, 16), Line(12, 52), Line(13, 50), Line(15, 24), Line(15, 61), Line(16, 30), Line(17, 19), Line(17, 69), Line(18, 64), Line(19, 77), Line(21, 74), Line(22, 29), Line(24, 48), Line(25, 59), Line(25, 70), Line(26, 28), Line(29, 31), Line(29, 33), Line(30, 35), Line(30, 41), Line(30, 60), Line(31, 56), Line(32, 37), Line(32, 55), Line(32, 59), Line(34, 63), Line(35, 68), Line(36, 74), Line(37, 57), Line(38, 73), Line(39, 55), Line(39, 74), Line(40, 54), Line(42, 66), Line(43, 49), Line(43, 53), Line(45, 65), Line(45, 66), Line(45, 71), Line(49, 73), Line(50, 69), Line(52, 67), Line(52, 71), Line(53, 72), Line(57, 68), Line(58, 65), Line(60, 69), Line(67, 75),  };
const double demand_num_pro = 0.5;
const double damaged_edge_pro = 0.6;
/*********************add_edge*************************/
g.add_edge(0, 33, 1.41);
g.add_edge(0, 51, 9.21);
g.add_edge(0, 78, 6.32);
g.add_edge(1, 46, 8.06);
g.add_edge(1, 65, 5.09);
g.add_edge(1, 67, 9.43);
g.add_edge(2, 20, 5);
g.add_edge(2, 22, 2.23);
g.add_edge(2, 28, 4.47);
g.add_edge(3, 53, 6);
g.add_edge(3, 67, 7.21);
g.add_edge(4, 53, 2.82);
g.add_edge(4, 64, 6.4);
g.add_edge(4, 79, 2.82);
g.add_edge(5, 10, 6.08);
g.add_edge(5, 23, 5.65);
g.add_edge(5, 28, 4.47);
g.add_edge(5, 54, 6.32);
g.add_edge(5, 69, 3.16);
g.add_edge(6, 8, 9);
g.add_edge(6, 39, 5.65);
g.add_edge(7, 63, 9.21);
g.add_edge(7, 73, 7.81);
g.add_edge(8, 76, 3.6);
g.add_edge(9, 41, 11.4);
g.add_edge(9, 47, 7.61);
g.add_edge(9, 57, 10);
g.add_edge(10, 41, 4.47);
g.add_edge(11, 30, 7.07);
g.add_edge(11, 35, 6);
g.add_edge(11, 38, 5);
g.add_edge(12, 14, 6.4);
g.add_edge(12, 16, 9);
g.add_edge(12, 52, 5);
g.add_edge(13, 17, 6);
g.add_edge(13, 50, 9);
g.add_edge(13, 59, 5.09);
g.add_edge(14, 56, 2.23);
g.add_edge(15, 18, 5.38);
g.add_edge(15, 24, 5.09);
g.add_edge(15, 61, 2.23);
g.add_edge(16, 27, 11.4);
g.add_edge(16, 30, 7.61);
g.add_edge(16, 36, 5.38);
g.add_edge(17, 19, 3.16);
g.add_edge(17, 69, 5.65);
g.add_edge(18, 27, 10.29);
g.add_edge(18, 64, 5.65);
g.add_edge(18, 70, 2.82);
g.add_edge(19, 77, 1);
g.add_edge(20, 44, 7.61);
g.add_edge(21, 71, 2.82);
g.add_edge(21, 74, 7.21);
g.add_edge(22, 29, 2.82);
g.add_edge(22, 34, 3.6);
g.add_edge(23, 39, 2.23);
g.add_edge(23, 46, 7.07);
g.add_edge(23, 47, 6.4);
g.add_edge(24, 27, 9.21);
g.add_edge(24, 31, 7.07);
g.add_edge(24, 48, 9.21);
g.add_edge(25, 59, 8);
g.add_edge(25, 70, 7.28);
g.add_edge(26, 28, 5.38);
g.add_edge(26, 64, 8.24);
g.add_edge(27, 68, 8.06);
g.add_edge(28, 59, 2);
g.add_edge(29, 31, 3);
g.add_edge(29, 33, 3);
g.add_edge(30, 35, 1.41);
g.add_edge(30, 41, 4);
g.add_edge(30, 60, 5);
g.add_edge(31, 56, 2.82);
g.add_edge(32, 37, 5.09);
g.add_edge(32, 45, 1);
g.add_edge(32, 51, 9.43);
g.add_edge(32, 55, 3.6);
g.add_edge(32, 59, 7.07);
g.add_edge(33, 55, 5);
g.add_edge(34, 59, 4.24);
g.add_edge(34, 63, 7.21);
g.add_edge(35, 68, 1);
g.add_edge(36, 63, 7.61);
g.add_edge(36, 74, 9);
g.add_edge(37, 57, 6.4);
g.add_edge(37, 63, 7.07);
g.add_edge(38, 73, 1.41);
g.add_edge(39, 55, 4.24);
g.add_edge(39, 65, 4.47);
g.add_edge(39, 74, 5.83);
g.add_edge(40, 54, 7);
g.add_edge(40, 56, 6.4);
g.add_edge(40, 60, 9.43);
g.add_edge(42, 49, 6.32);
g.add_edge(42, 66, 3.16);
g.add_edge(42, 73, 4.12);
g.add_edge(43, 49, 8.06);
g.add_edge(43, 53, 7.07);
g.add_edge(44, 58, 5.38);
g.add_edge(45, 65, 6.32);
g.add_edge(45, 66, 5.09);
g.add_edge(45, 71, 5.83);
g.add_edge(47, 60, 3.6);
g.add_edge(48, 77, 8.48);
g.add_edge(49, 73, 2.23);
g.add_edge(50, 63, 9.21);
g.add_edge(50, 69, 8.06);
g.add_edge(52, 67, 2.23);
g.add_edge(52, 71, 3.16);
g.add_edge(53, 72, 5);
g.add_edge(57, 68, 7.28);
g.add_edge(58, 65, 6.08);
g.add_edge(60, 69, 6.32);
g.add_edge(61, 79, 2.23);
g.add_edge(62, 72, 5.38);
g.add_edge(62, 75, 8);
g.add_edge(63, 65, 2.23);
g.add_edge(67, 75, 2);
g.add_edge(70, 78, 7.81);
g.add_edge(72, 76, 2);
/*********************set_importance*************************/
g.set_importance(0, 0);
g.set_importance(1, 0);
g.set_importance(2, 0);
g.set_importance(3, 0);
g.set_importance(4, 0);
g.set_importance(5, 0);
g.set_importance(6, 0);
g.set_importance(7, 9.03);
g.set_importance(8, 7.81);
g.set_importance(9, 0);
g.set_importance(10, 6.55);
g.set_importance(11, 5.74);
g.set_importance(12, 0);
g.set_importance(13, 0);
g.set_importance(14, 6.88);
g.set_importance(15, 0);
g.set_importance(16, 0);
g.set_importance(17, 5.58);
g.set_importance(18, 0);
g.set_importance(19, 6.17);
g.set_importance(20, 0);
g.set_importance(21, 0);
g.set_importance(22, 8.21);
g.set_importance(23, 0);
g.set_importance(24, 0);
g.set_importance(25, 9.65);
g.set_importance(26, 0);
g.set_importance(27, 0);
g.set_importance(28, 0);
g.set_importance(29, 0);
g.set_importance(30, 0);
g.set_importance(31, 0);
g.set_importance(32, 8.73);
g.set_importance(33, 6.69);
g.set_importance(34, 1.43);
g.set_importance(35, 3.07);
g.set_importance(36, 3.52);
g.set_importance(37, 9.11);
g.set_importance(38, 0);
g.set_importance(39, 7.44);
g.set_importance(40, 7.14);
g.set_importance(41, 8.11);
g.set_importance(42, 9.42);
g.set_importance(43, 6.64);
g.set_importance(44, 0);
g.set_importance(45, 1.83);
g.set_importance(46, 2.89);
g.set_importance(47, 8.34);
g.set_importance(48, 0);
g.set_importance(49, 3.45);
g.set_importance(50, 4.72);
g.set_importance(51, 4.92);
g.set_importance(52, 4.99);
g.set_importance(53, 7.07);
g.set_importance(54, 7.28);
g.set_importance(55, 0);
g.set_importance(56, 1.07);
g.set_importance(57, 8.84);
g.set_importance(58, 8.18);
g.set_importance(59, 0);
g.set_importance(60, 0);
g.set_importance(61, 0);
g.set_importance(62, 1.39);
g.set_importance(63, 0);
g.set_importance(64, 0);
g.set_importance(65, 0);
g.set_importance(66, 6.09);
g.set_importance(67, 2.89);
g.set_importance(68, 0);
g.set_importance(69, 0);
g.set_importance(70, 4.26);
g.set_importance(71, 4.71);
g.set_importance(72, 0);
g.set_importance(73, 7.74);
g.set_importance(74, 4.32);
g.set_importance(75, 0);
g.set_importance(76, 0);
g.set_importance(77, 0);
g.set_importance(78, 6.46);
g.set_importance(79, 0);
/*********************set_repair*************************/
g.set_repair_time(Line(0, 33), 2.3);
g.set_repair_time(Line(0, 51), 1);
g.set_repair_time(Line(0, 78), 2.54);
g.set_repair_time(Line(1, 46), 4.41);
g.set_repair_time(Line(1, 65), 3.95);
g.set_repair_time(Line(1, 67), 4.33);
g.set_repair_time(Line(2, 20), 1.94);
g.set_repair_time(Line(2, 28), 1.22);
g.set_repair_time(Line(3, 53), 1.12);
g.set_repair_time(Line(3, 67), 2.71);
g.set_repair_time(Line(4, 53), 4.56);
g.set_repair_time(Line(4, 79), 2.55);
g.set_repair_time(Line(5, 10), 2.14);
g.set_repair_time(Line(5, 23), 3.35);
g.set_repair_time(Line(6, 8), 3.11);
g.set_repair_time(Line(7, 63), 2.49);
g.set_repair_time(Line(7, 73), 4.7);
g.set_repair_time(Line(8, 76), 2.68);
g.set_repair_time(Line(9, 41), 4.22);
g.set_repair_time(Line(9, 47), 4.81);
g.set_repair_time(Line(9, 57), 2.26);
g.set_repair_time(Line(10, 41), 3.89);
g.set_repair_time(Line(11, 30), 4.14);
g.set_repair_time(Line(11, 35), 1.1);
g.set_repair_time(Line(12, 16), 3.13);
g.set_repair_time(Line(12, 52), 4.27);
g.set_repair_time(Line(13, 50), 2.61);
g.set_repair_time(Line(15, 24), 3.15);
g.set_repair_time(Line(15, 61), 2.7);
g.set_repair_time(Line(16, 30), 4.67);
g.set_repair_time(Line(17, 19), 1.51);
g.set_repair_time(Line(17, 69), 2.04);
g.set_repair_time(Line(18, 64), 2.24);
g.set_repair_time(Line(19, 77), 4.35);
g.set_repair_time(Line(21, 74), 3.38);
g.set_repair_time(Line(22, 29), 2.63);
g.set_repair_time(Line(24, 48), 2.31);
g.set_repair_time(Line(25, 59), 2.16);
g.set_repair_time(Line(25, 70), 3.72);
g.set_repair_time(Line(26, 28), 3.1);
g.set_repair_time(Line(29, 31), 2.52);
g.set_repair_time(Line(29, 33), 3.31);
g.set_repair_time(Line(30, 35), 2);
g.set_repair_time(Line(30, 41), 1.61);
g.set_repair_time(Line(30, 60), 4.91);
g.set_repair_time(Line(31, 56), 3.03);
g.set_repair_time(Line(32, 37), 3.2);
g.set_repair_time(Line(32, 55), 2.39);
g.set_repair_time(Line(32, 59), 4.58);
g.set_repair_time(Line(34, 63), 3.76);
g.set_repair_time(Line(35, 68), 2.29);
g.set_repair_time(Line(36, 74), 2.95);
g.set_repair_time(Line(37, 57), 2.39);
g.set_repair_time(Line(38, 73), 3.45);
g.set_repair_time(Line(39, 55), 4.56);
g.set_repair_time(Line(39, 74), 3.27);
g.set_repair_time(Line(40, 54), 4.89);
g.set_repair_time(Line(42, 66), 3.99);
g.set_repair_time(Line(43, 49), 1.02);
g.set_repair_time(Line(43, 53), 2.36);
g.set_repair_time(Line(45, 65), 2.26);
g.set_repair_time(Line(45, 66), 2.31);
g.set_repair_time(Line(45, 71), 4.21);
g.set_repair_time(Line(49, 73), 4.27);
g.set_repair_time(Line(50, 69), 1.15);
g.set_repair_time(Line(52, 67), 3.44);
g.set_repair_time(Line(52, 71), 3.12);
g.set_repair_time(Line(53, 72), 1.95);
g.set_repair_time(Line(57, 68), 3.14);
g.set_repair_time(Line(58, 65), 3.3);
g.set_repair_time(Line(60, 69), 2.95);
g.set_repair_time(Line(67, 75), 2.95);
const double max_allowed_pro0 = 1.25
const map<int, double> max_allowed_dis_store0 = { {0, 0}, {1, 25.2625}, {2, 11.825}, {3, 36.8}, {4, 33.5625}, {5, 23}, {6, 20.375}, {7, 33.2}, {8, 31.625}, {9, 33.6125}, {10, 30.6}, {11, 37.2375}, {12, 23.575}, {13, 25.2}, {14, 15.575}, {15, 24.4625}, {16, 34.825}, {17, 32.7}, {18, 21.1875}, {19, 36.65}, {20, 18.075}, {21, 24.575}, {22, 9.0375}, {23, 16.1}, {24, 18.1}, {25, 26.7625}, {26, 24.1375}, {27, 29.6125}, {28, 17.4125}, {29, 5.5125}, {30, 34.85}, {31, 9.2625}, {32, 12.5125}, {33, 1.7625}, {34, 13.5375}, {35, 36.6125}, {36, 31.2}, {37, 18.875}, {38, 30.9875}, {39, 13.3125}, {40, 20.7875}, {41, 36.1875}, {42, 24.075}, {43, 42.05}, {44, 27.5875}, {45, 13.7625}, {46, 24.9375}, {47, 24.1}, {48, 29.6125}, {49, 31.975}, {50, 33.2}, {51, 11.5125}, {52, 25}, {53, 37.0875}, {54, 29.5375}, {55, 8.0125}, {56, 12.7875}, {57, 26.875}, {58, 26.5}, {59, 18.8375}, {60, 28.6}, {61, 27.25}, {62, 40.2875}, {63, 21.6875}, {64, 28.25}, {65, 18.9}, {66, 20.125}, {67, 27.7875}, {68, 35.975}, {69, 26.95}, {70, 17.6625}, {71, 21.05}, {72, 38.625}, {73, 29.225}, {74, 20.6}, {75, 30.2875}, {76, 36.125}, {77, 37.9}, {78, 7.9}, {79, 30.0375}, const double max_allowed_pro1 = 1.25
const map<int, double> max_allowed_dis_store1 = { {0, 25.2625}, {1, 0}, {2, 25.45}, {3, 20.8}, {4, 31.825}, {5, 21.8}, {6, 19.0125}, {7, 20.6625}, {8, 30.2625}, {9, 32.25}, {10, 29.4}, {11, 37.7375}, {12, 20.825}, {13, 29.825}, {14, 28.825}, {15, 40.925}, {16, 25.3875}, {17, 32.8125}, {18, 46.0875}, {19, 36.7625}, {20, 30.2}, {21, 22.05}, {22, 22.6625}, {23, 14.7375}, {24, 38.775}, {25, 33.4625}, {26, 32.6875}, {27, 39.6375}, {28, 25.9625}, {29, 26.1875}, {30, 33.4875}, {31, 29.9375}, {32, 15.5125}, {33, 23.5}, {34, 18.1625}, {35, 35.25}, {36, 18.6625}, {37, 17.9875}, {38, 31.4875}, {39, 11.95}, {40, 38.45}, {41, 34.9875}, {42, 24.575}, {43, 37.1375}, {44, 20.6875}, {45, 14.2625}, {46, 10.075}, {47, 22.7375}, {48, 48.6125}, {49, 32.475}, {50, 20.6625}, {51, 27.3}, {52, 14.575}, {53, 28.3}, {54, 29.7}, {55, 17.25}, {56, 31.6125}, {57, 25.9875}, {58, 13.9625}, {59, 23.4625}, {60, 27.2375}, {61, 38.1375}, {62, 24.2875}, {63, 9.15}, {64, 39.825}, {65, 6.3625}, {66, 20.625}, {67, 11.7875}, {68, 35.0875}, {69, 25.75}, {70, 42.5625}, {71, 18.525}, {72, 31.0125}, {73, 29.725}, {74, 19.2375}, {75, 14.2875}, {76, 33.5125}, {77, 38.0125}, {78, 33.1625}, {79, 35.35}, const double max_allowed_pro2 = 1.25
const map<int, double> max_allowed_dis_store2 = { {0, 11.825}, {1, 25.45}, {2, 0}, {3, 41.2125}, {4, 30.6125}, {5, 11.175}, {6, 28.0875}, {7, 27.8125}, {8, 39.3375}, {9, 35.75}, {10, 18.775}, {11, 38.1125}, {12, 24.375}, {13, 14.45}, {14, 16.375}, {15, 25.2625}, {16, 32.5375}, {17, 21.95}, {18, 29.675}, {19, 25.9}, {20, 6.25}, {21, 28.9875}, {22, 2.7875}, {23, 18.2375}, {24, 18.9}, {25, 18.0875}, {26, 12.3125}, {27, 30.4125}, {28, 5.5875}, {29, 6.3125}, {30, 29.275}, {31, 10.0625}, {32, 16.925}, {33, 10.0625}, {34, 7.2875}, {35, 31.0375}, {36, 25.8125}, {37, 23.2875}, {38, 35.4}, {39, 21.025}, {40, 21.5875}, {41, 24.3625}, {42, 28.4875}, {43, 42.975}, {44, 15.7625}, {45, 18.175}, {46, 27.075}, {47, 26.2375}, {48, 30.4125}, {49, 36.3875}, {50, 25.2}, {51, 23.3375}, {52, 29.4125}, {53, 34.1375}, {54, 19.075}, {55, 16.3125}, {56, 13.5875}, {57, 31.2875}, {58, 22.4875}, {59, 8.0875}, {60, 23.025}, {61, 28.05}, {62, 44.7}, {63, 16.3}, {64, 22.6125}, {65, 19.0875}, {66, 24.5375}, {67, 32.2}, {68, 32.2875}, {69, 15.125}, {70, 27.1875}, {71, 25.4625}, {72, 40.3875}, {73, 33.6375}, {74, 28.3125}, {75, 34.7}, {76, 42.8875}, {77, 27.15}, {78, 19.725}, {79, 30.8375}, 